{
  "address": "0x7D68ECf1762bA27120d0f98BFcFa0da67eb15860",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "CheckpointToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEpoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "I_TETU_ERC165",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VE_DIST_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sinceLast",
          "type": "uint256"
        }
      ],
      "name": "adjustToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptTs",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "ptBias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "ptSlope",
          "type": "int128"
        }
      ],
      "name": "adjustVeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weekCursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastTokenTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int128",
              "name": "bias",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "slope",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVe.Point",
          "name": "userPoint",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "userEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserEpoch",
          "type": "uint256"
        },
        {
          "internalType": "contract IVe",
          "name": "_ve",
          "type": "address"
        }
      ],
      "name": "calculateToDistribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "toDistribute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userEpoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weekCursor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxUserEpoch",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "internalType": "struct VeDistributor.ClaimCalculationResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMany",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVe",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "findTimestampEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVe",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserEpoch",
          "type": "uint256"
        }
      ],
      "name": "findTimestampUserEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timeCursorOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userEpochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "contract IVe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "veForAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "veSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e5f6547e83a5132d7c7eef01b09aaef38a93cea4a95ab30f8e734ecf44cc438",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0x7D68ECf1762bA27120d0f98BFcFa0da67eb15860",
    "transactionIndex": 0,
    "gasUsed": "2287248",
    "logsBloom": "0x
    "blockHash": "0x187063832c1b2f3c4715b092f2bbc4552a290a7b7f20b70f84c760666fa89449",
    "transactionHash": "0x1e5f6547e83a5132d7c7eef01b09aaef38a93cea4a95ab30f8e734ecf44cc438",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1961067,
        "transactionHash": "0x1e5f6547e83a5132d7c7eef01b09aaef38a93cea4a95ab30f8e734ecf44cc438",
        "address": "0x7D68ECf1762bA27120d0f98BFcFa0da67eb15860",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x187063832c1b2f3c4715b092f2bbc4552a290a7b7f20b70f84c760666fa89449"
      }
    ],
    "blockNumber": 1961067,
    "cumulativeGasUsed": "2287248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29cd153aaed98a3f3bb92c92603933d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEpoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"I_TETU_ERC165\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_DIST_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceLast\",\"type\":\"uint256\"}],\"name\":\"adjustToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptTs\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"ptBias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"ptSlope\",\"type\":\"int128\"}],\"name\":\"adjustVeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekCursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastTokenTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVe.Point\",\"name\":\"userPoint\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"userEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserEpoch\",\"type\":\"uint256\"},{\"internalType\":\"contract IVe\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"calculateToDistribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekCursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserEpoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"struct VeDistributor.ClaimCalculationResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVe\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"findTimestampEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVe\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserEpoch\",\"type\":\"uint256\"}],\"name\":\"findTimestampUserEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"contract IVe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"veForAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"veSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"belbix\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"adjustToDistribute(uint256,uint256,uint256,uint256)\":{\"details\":\"Adjust value based on time since last update\"},\"adjustVeSupply(uint256,uint256,int128,int128)\":{\"details\":\"Calculate ve supply based on bias and slop for the given timestamp\"},\"checkpointTotalSupply()\":{\"details\":\"Call ve checkpoint and write veSupply at the current timeCursor\"},\"claim(uint256)\":{\"details\":\"Claim rewards for given veID\"},\"claimMany(uint256[])\":{\"details\":\"Claim rewards for given veIDs\"},\"claimable(uint256)\":{\"details\":\"Return available to claim earned amount\"},\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"findTimestampEpoch(address,uint256)\":{\"details\":\"Search in the loop given timestamp through ve points history.      Return minimal possible epoch.\"},\"findTimestampUserEpoch(address,uint256,uint256,uint256)\":{\"details\":\"Search in the loop given timestamp through ve user points history.      Return minimal possible epoch.\"},\"getSlot(uint256)\":{\"details\":\"Gets a slot as bytes32\"},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"init(address,address,address)\":{\"details\":\"Proxy initialization. Call it after contract deploy.\"},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"revision()\":{\"details\":\"Contract upgrade counter\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"timestamp()\":{\"details\":\"Block timestamp rounded to weeks\"},\"veForAt(uint256,uint256)\":{\"details\":\"Return ve power at given timestamp\"}},\"stateVariables\":{\"VE_DIST_VERSION\":{\"details\":\"Version of this contract. Adjust manually on each code modification.\"},\"activePeriod\":{\"details\":\"Cursor for the current epoch\"},\"lastTokenTime\":{\"details\":\"Last checkpoint time\"},\"rewardToken\":{\"details\":\"Token for ve rewards\"},\"startTime\":{\"details\":\"Timestamp when this contract was inited\"},\"timeCursor\":{\"details\":\"Ve supply checkpoint time cursor\"},\"timeCursorOf\":{\"details\":\"veID => week cursor stored on the claim action\"},\"tokenLastBalance\":{\"details\":\"Token balance updated on checkpoint/claim\"},\"tokensPerWeek\":{\"details\":\"Tokens per week stored on checkpoint call. Predefined array size = max weeks size\"},\"userEpochOf\":{\"details\":\"veID => epoch stored on the claim action\"},\"ve\":{\"details\":\"Voting escrow token address\"},\"veSupply\":{\"details\":\"Ve supply checkpoints. Predefined array size = max weeks size\"}},\"title\":\"Contract for distributing rewards to ve holders.        Rewards will be staked to the veNFT without extending lock period.        Based on Solidly contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VeDistributor.sol\":\"VeDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/VeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IVe.sol\\\";\\nimport \\\"./interfaces/IVeDistributor.sol\\\";\\nimport \\\"./dependencies/ControllableV3.sol\\\";\\n\\n/// @title Contract for distributing rewards to ve holders.\\n///        Rewards will be staked to the veNFT without extending lock period.\\n///        Based on Solidly contract.\\n/// @author belbix\\ncontract VeDistributor is ControllableV3, IVeDistributor {\\n  using SafeERC20 for IERC20;\\n\\n  // for contract internal purposes, don't need to store in the interface\\n  struct ClaimCalculationResult {\\n    uint toDistribute;\\n    uint userEpoch;\\n    uint weekCursor;\\n    uint maxUserEpoch;\\n    bool success;\\n  }\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant VE_DIST_VERSION = \\\"1.0.0\\\";\\n  uint internal constant WEEK = 7 * 86400;\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  /// @dev Voting escrow token address\\n  IVe public ve;\\n  /// @dev Token for ve rewards\\n  address public override rewardToken;\\n\\n  // --- CHECKPOINT\\n\\n  /// @dev Cursor for the current epoch\\n  uint public activePeriod;\\n  /// @dev Tokens per week stored on checkpoint call. Predefined array size = max weeks size\\n  uint[1000000000000000] public tokensPerWeek;\\n  /// @dev Ve supply checkpoints. Predefined array size = max weeks size\\n  uint[1000000000000000] public veSupply;\\n  /// @dev Ve supply checkpoint time cursor\\n  uint public timeCursor;\\n  /// @dev Token balance updated on checkpoint/claim\\n  uint public tokenLastBalance;\\n  /// @dev Last checkpoint time\\n  uint public lastTokenTime;\\n\\n  // --- CLAIM\\n\\n  /// @dev Timestamp when this contract was inited\\n  uint public startTime;\\n  /// @dev veID => week cursor stored on the claim action\\n  mapping(uint => uint) public timeCursorOf;\\n  /// @dev veID => epoch stored on the claim action\\n  mapping(uint => uint) public userEpochOf;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CheckpointToken(\\n    uint time,\\n    uint tokens\\n  );\\n\\n  event Claimed(\\n    uint tokenId,\\n    uint amount,\\n    uint claimEpoch,\\n    uint maxEpoch\\n  );\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @dev Proxy initialization. Call it after contract deploy.\\n  function init(\\n    address controller_,\\n    address _ve,\\n    address _rewardToken\\n  ) external initializer {\\n    __Controllable_init(controller_);\\n    _requireERC20(_rewardToken);\\n    _requireInterface(_ve, InterfaceIds.I_VE);\\n\\n    uint _t = block.timestamp / WEEK * WEEK;\\n    startTime = _t;\\n    lastTokenTime = _t;\\n    timeCursor = _t;\\n\\n    rewardToken = _rewardToken;\\n    ve = IVe(_ve);\\n\\n//    IERC20(_rewardToken).safeApprove(_ve, type(uint).max);\\n  }\\n\\n  // *************************************************************\\n  //                      CHECKPOINT\\n  // *************************************************************\\n\\n  function checkpoint() external override {\\n    uint _period = activePeriod;\\n    // only trigger if new week\\n    if (block.timestamp >= _period + 1 weeks) {\\n      // set new period rounded to weeks\\n      activePeriod = block.timestamp / 1 weeks * 1 weeks;\\n      // checkpoint token balance that was just minted in veDist\\n      _checkpointToken();\\n      // checkpoint supply\\n      _checkpointTotalSupply();\\n    }\\n  }\\n\\n  /// @dev Update tokensPerWeek value\\n  function _checkpointToken() internal {\\n    uint tokenBalance = IERC20(rewardToken).balanceOf(address(this));\\n    uint toDistribute = tokenBalance - tokenLastBalance;\\n    tokenLastBalance = tokenBalance;\\n\\n    uint t = lastTokenTime;\\n    uint sinceLast = block.timestamp - t;\\n    lastTokenTime = block.timestamp;\\n    uint thisWeek = t / WEEK * WEEK;\\n    uint nextWeek = 0;\\n\\n    // checkpoint should be called at least once per 20 weeks\\n    for (uint i = 0; i < 20; i++) {\\n      nextWeek = thisWeek + WEEK;\\n      if (block.timestamp < nextWeek) {\\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, block.timestamp, t, sinceLast);\\n        break;\\n      } else {\\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, nextWeek, t, sinceLast);\\n      }\\n      t = nextWeek;\\n      thisWeek = nextWeek;\\n    }\\n    emit CheckpointToken(block.timestamp, toDistribute);\\n  }\\n\\n  /// @dev Adjust value based on time since last update\\n  function adjustToDistribute(\\n    uint toDistribute,\\n    uint t0,\\n    uint t1,\\n    uint sinceLast\\n  ) public pure returns (uint) {\\n    if (t0 <= t1 || t0 - t1 == 0 || sinceLast == 0) {\\n      return toDistribute;\\n    }\\n    return toDistribute * (t0 - t1) / sinceLast;\\n  }\\n\\n  /// @dev Search in the loop given timestamp through ve points history.\\n  ///      Return minimal possible epoch.\\n  function findTimestampEpoch(IVe _ve, uint _timestamp) public view returns (uint) {\\n    uint _min = 0;\\n    uint _max = _ve.epoch();\\n    for (uint i = 0; i < 128; i++) {\\n      if (_min >= _max) break;\\n      uint _mid = (_min + _max + 2) / 2;\\n      IVe.Point memory pt = _ve.pointHistory(_mid);\\n      if (pt.ts <= _timestamp) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  /// @dev Search in the loop given timestamp through ve user points history.\\n  ///      Return minimal possible epoch.\\n  function findTimestampUserEpoch(\\n    IVe _ve,\\n    uint tokenId,\\n    uint _timestamp,\\n    uint maxUserEpoch\\n  ) public view returns (uint) {\\n    uint _min = 0;\\n    uint _max = maxUserEpoch;\\n    for (uint i = 0; i < 128; i++) {\\n      if (_min >= _max) break;\\n      uint _mid = (_min + _max + 2) / 2;\\n      IVe.Point memory pt = _ve.userPointHistory(tokenId, _mid);\\n      if (pt.ts <= _timestamp) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  /// @dev Return ve power at given timestamp\\n  function veForAt(uint _tokenId, uint _timestamp) external view returns (uint) {\\n    IVe _ve = ve;\\n    uint maxUserEpoch = _ve.userPointEpoch(_tokenId);\\n    uint epoch = findTimestampUserEpoch(_ve, _tokenId, _timestamp, maxUserEpoch);\\n    IVe.Point memory pt = _ve.userPointHistory(_tokenId, epoch);\\n    return uint(int256(_positiveInt128(pt.bias - pt.slope * (int128(int256(_timestamp - pt.ts))))));\\n  }\\n\\n  /// @dev Call ve checkpoint and write veSupply at the current timeCursor\\n  function checkpointTotalSupply() external override {\\n    _checkpointTotalSupply();\\n  }\\n\\n  function _checkpointTotalSupply() internal {\\n    IVe _ve = ve;\\n    uint t = timeCursor;\\n    uint roundedTimestamp = block.timestamp / WEEK * WEEK;\\n    _ve.checkpoint();\\n\\n    // assume will be called more frequently than 20 weeks\\n    for (uint i = 0; i < 20; i++) {\\n      if (t > roundedTimestamp) {\\n        break;\\n      } else {\\n        uint epoch = findTimestampEpoch(_ve, t);\\n        IVe.Point memory pt = _ve.pointHistory(epoch);\\n        veSupply[t] = adjustVeSupply(t, pt.ts, pt.bias, pt.slope);\\n      }\\n      t += WEEK;\\n    }\\n    timeCursor = t;\\n  }\\n\\n  /// @dev Calculate ve supply based on bias and slop for the given timestamp\\n  function adjustVeSupply(uint t, uint ptTs, int128 ptBias, int128 ptSlope) public pure returns (uint) {\\n    if (t < ptTs) {\\n      return 0;\\n    }\\n    int128 dt = int128(int256(t - ptTs));\\n    if (ptBias < ptSlope * dt) {\\n      return 0;\\n    }\\n    return uint(int256(_positiveInt128(ptBias - ptSlope * dt)));\\n  }\\n\\n  // *************************************************************\\n  //                      CLAIM\\n  // *************************************************************\\n\\n  /// @dev Return available to claim earned amount\\n  function claimable(uint _tokenId) external view returns (uint) {\\n    uint _lastTokenTime = lastTokenTime / WEEK * WEEK;\\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, ve, _lastTokenTime);\\n    return result.toDistribute;\\n  }\\n\\n  /// @dev Claim rewards for given veID\\n  function claim(uint _tokenId) external override returns (uint) {\\n    IVe _ve = ve;\\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n    uint _lastTokenTime = lastTokenTime;\\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n    uint amount = _claim(_tokenId, _ve, _lastTokenTime);\\n    if (amount != 0) {\\n      IERC20(rewardToken).safeTransfer(IERC721(address(_ve)).ownerOf(_tokenId), amount);\\n//      _ve.increaseAmount(rewardToken, _tokenId, amount);\\n      tokenLastBalance -= amount;\\n    }\\n    return amount;\\n  }\\n\\n  /// @dev Claim rewards for given veIDs\\n  function claimMany(uint[] memory _tokenIds) external returns (bool) {\\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n    uint _lastTokenTime = lastTokenTime;\\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n    IVe _votingEscrow = ve;\\n    uint total = 0;\\n\\n    for (uint i = 0; i < _tokenIds.length; i++) {\\n      uint _tokenId = _tokenIds[i];\\n      if (_tokenId == 0) break;\\n      uint amount = _claim(_tokenId, _votingEscrow, _lastTokenTime);\\n      if (amount != 0) {\\n        IERC20(rewardToken).safeTransfer(IERC721(address(_votingEscrow)).ownerOf(_tokenId), amount);\\n//        _votingEscrow.increaseAmount(rewardToken, _tokenId, amount);\\n        total += amount;\\n      }\\n    }\\n    if (total != 0) {\\n      tokenLastBalance -= total;\\n    }\\n\\n    return true;\\n  }\\n\\n  function _claim(uint _tokenId, IVe _ve, uint _lastTokenTime) internal returns (uint) {\\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, _ve, _lastTokenTime);\\n    if (result.success) {\\n      userEpochOf[_tokenId] = result.userEpoch;\\n      timeCursorOf[_tokenId] = result.weekCursor;\\n      emit Claimed(_tokenId, result.toDistribute, result.userEpoch, result.maxUserEpoch);\\n    }\\n    return result.toDistribute;\\n  }\\n\\n  function _calculateClaim(\\n    uint _tokenId,\\n    IVe _ve,\\n    uint _lastTokenTime\\n  ) internal view returns (ClaimCalculationResult memory) {\\n    uint userEpoch;\\n    uint maxUserEpoch = _ve.userPointEpoch(_tokenId);\\n    uint _startTime = startTime;\\n\\n    if (maxUserEpoch == 0) {\\n      return ClaimCalculationResult(0, 0, 0, 0, false);\\n    }\\n\\n    uint weekCursor = timeCursorOf[_tokenId];\\n\\n    if (weekCursor == 0) {\\n      userEpoch = findTimestampUserEpoch(_ve, _tokenId, _startTime, maxUserEpoch);\\n    } else {\\n      userEpoch = userEpochOf[_tokenId];\\n    }\\n\\n    if (userEpoch == 0) userEpoch = 1;\\n\\n    IVe.Point memory userPoint = _ve.userPointHistory(_tokenId, userEpoch);\\n    if (weekCursor == 0) {\\n      weekCursor = (userPoint.ts + WEEK - 1) / WEEK * WEEK;\\n    }\\n    if (weekCursor >= lastTokenTime) {\\n      return ClaimCalculationResult(0, 0, 0, 0, false);\\n    }\\n    if (weekCursor < _startTime) {\\n      weekCursor = _startTime;\\n    }\\n\\n    return calculateToDistribute(\\n      _tokenId,\\n      weekCursor,\\n      _lastTokenTime,\\n      userPoint,\\n      userEpoch,\\n      maxUserEpoch,\\n      _ve\\n    );\\n  }\\n\\n  function calculateToDistribute(\\n    uint _tokenId,\\n    uint weekCursor,\\n    uint _lastTokenTime,\\n    IVe.Point memory userPoint,\\n    uint userEpoch,\\n    uint maxUserEpoch,\\n    IVe _ve\\n  ) public view returns (ClaimCalculationResult memory) {\\n    IVe.Point memory oldUserPoint;\\n    uint toDistribute;\\n    for (uint i = 0; i < 50; i++) {\\n      if (weekCursor >= _lastTokenTime) {\\n        break;\\n      }\\n      if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\\n        userEpoch += 1;\\n        oldUserPoint = userPoint;\\n        if (userEpoch > maxUserEpoch) {\\n          userPoint = IVe.Point(0, 0, 0, 0);\\n        } else {\\n          userPoint = _ve.userPointHistory(_tokenId, userEpoch);\\n        }\\n      } else {\\n        int128 dt = int128(int256(weekCursor - oldUserPoint.ts));\\n        uint balanceOf = uint(int256(_positiveInt128(oldUserPoint.bias - dt * oldUserPoint.slope)));\\n        if (balanceOf == 0 && userEpoch > maxUserEpoch) {\\n          break;\\n        }\\n        toDistribute += balanceOf * tokensPerWeek[weekCursor] / veSupply[weekCursor];\\n        weekCursor += WEEK;\\n      }\\n    }\\n    return ClaimCalculationResult(\\n      toDistribute,\\n      Math.min(maxUserEpoch, userEpoch - 1),\\n      weekCursor,\\n      maxUserEpoch,\\n      true\\n    );\\n  }\\n\\n  function _positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  /// @dev Block timestamp rounded to weeks\\n  function timestamp() external view returns (uint) {\\n    return block.timestamp / WEEK * WEEK;\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_VE_DISTRIBUTOR || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x7afcd3dea25c3c4a8b25430e4709aece54144636973e83e28d45dce5b3462006\",\"license\":\"MIT\"},\"contracts/dependencies/ControllableV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./TetuERC165.sol\\\";\\nimport \\\"./InterfaceIds.sol\\\";\\nimport \\\"./SlotsLib.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"3.0.1\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  /// @dev Prevent implementation init\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\\n    require(IController(controller_).governance() != address(0), \\\"Zero governance\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) public override view returns (bool) {\\n    return _value == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) public override view returns (bool) {\\n    return IController(controller()).governance() == _value;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view returns (uint){\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view returns (address){\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n  /// @dev Gets a slot as bytes32\\n  function getSlot(uint slot) external view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe4cb568bfe305f68f3db6a20a5bb84e72266aecc349a97913503133c7f5b435a\",\"license\":\"MIT\"},\"contracts/dependencies/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n    /// @notice Version of the contract\\n    /// @dev Should be incremented when contract changed\\n    string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n    /// default notation:\\n    /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n    /// As type({Interface}).interfaceId can be changed,\\n    /// when some functions changed at the interface,\\n    /// so used hardcoded interface identifiers\\n\\n    bytes4 public constant I_VE = bytes4(keccak256(\\\"IVe\\\"));\\n    bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n    bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n    bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n    bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n}\\n\",\"keccak256\":\"0xd7f6aa4d6e73708fee00f96f0d4b3276ca1b164d3c12ede567c0736443115df2\",\"license\":\"MIT\"},\"contracts/dependencies/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  // ************* ARRAY SETTERS *******************\\n\\n  /// @dev Sets a slot array at index with address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, address value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot array at index with uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets an array length\\n  function setLength(bytes32 slot, uint length) internal {\\n    assembly {\\n      sstore(slot, length)\\n    }\\n  }\\n\\n  /// @dev Pushes an address to the array\\n  function push(bytes32 slot, address value) internal {\\n    uint length = arrayLength(slot);\\n    setAt(slot, length, value);\\n    setLength(slot, length + 1);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x87400ece5c41c4e0106a48d66a063e8fe335dfb59ad108d7ccd71e0deb6889e6\",\"license\":\"MIT\"},\"contracts/dependencies/TetuERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf972813f3a255c8ab5afd2184a3cc5c68688de7836af374c74218b454233d325\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0x849ffde751c702df794cb2533a6401ae8b29c559fe23f9de76a64a60b66ab878\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IController {\\n\\n    // --- DEPENDENCY ADDRESSES\\n    function governance() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x15d57764f807b9fa17edbd6f0a4c8d5a1f27c5eef80ed8a2b04e031f4abb1428\",\"license\":\"MIT\"},\"contracts/interfaces/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n\\n//    function increaseF_WSTETH(uint _WSTETHFee) external;\\n\\n//    function increaseF_SIM(uint _SIMFee) external;\\n\\n    function lockedAmounts(uint veId, address stakingToken) external view returns (uint);\\n\\n    function lockedDerivedAmount(uint veId) external view returns (uint);\\n\\n    function lockedEnd(uint veId) external view returns (uint);\\n\\n    function tokens(uint idx) external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(address _token, uint _value, uint _lockDuration, address _to) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function increaseAmount(address _token, uint _tokenId, uint _value) external;\\n\\n    function totalSupplyAt(uint _block) external view returns (uint);\\n}\",\"keccak256\":\"0x925d70778879890862a50bff1f150b79ad160ab7fd5549addf748b978b5628d8\",\"license\":\"MIT\"},\"contracts/interfaces/IVeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IVeDistributor {\\n\\n  function rewardToken() external view returns (address);\\n\\n  function checkpoint() external;\\n\\n  function checkpointTotalSupply() external;\\n\\n  function claim(uint _tokenId) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0xc2b9b9f77d6419a78de1621eb1eb0bad42400ce04ce2de2e5fa842c976748472\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6127f180620000f36000396000f3fe608060405234801561001057600080fd5b50600436106101f75760003560e01c80638f80ed0311610120578063c2c4c5c1116100b8578063dee1f0e41161007c578063dee1f0e4146104d3578063e2eefd25146104e6578063e32890c4146104f9578063f77c47911461051f578063f7c618c11461052757600080fd5b8063c2c4c5c11461044d578063c9e14ed214610455578063cc68792114610468578063d1d58b251461048c578063d471e04e1461049f57600080fd5b80638f80ed031461035a578063925489a8146103b1578063936725ec146103c4578063939ea66b146103f557806398bdfdee146104045780639abd185c146104175780639d0bcca01461042a578063b429afeb14610432578063b80777ea1461044557600080fd5b80634593144c116101935780634593144c146102bf5780634607bf60146102c75780634fac6ccd146102ed57806378e97925146103005780637cc963801461030f5780637eba7ba6146103175780638736659b14610329578063899519be146103385780638ec8468a1461034b57600080fd5b806301ffc9a7146101fc5780630a441f7b146102245780630f6592ef1461023b578063184b95591461024e5780631f85071614610263578063325a19f114610289578063326a940714610291578063379607f5146102995780633935c802146102ac575b600080fd5b61020f61020a36600461218b565b61053a565b60405190151581526020015b60405180910390f35b61022d60025481565b60405190815260200161021b565b61022d6102493660046121b5565b610565565b61026161025c3660046121e3565b610588565b005b60005461027c906201000090046001600160a01b031681565b60405161021b919061222e565b61022d610750565b610261610785565b61022d6102a73660046121b5565b61078f565b61022d6102ba366004612252565b61089a565b61022d61098e565b61022d6102d53660046121b5565b66071afd498d00076020526000908152604090205481565b6102616102fb36600461228d565b6109be565b61022d66071afd498d00065481565b61022d610acc565b61022d6103253660046121b5565b5490565b61022d66071afd498d00035481565b61022d6103463660046121b5565b610aea565b61022d66071afd498d00045481565b61036d610368366004612329565b610b00565b60405161021b9190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b61020f6103bf3660046123d6565b610d40565b6103e860405180604001604052806005815260200164332e302e3160d81b81525081565b60405161021b91906124a0565b61022d66071afd498d00055481565b61022d6104123660046124d3565b610e61565b61022d610425366004612505565b610eb6565b61027c610ff1565b61020f61044036600461228d565b611021565b61022d611046565b610261611060565b61022d610463366004612527565b6110a6565b6103e8604051806040016040528060058152602001640312e302e360dc1b81525081565b61022d61049a3660046121b5565b61110b565b6104c67fb7b79fa96c6b05833230c71a365e58c01f37ecd85517ea152b4a3ffdb77bebbe81565b60405161021b9190612571565b61020f6104e136600461228d565b61115d565b61022d6104f4366004612586565b6111e2565b61022d6105073660046121b5565b66071afd498d00086020526000908152604090205481565b61027c611337565b60015461027c906001600160a01b031681565b60006001600160e01b0319821663090ff8e960e01b148061055f575061055f82611367565b92915050565b66038d7ea4c680038166038d7ea4c68000811061058157600080fd5b0154905081565b600054610100900460ff16158080156105a85750600054600160ff909116105b806105c25750303b1580156105c2575060005460ff166001145b61062a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561064d576000805461ff0019166101001790555b6106568461138c565b61065f826115f5565b610689837f1c4e305e0bae3dfecd9d4d5b42b853e8d0efdb7ff49ff5b3e7e192fd59c5ad05611636565b600062093a8061069981426125c8565b6106a391906125ea565b66071afd498d000681905566071afd498d000581905566071afd498d00035550600180546001600160a01b0319166001600160a01b03848116919091179091556000805462010000600160b01b0319166201000092861692909202919091179055801561074a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600061078061032560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612601565b905090565b61078d611690565b565b6000805466071afd498d000354620100009091046001600160a01b03169042106107bb576107bb611690565b66071afd498d00055462093a806107d281836125c8565b6107dc91906125ea565b905060006107eb858484611815565b90508015610892576040516331a9108f60e11b815260048101869052610874906001600160a01b03851690636352211e906024015b602060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190612614565b6001546001600160a01b031690836118b7565b8066071afd498d0004600082825461088c9190612601565b90915550505b949350505050565b60008082815b6080811015610982578183101561098257600060026108bf8486612631565b6108ca906002612631565b6108d491906125c8565b6040516322565a1560e11b8152600481018a9052602481018290529091506000906001600160a01b038b16906344acb42a90604401608060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190612644565b90508781604001511161095f5781945061096d565b61096a600183612601565b93505b5050808061097a9061269b565b9150506108a0565b50909695505050505050565b600061078061032560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612601565b333014610a0d5760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e00000000006044820152606401610621565b6000610a2b610325600160008051602061279c833981519152612601565b610a36906001612631565b9050610a5881610a55600160008051602061279c833981519152612601565b55565b610a8782610a5560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612601565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6000610780610325600160008051602061279c833981519152612601565b60038166038d7ea4c68000811061058157600080fd5b610b0861215a565b604080516080810182526000808252602082018190529181018290526060810182905290805b6032811015610cf157888a1015610cf15787604001518a10158015610b535750858711155b15610c1957610b63600188612631565b965087925085871115610ba25760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509750610cdf565b6040516322565a1560e11b8152600481018c9052602481018890526001600160a01b038616906344acb42a90604401608060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612644565b9750610cdf565b600083604001518b610c2b9190612601565b90506000610c53856020015183610c4291906126b4565b8651610c4e91906126db565b61190e565b600f0b905080158015610c6557508789115b15610c71575050610cf1565b66038d7ea4c680038c66038d7ea4c680008110610c9057610c90612708565b015460038d66038d7ea4c680008110610cab57610cab612708565b0154610cb790836125ea565b610cc191906125c8565b610ccb9085612631565b9350610cda62093a808d612631565b9b5050505b80610ce98161269b565b915050610b2e565b506040518060a00160405280828152602001610d198760018a610d149190612601565b611928565b81526020018a81526020018681526020016001151581525092505050979650505050505050565b600066071afd498d0003544210610d5957610d59611690565b66071afd498d00055462093a80610d7081836125c8565b610d7a91906125ea565b60008054919250620100009091046001600160a01b031690805b8551811015610e31576000868281518110610db157610db1612708565b6020026020010151905080600003610dc95750610e31565b6000610dd6828688611815565b90508015610e1c576040516331a9108f60e11b815260048101839052610e0f906001600160a01b03871690636352211e90602401610820565b610e198185612631565b93505b50508080610e299061269b565b915050610d94565b508015610e56578066071afd498d00046000828254610e509190612601565b90915550505b506001949350505050565b60008284111580610e795750610e778385612601565b155b80610e82575081155b15610e8e575083610892565b81610e998486612601565b610ea390876125ea565b610ead91906125c8565b95945050505050565b6000805460405163e58f594760e01b815260048101859052620100009091046001600160a01b0316908290829063e58f594790602401602060405180830381865afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d919061271e565b90506000610f3d8387878561089a565b6040516322565a1560e11b815260048101889052602481018290529091506000906001600160a01b038516906344acb42a90604401608060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190612644565b9050610fe3816040015187610fc89190612601565b8260200151610fd791906126b4565b8251610c4e91906126db565b600f0b979650505050505050565b600061078061032560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612601565b600061102b611337565b6001600160a01b0316826001600160a01b0316149050919050565b600062093a8061105681426125c8565b61078091906125ea565b6002546110708162093a80612631565b42106110a35761108362093a80426125c8565b6110909062093a806125ea565b60025561109b61193e565b6110a3611690565b50565b6000838510156110b857506000610892565b60006110c48587612601565b90506110d081846126b4565b600f0b84600f0b12156110e7576000915050610892565b6110fe6110f482856126b4565b610c4e90866126db565b600f0b9695505050505050565b60008062093a808066071afd498d00055461112691906125c8565b61113091906125ea565b9050600061115484600060029054906101000a90046001600160a01b031684611b0c565b51949350505050565b6000816001600160a01b0316611171611337565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612614565b6001600160a01b03161492915050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d919061271e565b905060005b608081101561132d578183101561132d57600060026112718486612631565b61127c906002612631565b61128691906125c8565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03891690638ad4c44790602401608060405180830381865afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190612644565b90508681604001511161130a57819450611318565b611315600183612601565b93505b505080806113259061269b565b915050611252565b5090949350505050565b600061078061032560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612601565b60006001600160e01b0319821663c19fa56160e01b148061055f575061055f82611d4d565b600054610100900460ff166113f75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610621565b6001600160a01b03811661143f5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b6044820152606401610621565b611469817f4c2403fdcb3cff9b705d96bf0705858e3390412670a62c8bcba611ca7e20ab86611636565b60006001600160a01b0316816001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190612614565b6001600160a01b03160361151e5760405162461bcd60e51b815260206004820152600f60248201526e5a65726f20676f7665726e616e636560881b6044820152606401610621565b61154d81610a5560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612601565b61157c42610a5560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612601565b6115ab43610a5560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612601565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b6115fe81611d82565b6110a35760405162461bcd60e51b815260206004820152600960248201526804e6f742045524332360bc1b6044820152606401610621565b6116408282611ea8565b61168c5760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f727465640000000000006044820152606401610621565b5050565b6000805466071afd498d000354620100009091046001600160a01b03169162093a806116bc81426125c8565b6116c691906125ea565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b5050505060005b60148110156118075781831161180757600061173a85856111e2565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03871690638ad4c44790602401608060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190612644565b90506117c3858260400151836000015184602001516110a6565b66038d7ea4c680038666038d7ea4c6800081106117e2576117e2612708565b015550506117f362093a8084612631565b9250806117ff8161269b565b91505061171e565b505066071afd498d00035550565b600080611823858585611b0c565b90508060800151156118ac5760208181018051600088815266071afd498d000884526040808220929092558185015166071afd498d0007855290829020558351915160608086015183518b815295860194909452918401528201527fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a15b5190505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611909908490611f62565b505050565b60008082600f0b12611920578161055f565b600092915050565b600081831061193757816118b0565b5090919050565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a082319061196f90309060040161222e565b602060405180830381865afa15801561198c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b0919061271e565b9050600066071afd498d000454826119c89190612601565b66071afd498d000483905566071afd498d00055490915060006119eb8242612601565b4266071afd498d0005559050600062093a80611a0781856125c8565b611a1191906125ea565b90506000805b6014811015611aca57611a2d62093a8084612631565b915081421015611a7757611a4386428787610e61565b60038466038d7ea4c680008110611a5c57611a5c612708565b016000828254611a6c9190612631565b90915550611aca9050565b611a8386838787610e61565b60038466038d7ea4c680008110611a9c57611a9c612708565b016000828254611aac9190612631565b90915550508194508192508080611ac29061269b565b915050611a17565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b611b1461215a565b60405163e58f594760e01b81526004810185905260009081906001600160a01b0386169063e58f594790602401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061271e565b66071afd498d0006549091506000829003611bcf576040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525093505050506118b0565b600087815266071afd498d0007602052604081205490819003611bff57611bf88789848661089a565b9350611c17565b600088815266071afd498d0008602052604090205493505b83600003611c2457600193505b6040516322565a1560e11b815260048101899052602481018590526000906001600160a01b038916906344acb42a90604401608060405180830381865afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190612644565b905081600003611cdc5762093a8080600162093a808460400151611cbb9190612631565b611cc59190612601565b611ccf91906125c8565b611cd991906125ea565b91505b66071afd498d0005548210611d25576040518060a001604052806000815260200160008152602001600081526020016000815260200160001515815250955050505050506118b0565b82821015611d31578291505b611d408983898489898e610b00565b9998505050505050505050565b60006001600160e01b0319821663b7b79fa960e01b148061055f57506301ffc9a760e01b6001600160e01b031983161461055f565b60006001600160a01b038216611daa5760405162461bcd60e51b815260040161062190612737565b813b6000819003611dbe5750600092915050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e1a575060408051601f3d908101601f19168201909252611e179181019061271e565b60015b15611e255760019150505b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611e5490309060040161222e565b602060405180830381865afa925050508015611e8d575060408051601f3d908101601f19168201909252611e8a9181019061271e565b60015b15611e985760019150505b818015610ead5750949350505050565b60006001600160a01b038316611ed05760405162461bcd60e51b815260040161062190612737565b823b6000819003611ee557600091505061055f565b6040516301ffc9a760e01b81526001600160a01b038516906301ffc9a790611f11908690600401612571565b602060405180830381865afa925050508015611f4a575060408051601f3d908101601f19168201909252611f479181019061275d565b60015b15611f5857915061055f9050565b5060009392505050565b6000611fb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120379092919063ffffffff16565b9050805160001480611fd8575080806020019051810190611fd8919061275d565b6119095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610621565b6060610892848460008585600080866001600160a01b0316858760405161205e919061277f565b60006040518083038185875af1925050503d806000811461209b576040519150601f19603f3d011682016040523d82523d6000602084013e6120a0565b606091505b50915091506120b1878383876120bc565b979650505050505050565b6060831561212b578251600003612124576001600160a01b0385163b6121245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610621565b5081610892565b61089283838151156121405781518083602001fd5b8060405162461bcd60e51b815260040161062191906124a0565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b60006020828403121561219d57600080fd5b81356001600160e01b0319811681146118b057600080fd5b6000602082840312156121c757600080fd5b5035919050565b6001600160a01b03811681146110a357600080fd5b6000806000606084860312156121f857600080fd5b8335612203816121ce565b92506020840135612213816121ce565b91506040840135612223816121ce565b809150509250925092565b6001600160a01b0391909116815260200190565b803561224d816121ce565b919050565b6000806000806080858703121561226857600080fd5b8435612273816121ce565b966020860135965060408601359560600135945092505050565b60006020828403121561229f57600080fd5b81356118b0816121ce565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156122e3576122e36122aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612312576123126122aa565b604052919050565b80600f0b81146110a357600080fd5b600080600080600080600087890361014081121561234657600080fd5b8835975060208901359650604089013595506080605f198201121561236a57600080fd5b506123736122c0565b60608901356123818161231a565b815260808901356123918161231a565b602082015260a0890135604082015260c08901356060820152935060e0880135925061010088013591506123c86101208901612242565b905092959891949750929550565b600060208083850312156123e957600080fd5b823567ffffffffffffffff8082111561240157600080fd5b818501915085601f83011261241557600080fd5b813581811115612427576124276122aa565b8060051b91506124388483016122e9565b818152918301840191848101908884111561245257600080fd5b938501935b8385101561247057843582529385019390850190612457565b98975050505050505050565b60005b8381101561249757818101518382015260200161247f565b50506000910152565b60208152600082518060208401526124bf81604085016020870161247c565b601f01601f19169190910160400192915050565b600080600080608085870312156124e957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561251857600080fd5b50508035926020909101359150565b6000806000806080858703121561253d57600080fd5b843593506020850135925060408501356125568161231a565b915060608501356125668161231a565b939692955090935050565b6001600160e01b031991909116815260200190565b6000806040838503121561259957600080fd5b82356125a4816121ce565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000826125e557634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761055f5761055f6125b2565b8181038181111561055f5761055f6125b2565b60006020828403121561262657600080fd5b81516118b0816121ce565b8082018082111561055f5761055f6125b2565b60006080828403121561265657600080fd5b61265e6122c0565b82516126698161231a565b815260208301516126798161231a565b6020820152604083810151908201526060928301519281019290925250919050565b6000600182016126ad576126ad6125b2565b5060010190565b600082600f0b82600f0b0280600f0b91508082146126d4576126d46125b2565b5092915050565b600f82810b9082900b0360016001607f1b0319811260016001607f1b038213171561055f5761055f6125b2565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561273057600080fd5b5051919050565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b60006020828403121561276f57600080fd5b815180151581146118b057600080fd5b6000825161279181846020870161247c565b919091019291505056fe22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bda264697066735822122071d2657e8fd64a371ab4ca7511e1cf9997c87a33a6d354e5bd1a2af1aea3bf6e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f75760003560e01c80638f80ed0311610120578063c2c4c5c1116100b8578063dee1f0e41161007c578063dee1f0e4146104d3578063e2eefd25146104e6578063e32890c4146104f9578063f77c47911461051f578063f7c618c11461052757600080fd5b8063c2c4c5c11461044d578063c9e14ed214610455578063cc68792114610468578063d1d58b251461048c578063d471e04e1461049f57600080fd5b80638f80ed031461035a578063925489a8146103b1578063936725ec146103c4578063939ea66b146103f557806398bdfdee146104045780639abd185c146104175780639d0bcca01461042a578063b429afeb14610432578063b80777ea1461044557600080fd5b80634593144c116101935780634593144c146102bf5780634607bf60146102c75780634fac6ccd146102ed57806378e97925146103005780637cc963801461030f5780637eba7ba6146103175780638736659b14610329578063899519be146103385780638ec8468a1461034b57600080fd5b806301ffc9a7146101fc5780630a441f7b146102245780630f6592ef1461023b578063184b95591461024e5780631f85071614610263578063325a19f114610289578063326a940714610291578063379607f5146102995780633935c802146102ac575b600080fd5b61020f61020a36600461218b565b61053a565b60405190151581526020015b60405180910390f35b61022d60025481565b60405190815260200161021b565b61022d6102493660046121b5565b610565565b61026161025c3660046121e3565b610588565b005b60005461027c906201000090046001600160a01b031681565b60405161021b919061222e565b61022d610750565b610261610785565b61022d6102a73660046121b5565b61078f565b61022d6102ba366004612252565b61089a565b61022d61098e565b61022d6102d53660046121b5565b66071afd498d00076020526000908152604090205481565b6102616102fb36600461228d565b6109be565b61022d66071afd498d00065481565b61022d610acc565b61022d6103253660046121b5565b5490565b61022d66071afd498d00035481565b61022d6103463660046121b5565b610aea565b61022d66071afd498d00045481565b61036d610368366004612329565b610b00565b60405161021b9190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b61020f6103bf3660046123d6565b610d40565b6103e860405180604001604052806005815260200164332e302e3160d81b81525081565b60405161021b91906124a0565b61022d66071afd498d00055481565b61022d6104123660046124d3565b610e61565b61022d610425366004612505565b610eb6565b61027c610ff1565b61020f61044036600461228d565b611021565b61022d611046565b610261611060565b61022d610463366004612527565b6110a6565b6103e8604051806040016040528060058152602001640312e302e360dc1b81525081565b61022d61049a3660046121b5565b61110b565b6104c67fb7b79fa96c6b05833230c71a365e58c01f37ecd85517ea152b4a3ffdb77bebbe81565b60405161021b9190612571565b61020f6104e136600461228d565b61115d565b61022d6104f4366004612586565b6111e2565b61022d6105073660046121b5565b66071afd498d00086020526000908152604090205481565b61027c611337565b60015461027c906001600160a01b031681565b60006001600160e01b0319821663090ff8e960e01b148061055f575061055f82611367565b92915050565b66038d7ea4c680038166038d7ea4c68000811061058157600080fd5b0154905081565b600054610100900460ff16158080156105a85750600054600160ff909116105b806105c25750303b1580156105c2575060005460ff166001145b61062a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561064d576000805461ff0019166101001790555b6106568461138c565b61065f826115f5565b610689837f1c4e305e0bae3dfecd9d4d5b42b853e8d0efdb7ff49ff5b3e7e192fd59c5ad05611636565b600062093a8061069981426125c8565b6106a391906125ea565b66071afd498d000681905566071afd498d000581905566071afd498d00035550600180546001600160a01b0319166001600160a01b03848116919091179091556000805462010000600160b01b0319166201000092861692909202919091179055801561074a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600061078061032560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612601565b905090565b61078d611690565b565b6000805466071afd498d000354620100009091046001600160a01b03169042106107bb576107bb611690565b66071afd498d00055462093a806107d281836125c8565b6107dc91906125ea565b905060006107eb858484611815565b90508015610892576040516331a9108f60e11b815260048101869052610874906001600160a01b03851690636352211e906024015b602060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190612614565b6001546001600160a01b031690836118b7565b8066071afd498d0004600082825461088c9190612601565b90915550505b949350505050565b60008082815b6080811015610982578183101561098257600060026108bf8486612631565b6108ca906002612631565b6108d491906125c8565b6040516322565a1560e11b8152600481018a9052602481018290529091506000906001600160a01b038b16906344acb42a90604401608060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190612644565b90508781604001511161095f5781945061096d565b61096a600183612601565b93505b5050808061097a9061269b565b9150506108a0565b50909695505050505050565b600061078061032560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612601565b333014610a0d5760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e00000000006044820152606401610621565b6000610a2b610325600160008051602061279c833981519152612601565b610a36906001612631565b9050610a5881610a55600160008051602061279c833981519152612601565b55565b610a8782610a5560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612601565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6000610780610325600160008051602061279c833981519152612601565b60038166038d7ea4c68000811061058157600080fd5b610b0861215a565b604080516080810182526000808252602082018190529181018290526060810182905290805b6032811015610cf157888a1015610cf15787604001518a10158015610b535750858711155b15610c1957610b63600188612631565b965087925085871115610ba25760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509750610cdf565b6040516322565a1560e11b8152600481018c9052602481018890526001600160a01b038616906344acb42a90604401608060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612644565b9750610cdf565b600083604001518b610c2b9190612601565b90506000610c53856020015183610c4291906126b4565b8651610c4e91906126db565b61190e565b600f0b905080158015610c6557508789115b15610c71575050610cf1565b66038d7ea4c680038c66038d7ea4c680008110610c9057610c90612708565b015460038d66038d7ea4c680008110610cab57610cab612708565b0154610cb790836125ea565b610cc191906125c8565b610ccb9085612631565b9350610cda62093a808d612631565b9b5050505b80610ce98161269b565b915050610b2e565b506040518060a00160405280828152602001610d198760018a610d149190612601565b611928565b81526020018a81526020018681526020016001151581525092505050979650505050505050565b600066071afd498d0003544210610d5957610d59611690565b66071afd498d00055462093a80610d7081836125c8565b610d7a91906125ea565b60008054919250620100009091046001600160a01b031690805b8551811015610e31576000868281518110610db157610db1612708565b6020026020010151905080600003610dc95750610e31565b6000610dd6828688611815565b90508015610e1c576040516331a9108f60e11b815260048101839052610e0f906001600160a01b03871690636352211e90602401610820565b610e198185612631565b93505b50508080610e299061269b565b915050610d94565b508015610e56578066071afd498d00046000828254610e509190612601565b90915550505b506001949350505050565b60008284111580610e795750610e778385612601565b155b80610e82575081155b15610e8e575083610892565b81610e998486612601565b610ea390876125ea565b610ead91906125c8565b95945050505050565b6000805460405163e58f594760e01b815260048101859052620100009091046001600160a01b0316908290829063e58f594790602401602060405180830381865afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d919061271e565b90506000610f3d8387878561089a565b6040516322565a1560e11b815260048101889052602481018290529091506000906001600160a01b038516906344acb42a90604401608060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190612644565b9050610fe3816040015187610fc89190612601565b8260200151610fd791906126b4565b8251610c4e91906126db565b600f0b979650505050505050565b600061078061032560017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4612601565b600061102b611337565b6001600160a01b0316826001600160a01b0316149050919050565b600062093a8061105681426125c8565b61078091906125ea565b6002546110708162093a80612631565b42106110a35761108362093a80426125c8565b6110909062093a806125ea565b60025561109b61193e565b6110a3611690565b50565b6000838510156110b857506000610892565b60006110c48587612601565b90506110d081846126b4565b600f0b84600f0b12156110e7576000915050610892565b6110fe6110f482856126b4565b610c4e90866126db565b600f0b9695505050505050565b60008062093a808066071afd498d00055461112691906125c8565b61113091906125ea565b9050600061115484600060029054906101000a90046001600160a01b031684611b0c565b51949350505050565b6000816001600160a01b0316611171611337565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612614565b6001600160a01b03161492915050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d919061271e565b905060005b608081101561132d578183101561132d57600060026112718486612631565b61127c906002612631565b61128691906125c8565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03891690638ad4c44790602401608060405180830381865afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190612644565b90508681604001511161130a57819450611318565b611315600183612601565b93505b505080806113259061269b565b915050611252565b5090949350505050565b600061078061032560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612601565b60006001600160e01b0319821663c19fa56160e01b148061055f575061055f82611d4d565b600054610100900460ff166113f75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610621565b6001600160a01b03811661143f5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b6044820152606401610621565b611469817f4c2403fdcb3cff9b705d96bf0705858e3390412670a62c8bcba611ca7e20ab86611636565b60006001600160a01b0316816001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190612614565b6001600160a01b03160361151e5760405162461bcd60e51b815260206004820152600f60248201526e5a65726f20676f7665726e616e636560881b6044820152606401610621565b61154d81610a5560017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618612601565b61157c42610a5560017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b612601565b6115ab43610a5560017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1612601565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b6115fe81611d82565b6110a35760405162461bcd60e51b815260206004820152600960248201526804e6f742045524332360bc1b6044820152606401610621565b6116408282611ea8565b61168c5760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f727465640000000000006044820152606401610621565b5050565b6000805466071afd498d000354620100009091046001600160a01b03169162093a806116bc81426125c8565b6116c691906125ea565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b5050505060005b60148110156118075781831161180757600061173a85856111e2565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03871690638ad4c44790602401608060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190612644565b90506117c3858260400151836000015184602001516110a6565b66038d7ea4c680038666038d7ea4c6800081106117e2576117e2612708565b015550506117f362093a8084612631565b9250806117ff8161269b565b91505061171e565b505066071afd498d00035550565b600080611823858585611b0c565b90508060800151156118ac5760208181018051600088815266071afd498d000884526040808220929092558185015166071afd498d0007855290829020558351915160608086015183518b815295860194909452918401528201527fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a15b5190505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611909908490611f62565b505050565b60008082600f0b12611920578161055f565b600092915050565b600081831061193757816118b0565b5090919050565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a082319061196f90309060040161222e565b602060405180830381865afa15801561198c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b0919061271e565b9050600066071afd498d000454826119c89190612601565b66071afd498d000483905566071afd498d00055490915060006119eb8242612601565b4266071afd498d0005559050600062093a80611a0781856125c8565b611a1191906125ea565b90506000805b6014811015611aca57611a2d62093a8084612631565b915081421015611a7757611a4386428787610e61565b60038466038d7ea4c680008110611a5c57611a5c612708565b016000828254611a6c9190612631565b90915550611aca9050565b611a8386838787610e61565b60038466038d7ea4c680008110611a9c57611a9c612708565b016000828254611aac9190612631565b90915550508194508192508080611ac29061269b565b915050611a17565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b611b1461215a565b60405163e58f594760e01b81526004810185905260009081906001600160a01b0386169063e58f594790602401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061271e565b66071afd498d0006549091506000829003611bcf576040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525093505050506118b0565b600087815266071afd498d0007602052604081205490819003611bff57611bf88789848661089a565b9350611c17565b600088815266071afd498d0008602052604090205493505b83600003611c2457600193505b6040516322565a1560e11b815260048101899052602481018590526000906001600160a01b038916906344acb42a90604401608060405180830381865afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190612644565b905081600003611cdc5762093a8080600162093a808460400151611cbb9190612631565b611cc59190612601565b611ccf91906125c8565b611cd991906125ea565b91505b66071afd498d0005548210611d25576040518060a001604052806000815260200160008152602001600081526020016000815260200160001515815250955050505050506118b0565b82821015611d31578291505b611d408983898489898e610b00565b9998505050505050505050565b60006001600160e01b0319821663b7b79fa960e01b148061055f57506301ffc9a760e01b6001600160e01b031983161461055f565b60006001600160a01b038216611daa5760405162461bcd60e51b815260040161062190612737565b813b6000819003611dbe5750600092915050565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e1a575060408051601f3d908101601f19168201909252611e179181019061271e565b60015b15611e255760019150505b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611e5490309060040161222e565b602060405180830381865afa925050508015611e8d575060408051601f3d908101601f19168201909252611e8a9181019061271e565b60015b15611e985760019150505b818015610ead5750949350505050565b60006001600160a01b038316611ed05760405162461bcd60e51b815260040161062190612737565b823b6000819003611ee557600091505061055f565b6040516301ffc9a760e01b81526001600160a01b038516906301ffc9a790611f11908690600401612571565b602060405180830381865afa925050508015611f4a575060408051601f3d908101601f19168201909252611f479181019061275d565b60015b15611f5857915061055f9050565b5060009392505050565b6000611fb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120379092919063ffffffff16565b9050805160001480611fd8575080806020019051810190611fd8919061275d565b6119095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610621565b6060610892848460008585600080866001600160a01b0316858760405161205e919061277f565b60006040518083038185875af1925050503d806000811461209b576040519150601f19603f3d011682016040523d82523d6000602084013e6120a0565b606091505b50915091506120b1878383876120bc565b979650505050505050565b6060831561212b578251600003612124576001600160a01b0385163b6121245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610621565b5081610892565b61089283838151156121405781518083602001fd5b8060405162461bcd60e51b815260040161062191906124a0565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b60006020828403121561219d57600080fd5b81356001600160e01b0319811681146118b057600080fd5b6000602082840312156121c757600080fd5b5035919050565b6001600160a01b03811681146110a357600080fd5b6000806000606084860312156121f857600080fd5b8335612203816121ce565b92506020840135612213816121ce565b91506040840135612223816121ce565b809150509250925092565b6001600160a01b0391909116815260200190565b803561224d816121ce565b919050565b6000806000806080858703121561226857600080fd5b8435612273816121ce565b966020860135965060408601359560600135945092505050565b60006020828403121561229f57600080fd5b81356118b0816121ce565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156122e3576122e36122aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612312576123126122aa565b604052919050565b80600f0b81146110a357600080fd5b600080600080600080600087890361014081121561234657600080fd5b8835975060208901359650604089013595506080605f198201121561236a57600080fd5b506123736122c0565b60608901356123818161231a565b815260808901356123918161231a565b602082015260a0890135604082015260c08901356060820152935060e0880135925061010088013591506123c86101208901612242565b905092959891949750929550565b600060208083850312156123e957600080fd5b823567ffffffffffffffff8082111561240157600080fd5b818501915085601f83011261241557600080fd5b813581811115612427576124276122aa565b8060051b91506124388483016122e9565b818152918301840191848101908884111561245257600080fd5b938501935b8385101561247057843582529385019390850190612457565b98975050505050505050565b60005b8381101561249757818101518382015260200161247f565b50506000910152565b60208152600082518060208401526124bf81604085016020870161247c565b601f01601f19169190910160400192915050565b600080600080608085870312156124e957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561251857600080fd5b50508035926020909101359150565b6000806000806080858703121561253d57600080fd5b843593506020850135925060408501356125568161231a565b915060608501356125668161231a565b939692955090935050565b6001600160e01b031991909116815260200190565b6000806040838503121561259957600080fd5b82356125a4816121ce565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000826125e557634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761055f5761055f6125b2565b8181038181111561055f5761055f6125b2565b60006020828403121561262657600080fd5b81516118b0816121ce565b8082018082111561055f5761055f6125b2565b60006080828403121561265657600080fd5b61265e6122c0565b82516126698161231a565b815260208301516126798161231a565b6020820152604083810151908201526060928301519281019290925250919050565b6000600182016126ad576126ad6125b2565b5060010190565b600082600f0b82600f0b0280600f0b91508082146126d4576126d46125b2565b5092915050565b600f82810b9082900b0360016001607f1b0319811260016001607f1b038213171561055f5761055f6125b2565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561273057600080fd5b5051919050565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b60006020828403121561276f57600080fd5b815180151581146118b057600080fd5b6000825161279181846020870161247c565b919091019291505056fe22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bda264697066735822122071d2657e8fd64a371ab4ca7511e1cf9997c87a33a6d354e5bd1a2af1aea3bf6e64736f6c63430008130033",
  "devdoc": {
    "author": "belbix",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "adjustToDistribute(uint256,uint256,uint256,uint256)": {
        "details": "Adjust value based on time since last update"
      },
      "adjustVeSupply(uint256,uint256,int128,int128)": {
        "details": "Calculate ve supply based on bias and slop for the given timestamp"
      },
      "checkpointTotalSupply()": {
        "details": "Call ve checkpoint and write veSupply at the current timeCursor"
      },
      "claim(uint256)": {
        "details": "Claim rewards for given veID"
      },
      "claimMany(uint256[])": {
        "details": "Claim rewards for given veIDs"
      },
      "claimable(uint256)": {
        "details": "Return available to claim earned amount"
      },
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "findTimestampEpoch(address,uint256)": {
        "details": "Search in the loop given timestamp through ve points history.      Return minimal possible epoch."
      },
      "findTimestampUserEpoch(address,uint256,uint256,uint256)": {
        "details": "Search in the loop given timestamp through ve user points history.      Return minimal possible epoch."
      },
      "getSlot(uint256)": {
        "details": "Gets a slot as bytes32"
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "init(address,address,address)": {
        "details": "Proxy initialization. Call it after contract deploy."
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "revision()": {
        "details": "Contract upgrade counter"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "timestamp()": {
        "details": "Block timestamp rounded to weeks"
      },
      "veForAt(uint256,uint256)": {
        "details": "Return ve power at given timestamp"
      }
    },
    "stateVariables": {
      "VE_DIST_VERSION": {
        "details": "Version of this contract. Adjust manually on each code modification."
      },
      "activePeriod": {
        "details": "Cursor for the current epoch"
      },
      "lastTokenTime": {
        "details": "Last checkpoint time"
      },
      "rewardToken": {
        "details": "Token for ve rewards"
      },
      "startTime": {
        "details": "Timestamp when this contract was inited"
      },
      "timeCursor": {
        "details": "Ve supply checkpoint time cursor"
      },
      "timeCursorOf": {
        "details": "veID => week cursor stored on the claim action"
      },
      "tokenLastBalance": {
        "details": "Token balance updated on checkpoint/claim"
      },
      "tokensPerWeek": {
        "details": "Tokens per week stored on checkpoint call. Predefined array size = max weeks size"
      },
      "userEpochOf": {
        "details": "veID => epoch stored on the claim action"
      },
      "ve": {
        "details": "Voting escrow token address"
      },
      "veSupply": {
        "details": "Ve supply checkpoints. Predefined array size = max weeks size"
      }
    },
    "title": "Contract for distributing rewards to ve holders.        Rewards will be staked to the veNFT without extending lock period.        Based on Solidly contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24373,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "ve",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IVe)29471"
      },
      {
        "astId": 24377,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24380,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "activePeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 24385,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "tokensPerWeek",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 24390,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "veSupply",
        "offset": 0,
        "slot": "1000000000000003",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 24393,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "timeCursor",
        "offset": 0,
        "slot": "2000000000000003",
        "type": "t_uint256"
      },
      {
        "astId": 24396,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "tokenLastBalance",
        "offset": 0,
        "slot": "2000000000000004",
        "type": "t_uint256"
      },
      {
        "astId": 24399,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "lastTokenTime",
        "offset": 0,
        "slot": "2000000000000005",
        "type": "t_uint256"
      },
      {
        "astId": 24402,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "startTime",
        "offset": 0,
        "slot": "2000000000000006",
        "type": "t_uint256"
      },
      {
        "astId": 24407,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "timeCursorOf",
        "offset": 0,
        "slot": "2000000000000007",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24412,
        "contract": "contracts/VeDistributor.sol:VeDistributor",
        "label": "userEpochOf",
        "offset": 0,
        "slot": "2000000000000008",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)1000000000000000_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1000000000000000]",
        "numberOfBytes": "32000000000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVe)29471": {
        "encoding": "inplace",
        "label": "contract IVe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}