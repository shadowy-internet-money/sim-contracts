{
  "address": "0x48469a0481254d5945E7E56c1Eb9861429c02f44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastGoodPrice",
          "type": "uint256"
        }
      ],
      "name": "LastGoodPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PriceFeed.Status",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "PriceFeedStatusChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TARGET_DIGITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3Proxy",
      "outputs": [
        {
          "internalType": "contract IProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastGoodPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pythFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateReceiver",
      "outputs": [
        {
          "internalType": "contract ICrossChainRateReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3Proxy_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pyth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rateReceiver_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "pythFeedId_",
          "type": "bytes32"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum PriceFeed.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xadc3954486fbccca474a84ebda3ee55094f10fa8fc35fa9817404ee9aaa7f706",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0x48469a0481254d5945E7E56c1Eb9861429c02f44",
    "transactionIndex": 0,
    "gasUsed": "968250",
    "logsBloom": "0x
    "blockHash": "0xfd70425b5b9f0e2a5cb00720058118dff5e9807925480c01aac4a86d1483e097",
    "transactionHash": "0xadc3954486fbccca474a84ebda3ee55094f10fa8fc35fa9817404ee9aaa7f706",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1961055,
        "transactionHash": "0xadc3954486fbccca474a84ebda3ee55094f10fa8fc35fa9817404ee9aaa7f706",
        "address": "0x48469a0481254d5945E7E56c1Eb9861429c02f44",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfd70425b5b9f0e2a5cb00720058118dff5e9807925480c01aac4a86d1483e097"
      }
    ],
    "blockNumber": 1961055,
    "cumulativeGasUsed": "968250",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29cd153aaed98a3f3bb92c92603933d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastGoodPrice\",\"type\":\"uint256\"}],\"name\":\"LastGoodPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PriceFeed.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"PriceFeedStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Proxy\",\"outputs\":[{\"internalType\":\"contract IProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGoodPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pythFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateReceiver\",\"outputs\":[{\"internalType\":\"contract ICrossChainRateReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3Proxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pyth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateReceiver_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pythFeedId_\",\"type\":\"bytes32\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum PriceFeed.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IProxy.sol\\\";\\nimport \\\"./interfaces/IPyth.sol\\\";\\nimport \\\"./interfaces/ICrossChainRateReceiver.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/BaseMath.sol\\\";\\nimport \\\"./dependencies/LiquityMath.sol\\\";\\n\\n/*\\n* PriceFeed for zkEVM deployment, to be connected to:\\n* - API3 ETH/USD https://market.api3.org/dapis/polygon-zkevm/ETH-USD (Contract zkevm 0x26690F9f17FdC26D419371315bc17950a0FC90eD)\\n* - Pyth ETH/USD https://pyth.network/price-feeds/crypto-eth-usd (Contract zkevm 0xC5E56d6b40F3e3B5fbfa266bCd35C37426537c65, testnet 0xd54bf1758b1C932F86B178F8b1D5d1A7e2F62C2E, Price Feed ID 0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace, testnet ID 0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6)\\n* - LayerZero wstETH/ETH CrossChainRateReceiver (zkEVM contract 0x00346D2Fd4B2Dc3468fA38B857409BC99f832ef8)\\n*\\n* The PriceFeed uses API3 as primary oracle, and Pyth as fallback. It contains logic for\\n* switching oracles based on oracle failures, timeouts, and conditions for returning to the primary\\n* API3 oracle.\\n*/\\ncontract PriceFeed is Ownable, CheckContract, BaseMath, IPriceFeed {\\n    string constant public NAME = \\\"PriceFeed\\\";\\n\\n    // Use to convert a price answer to an 18-digit precision uint\\n    uint constant public TARGET_DIGITS = 18;\\n\\n    // Maximum time period allowed since oracle's latest round data timestamp, beyond which oracle is considered frozen.\\n    uint constant public TIMEOUT = 14400;  // 4 hours: 60 * 60 * 4\\n\\n    /*\\n    * The maximum relative price difference between two oracle responses allowed in order for the PriceFeed\\n    * to return to using the API3 oracle. 18-digit precision.\\n    */\\n    uint constant public MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES = 5e16; // 5%\\n\\n\\n    IProxy public api3Proxy;\\n    IPyth public pyth;\\n    ICrossChainRateReceiver public rateReceiver;\\n    bytes32 public pythFeedId;\\n\\n    address public borrowerOperationsAddress;\\n    address public troveManagerAddress;\\n\\n    // The last good price seen from an oracle by Liquity\\n    uint public lastGoodPrice;\\n\\n    enum Status {\\n        api3Working,\\n        usingPythAPI3Untrusted,\\n        usingPythAPI3Frozen,\\n        bothOraclesUntrusted,\\n        usingAPI3PythUntrusted\\n    }\\n\\n    // The current status of the PriceFeed, which determines the conditions for the next price fetch attempt\\n    Status public status;\\n\\n    event PriceFeedStatusChanged(Status newStatus);\\n\\n    // --- Dependency setters ---\\n    \\n    function setAddresses(\\n        address api3Proxy_,\\n        address pyth_,\\n        address rateReceiver_,\\n        bytes32 pythFeedId_\\n    )\\n        external\\n        onlyOwner\\n    {\\n        _checkContract(api3Proxy_);\\n        _checkContract(pyth_);\\n        _checkContract(rateReceiver_);\\n\\n        api3Proxy = IProxy(api3Proxy_);\\n        pyth = IPyth(pyth_);\\n        rateReceiver = ICrossChainRateReceiver(rateReceiver_);\\n        pythFeedId = pythFeedId_;\\n\\n        // Explicitly set initial system status\\n        status = Status.api3Working;\\n\\n        // Get an initial price from API3 to serve as first reference for lastGoodPrice\\n        (int224 value, uint32 timestamp) = _getAPI3Response();\\n\\n        require(!_api3IsBroken(value, timestamp) && !_api3IsFrozen(timestamp),\\n            \\\"PriceFeed: API3 must be working and current\\\");\\n\\n        _storeAPI3Price(value);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Functions ---\\n\\n    /*\\n    * fetchPrice():\\n    * Returns the latest price obtained from the Oracle. Called by SIM functions that require a current price.\\n    *\\n    * Also callable by anyone externally.\\n    *\\n    * Non-view function - it stores the last good price seen by SIM.\\n    *\\n    * Uses a main oracle (API3) and a fallback oracle (Pyth) in case API3 fails. If both fail,\\n    * it uses the last good price seen by SIM.\\n    *\\n    */\\n    function fetchPrice() external override returns (uint price) {\\n        (int224 api3Value, uint32 api3Timestamp) = _getAPI3Response();\\n        PythStructs.Price memory pythPrice = _getPythResponse();\\n\\n        // --- CASE 1: System fetched last price from API3  ---\\n        if (status == Status.api3Working) {\\n            // If API3 is broken, try Pyth\\n            if (_api3IsBroken(api3Value, api3Timestamp)) {\\n                // If Pyth is broken then both oracles are untrusted, so return the last good price\\n                if (_pythIsBroken(pythPrice)) {\\n                    _changeStatus(Status.bothOraclesUntrusted);\\n                    return lastGoodPrice; \\n                }\\n                /*\\n                * If Pyth is only frozen but otherwise returning valid data, return the last good price.\\n                */\\n                if (_pythIsFrozen(pythPrice)) {\\n                    _changeStatus(Status.usingPythAPI3Untrusted);\\n                    return lastGoodPrice;\\n                }\\n                \\n                // If API3 is broken and Pyth is working, switch to Pyth and return current Pyth price\\n                _changeStatus(Status.usingPythAPI3Untrusted);\\n                return _storePythPrice(pythPrice);\\n            }\\n\\n            // If API3 is frozen, try Pyth\\n            if (_api3IsFrozen(api3Timestamp)) {\\n                // If Pyth is broken too, remember Pyth broke, and return last good price\\n                if (_pythIsBroken(pythPrice)) {\\n                    _changeStatus(Status.usingAPI3PythUntrusted);\\n                    return lastGoodPrice;     \\n                }\\n\\n                // If Pyth is frozen or working, remember API3 froze, and switch to Pyth\\n                _changeStatus(Status.usingPythAPI3Frozen);\\n               \\n                if (_pythIsFrozen(pythPrice)) {\\n                    return lastGoodPrice;\\n                }\\n\\n                // If Pyth is working, use it\\n                return _storePythPrice(pythPrice);\\n            }\\n\\n            // If API3 is working and Pyth is broken, remember Pyth is broken\\n            if (_pythIsBroken(pythPrice)) {\\n                _changeStatus(Status.usingAPI3PythUntrusted);\\n            }   \\n\\n            // If API3 is working, return API3 current price (no status change)\\n            return _storeAPI3Price(api3Value);\\n        }\\n\\n        // --- CASE 2: The system fetched last price from Pyth ---\\n        if (status == Status.usingPythAPI3Untrusted) {\\n            // If both Pyth and API3 are live, unbroken, and reporting similar prices, switch back to API3\\n            if (_bothOraclesLiveAndUnbrokenAndSimilarPrice(api3Value, api3Timestamp, pythPrice)) {\\n                _changeStatus(Status.api3Working);\\n                return _storeAPI3Price(api3Value);\\n            }\\n\\n            if (_pythIsBroken(pythPrice)) {\\n                _changeStatus(Status.bothOraclesUntrusted);\\n                return lastGoodPrice; \\n            }\\n\\n            /*\\n            * If Pyth is only frozen but otherwise returning valid data, just return the last good price.\\n            * Pyth may need to be tipped to return current data.\\n            */\\n            if (_pythIsFrozen(pythPrice)) {\\n                return lastGoodPrice;\\n            }\\n            \\n            // Otherwise, use Pyth price\\n            return _storePythPrice(pythPrice);\\n        }\\n\\n        // --- CASE 3: Both oracles were untrusted at the last price fetch ---\\n        if (status == Status.bothOraclesUntrusted) {\\n            /*\\n            * If both oracles are now live, unbroken and similar price, we assume that they are reporting\\n            * accurately, and so we switch back to API3.\\n            */\\n            if (_bothOraclesLiveAndUnbrokenAndSimilarPrice(api3Value, api3Timestamp, pythPrice)) {\\n                _changeStatus(Status.api3Working);\\n                return _storeAPI3Price(api3Value);\\n            } \\n\\n            // Otherwise, return the last good price - both oracles are still untrusted (no status change)\\n            return lastGoodPrice;\\n        }\\n\\n        // --- CASE 4: Using Pyth, and API3 is frozen ---\\n        if (status == Status.usingPythAPI3Frozen) {\\n            if (_api3IsBroken(api3Value, api3Timestamp)) {\\n                // If both Oracles are broken, return last good price\\n                if (_pythIsBroken(pythPrice)) {\\n                    _changeStatus(Status.bothOraclesUntrusted);\\n                    return lastGoodPrice;\\n                }\\n\\n                // If API3 is broken, remember it and switch to using Pyth\\n                _changeStatus(Status.usingPythAPI3Untrusted);\\n\\n                if (_pythIsFrozen(pythPrice)) {\\n                    return lastGoodPrice;\\n                }\\n\\n                // If Pyth is working, return Pyth current price\\n                return _storePythPrice(pythPrice);\\n            }\\n\\n            if (_api3IsFrozen(api3Timestamp)) {\\n                // if API3 is frozen and Pyth is broken, remember Pyth broke, and return last good price\\n                if (_pythIsBroken(pythPrice)) {\\n                    _changeStatus(Status.usingAPI3PythUntrusted);\\n                    return lastGoodPrice;\\n                }\\n\\n                // If both are frozen, just use lastGoodPrice\\n                if (_pythIsFrozen(pythPrice)) {\\n                    return lastGoodPrice;\\n                }\\n\\n                // if API3 is frozen and Pyth is working, keep using Pyth (no status change)\\n                return _storePythPrice(pythPrice);\\n            }\\n\\n            // if API3 is live and Pyth is broken, remember Pyth broke, and return API3 price\\n            if (_pythIsBroken(pythPrice)) {\\n                _changeStatus(Status.usingAPI3PythUntrusted);\\n                return _storeAPI3Price(api3Value);\\n            }\\n\\n            // If API3 is live and Pyth is frozen, just use last good price (no status change) since we have no basis for comparison\\n            if (_pythIsFrozen(pythPrice)) {\\n                return lastGoodPrice;\\n            }\\n\\n            // If API3 is live and Pyth is working, compare prices. Switch to API3\\n            // if prices are within 5%, and return API3 price.\\n            if (_bothOraclesSimilarPrice(api3Value, pythPrice)) {\\n                _changeStatus(Status.api3Working);\\n                return _storeAPI3Price(api3Value);\\n            }\\n\\n            // Otherwise if API3 is live but price not within 5% of Pyth, distrust API3, and return Pyth price\\n            _changeStatus(Status.usingPythAPI3Untrusted);\\n            return _storePythPrice(pythPrice);\\n        }\\n\\n        // --- CASE 5: Using API3, Pyth is untrusted ---\\n         if (status == Status.usingAPI3PythUntrusted) {\\n            // If API3 breaks, now both oracles are untrusted\\n            if (_api3IsBroken(api3Value, api3Timestamp)) {\\n                _changeStatus(Status.bothOraclesUntrusted);\\n                return lastGoodPrice;\\n            }\\n\\n            // If API3 is frozen, return last good price (no status change)\\n            if (_api3IsFrozen(api3Timestamp)) {\\n                return lastGoodPrice;\\n            }\\n\\n            // If API3 and Pyth are both live, unbroken and similar price, switch back to API3 working and return API3 price\\n            if (_bothOraclesLiveAndUnbrokenAndSimilarPrice(api3Value, api3Timestamp, pythPrice)) {\\n                _changeStatus(Status.api3Working);\\n                return _storeAPI3Price(api3Value);\\n            }\\n\\n            // Otherwise if API3 is live and deviated <50% from it's previous price and Pyth is still untrusted,\\n            // return API3 price (no status change)\\n            return _storeAPI3Price(api3Value);\\n        }\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _api3IsBroken(int224 value, uint32 timestamp) internal view returns (bool) {\\n        return value <= 0 || timestamp == 0 || timestamp > block.timestamp;\\n    }\\n\\n    function _api3IsFrozen(uint32 timestamp) internal view returns (bool) {\\n        return block.timestamp - timestamp > TIMEOUT;\\n    }\\n\\n    function _pythIsBroken(PythStructs.Price memory price) internal view returns (bool) {\\n        return price.price <= 0 || price.publishTime == 0 || price.publishTime > block.timestamp;\\n    }\\n\\n    function _pythIsFrozen(PythStructs.Price memory price) internal view returns (bool) {\\n        return block.timestamp - price.publishTime > TIMEOUT;\\n    }\\n\\n    function _bothOraclesLiveAndUnbrokenAndSimilarPrice(int224 api3Value, uint32 api3Timestamp, PythStructs.Price memory pythPrice) internal view returns (bool) {\\n        // Return false if either oracle is broken or frozen\\n        if (\\n            _pythIsBroken(pythPrice) ||\\n            _pythIsFrozen(pythPrice) ||\\n            _api3IsBroken(api3Value, api3Timestamp) ||\\n            _api3IsFrozen(api3Timestamp)\\n        ) {\\n            return false;\\n        }\\n\\n        return _bothOraclesSimilarPrice(api3Value, pythPrice);\\n    }\\n\\n    function _bothOraclesSimilarPrice(int224 api3Value, PythStructs.Price memory pythPrice) internal pure returns (bool) {\\n        uint scaledAPI3Price = _scaleAPI3PriceByDigits(api3Value);\\n        uint scaledPythPrice = _scalePythPriceByDigits(pythPrice);\\n\\n        // Get the relative price difference between the oracles. Use the lower price as the denominator, i.e. the reference for the calculation.\\n        uint minPrice = LiquityMath._min(scaledPythPrice, scaledAPI3Price);\\n        uint maxPrice = LiquityMath._max(scaledPythPrice, scaledAPI3Price);\\n        uint percentPriceDifference = (maxPrice - minPrice) * DECIMAL_PRECISION / minPrice;\\n\\n        /*\\n        * Return true if the relative price difference is <= 3%: if so, we assume both oracles are probably reporting\\n        * the honest market price, as it is unlikely that both have been broken/hacked and are still in-sync.\\n        */\\n        return percentPriceDifference <= MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES;\\n    }\\n\\n    function _scaleAPI3PriceByDigits(int224 price_) internal pure returns (uint) {\\n        return uint(uint224(price_));\\n    }\\n\\n    function _scalePythPriceByDigits(PythStructs.Price memory price_) internal pure returns (uint) {\\n        return uint(uint64(price_.price)) * 10**(TARGET_DIGITS - uint(uint32(-price_.expo)));\\n    }\\n\\n    function _changeStatus(Status _status) internal {\\n        status = _status;\\n        emit PriceFeedStatusChanged(_status);\\n    }\\n\\n    function _storePrice(uint _currentPrice) internal {\\n        uint WSTETHPrice = _currentPrice * rateReceiver.rate() / 1e18;\\n        lastGoodPrice = WSTETHPrice;\\n\\n        emit LastGoodPriceUpdated(WSTETHPrice);\\n    }\\n\\n     function _storeAPI3Price(int224 price_) internal returns (uint) {\\n        uint scaledPrice = _scaleAPI3PriceByDigits(price_);\\n        _storePrice(scaledPrice);\\n\\n        return scaledPrice;\\n    }\\n\\n    function _storePythPrice(PythStructs.Price memory price_) internal returns (uint) {\\n        uint scaledPrice = _scalePythPriceByDigits(price_);\\n        _storePrice(scaledPrice);\\n\\n        return scaledPrice;\\n    }\\n\\n    // --- Oracle response wrapper functions ---\\n\\n    function _getAPI3Response() internal view returns (int224 value, uint32 timestamp) {\\n        try api3Proxy.read() returns (int224 value_, uint32 timestamp_)\\n        {\\n            return (value_, timestamp_);\\n        } catch {\\n            return (0, 0);\\n        }\\n    }\\n\\n    function _getPythResponse() internal view returns (PythStructs.Price memory price) {\\n        // First, try to get current decimal precision:\\n        try pyth.getPriceUnsafe(pythFeedId) returns (\\n            PythStructs.Price memory price_\\n        ) {\\n            return price_;\\n        } catch {\\n            return price;\\n        }\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xfe9ce1884a5f01325c0e5122cb193afc85f37ae0d9a85b93dc85bc9a9d2c1d9b\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xfbd2340d208377996fc6305a28a939c849d7337e8fa1789e3130b73106de1d9f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     */\\n    function _checkContract(address account_) internal view {\\n        require(account_ != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account_) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6282e853a7b31ee8bbbb4008869300bf900f7f43610f5b4be9499d40549b207a\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LiquityMath {\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x * y;\\n\\n        decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        // cap to avoid overflow\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        }\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll * NICR_PRECISION / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll * _price / _debt;\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb9ed155e8331948da867a6e089052dff0a667e25119ff602c6b88099f53b0ba\",\"license\":\"MIT\"},\"contracts/dependencies/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\",\"keccak256\":\"0xe17de352c5aa29b5eb99ecc594dec765fb8608a7484ff5e2d0c5f0de46b3857c\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICrossChainRateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ninterface ICrossChainRateReceiver {\\n    function rate() external view returns (uint);\\n    function lastUpdated() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x48c71d2335327c6ee25123c271f316d200153f9ad2a8bd59574854019811a990\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPriceFeed {\\n\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n   \\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd48e100d585578b5eec065f625881aa4539745a125c8a7052481b75fbc934901\",\"license\":\"MIT\"},\"contracts/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @dev https://github.com/api3dao/airnode-protocol-v1/blob/main/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n//    function api3ServerV1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x05f67bfe483ddc2e94fbf966bbdb789fbc3287e645e6d0ad479527bcbe5044cc\",\"license\":\"MIT\"},\"contracts/interfaces/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"../dependencies/PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    /*function getValidTimePeriod() external view returns (uint validTimePeriod);*/\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    /*function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);*/\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    /*function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);*/\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    /*function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);*/\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    /*function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);*/\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    /*function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);*/\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /*function updatePriceFeeds(bytes[] calldata updateData) external payable;*/\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    /*function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;*/\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    /*function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);*/\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    /*function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);*/\\n}\\n\",\"keccak256\":\"0xa0e7261ae5f0f67dbf1bc9a561f76c1b413fb27b8f2ecb5cd65ea2f627ff9be9\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\",\"keccak256\":\"0xfc2012cf9f06e6a8cb5bd6f92628e7baa4befb90167e860aaf647497bef85114\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11259,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "api3Proxy",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IProxy)28408"
      },
      {
        "astId": 11262,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "pyth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPyth)28443"
      },
      {
        "astId": 11265,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "rateReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICrossChainRateReceiver)28234"
      },
      {
        "astId": 11267,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "pythFeedId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 11269,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11271,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11273,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "lastGoodPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11282,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "status",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(Status)11279"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICrossChainRateReceiver)28234": {
        "encoding": "inplace",
        "label": "contract ICrossChainRateReceiver",
        "numberOfBytes": "20"
      },
      "t_contract(IProxy)28408": {
        "encoding": "inplace",
        "label": "contract IProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)28443": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_enum(Status)11279": {
        "encoding": "inplace",
        "label": "enum PriceFeed.Status",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}