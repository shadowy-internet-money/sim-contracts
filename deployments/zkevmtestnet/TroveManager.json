{
  "address": "0x4D7D07196E24D15d8E5B97216aeDCf4518b23A66",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "BaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_WSTETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_SIMDebt",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedSIMAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualSIMAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_WSTETHSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_WSTETHFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_shadyTokenAddress",
          "type": "address"
        }
      ],
      "name": "SHADYTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSIMTokenAddress",
          "type": "address"
        }
      ],
      "name": "SIMTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_WSTETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_SIMDebt",
          "type": "uint256"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_shadyStakingAddress",
          "type": "address"
        }
      ],
      "name": "WSTETHVeDistibutorAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_SIMDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_WSTETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum TroveManager.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SIMDebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SIMDebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingSIMDebtReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingWSTETHReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingSIMDebtReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingWSTETHReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WSTETHDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTroveFromTroveOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSIMDebtError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastWSTETHError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "liquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SIMamount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "WSTETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "SIMDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shadyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wstEthVeDistributor",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shadyToken",
      "outputs": [
        {
          "internalType": "contract ISHADYToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simToken",
      "outputs": [
        {
          "internalType": "contract ISIMToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wstETHVeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x27eba5c83e705b213753fb4bf0c098f7a6d4382c956125ff5d6a843e2d008041",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0x4D7D07196E24D15d8E5B97216aeDCf4518b23A66",
    "transactionIndex": 0,
    "gasUsed": "4675645",
    "logsBloom": "0x
    "blockHash": "0x020892eed1673e27db133ab8a3e461edc695229aa3964f7ad7773dbb6334a967",
    "transactionHash": "0x27eba5c83e705b213753fb4bf0c098f7a6d4382c956125ff5d6a843e2d008041",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1954440,
        "transactionHash": "0x27eba5c83e705b213753fb4bf0c098f7a6d4382c956125ff5d6a843e2d008041",
        "address": "0x4D7D07196E24D15d8E5B97216aeDCf4518b23A66",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x020892eed1673e27db133ab8a3e461edc695229aa3964f7ad7773dbb6334a967"
      }
    ],
    "blockNumber": 1954440,
    "cumulativeGasUsed": "4675645",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29cd153aaed98a3f3bb92c92603933d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WSTETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_SIMDebt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedSIMAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualSIMAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WSTETHSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WSTETHFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_shadyTokenAddress\",\"type\":\"address\"}],\"name\":\"SHADYTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSIMTokenAddress\",\"type\":\"address\"}],\"name\":\"SIMTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_WSTETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_SIMDebt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_shadyStakingAddress\",\"type\":\"address\"}],\"name\":\"WSTETHVeDistibutorAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_SIMDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_WSTETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum TroveManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SIMDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SIMDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingSIMDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWSTETHReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingSIMDebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingWSTETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WSTETHDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSIMDebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWSTETHError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SIMamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"WSTETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SIMDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shadyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wstEthVeDistributor\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shadyToken\",\"outputs\":[{\"internalType\":\"contract ISHADYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simToken\",\"outputs\":[{\"internalType\":\"contract ISIMToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETHVeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/ISIMToken.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/ISHADYToken.sol\\\";\\nimport \\\"./interfaces/IVeDistributor.sol\\\";\\nimport \\\"./dependencies/Base.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./VeDistributor.sol\\\";\\n\\ncontract TroveManager is Base, Ownable, CheckContract, ITroveManager {\\n    string constant public NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public override stabilityPool;\\n\\n    ICollSurplusPool public collSurplusPool;\\n\\n    ISIMToken public override simToken;\\n\\n    ISHADYToken public override shadyToken;\\n\\n    address public override wstETHVeDistributor;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint constant public SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint constant public MINUTE_DECAY_FACTOR = 999037758833783000;\\n    uint constant public REDEMPTION_FEE_FLOOR = DECIMAL_PRECISION / 1000 * 5; // 0.5%\\n    uint constant public MAX_BORROWING_FEE = DECIMAL_PRECISION / 100 * 5; // 5%\\n\\n    // During bootsrap period redemptions are not allowed\\n    uint constant public BOOTSTRAP_PERIOD = 30 days;\\n\\n    /*\\n    * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n    * Corresponds to (1 / ALPHA) in the white paper.\\n    */\\n    uint constant public BETA = 2;\\n\\n    uint public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new SIM issuance)\\n    uint public lastFeeOperationTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint debt;\\n        uint coll;\\n        uint stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping (address => Trove) public Troves;\\n\\n    uint public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint public totalCollateralSnapshot;\\n\\n    /*\\n    * L_WSTETH and L_SIMDebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n    *\\n    * An WSTETH gain of ( stake * [L_WSTETH - L_WSTETH(0)] )\\n    * A SIMDebt increase  of ( stake * [L_SIMDebt - L_SIMDebt(0)] )\\n    *\\n    * Where L_WSTETH(0) and L_SIMDebt(0) are snapshots of L_WSTETH and L_SIMDebt for the active Trove taken at the instant the stake was made\\n    */\\n    uint public L_WSTETH;\\n    uint public L_SIMDebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping (address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the WSTETH and SIM snapshots for a given active trove\\n    struct RewardSnapshot { uint WSTETH; uint SIMDebt;}\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint public lastWSTETHError_Redistribution;\\n    uint public lastSIMDebtError_Redistribution;\\n\\n    /*\\n    * --- Variable container structs for liquidations ---\\n    *\\n    * These structs are used to hold, return and assign variables inside the liquidation functions,\\n    * in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n    **/\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint price;\\n        uint SIMInStabPool;\\n        bool recoveryModeAtStart;\\n        uint liquidatedDebt;\\n        uint liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint collToLiquidate;\\n        uint pendingDebtReward;\\n        uint pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint remainingSIMInStabPool;\\n        uint i;\\n        uint ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint entireSystemDebt;\\n        uint entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint entireTroveDebt;\\n        uint entireTroveColl;\\n        uint collGasCompensation;\\n        uint debtToOffset;\\n        uint collToSendToSP;\\n        uint debtToRedistribute;\\n        uint collToRedistribute;\\n        uint collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint totalCollInSequence;\\n        uint totalDebtInSequence;\\n        uint totalCollGasCompensation;\\n        uint totalDebtToOffset;\\n        uint totalCollToSendToSP;\\n        uint totalDebtToRedistribute;\\n        uint totalCollToRedistribute;\\n        uint totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        ISIMToken simToken;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint remainingSIM;\\n        uint totalSIMToRedeem;\\n        uint totalWSTETHDrawn;\\n        uint WSTETHFee;\\n        uint WSTETHToSendToRedeemer;\\n        uint decayedBaseRate;\\n        uint price;\\n        uint totalSIMSupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint SIMLot;\\n        uint WSTETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n\\n    // --- Dependency setter ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _simTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _shadyTokenAddress,\\n        address _wstEthVeDistributor\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _checkContract(_borrowerOperationsAddress);\\n        _checkContract(_activePoolAddress);\\n        _checkContract(_defaultPoolAddress);\\n        _checkContract(_stabilityPoolAddress);\\n        _checkContract(_collSurplusPoolAddress);\\n        _checkContract(_priceFeedAddress);\\n        _checkContract(_simTokenAddress);\\n        _checkContract(_sortedTrovesAddress);\\n        _checkContract(_shadyTokenAddress);\\n        _checkContract(_wstEthVeDistributor);\\n\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPool = IStabilityPool(_stabilityPoolAddress);\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        simToken = ISIMToken(_simTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        shadyToken = ISHADYToken(_shadyTokenAddress);\\n        wstETHVeDistributor = _wstEthVeDistributor;\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SIMTokenAddressChanged(_simTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit SHADYTokenAddressChanged(_shadyTokenAddress);\\n        emit WSTETHVeDistibutorAddressChanged(_wstEthVeDistributor);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view override returns (uint) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(uint _index) external view override returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external override {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    // Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _SIMInStabPool\\n    )\\n        internal\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (singleLiquidation.entireTroveDebt,\\n        singleLiquidation.entireTroveColl,\\n        vars.pendingDebtReward,\\n        vars.pendingCollReward) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(_activePool, _defaultPool, vars.pendingDebtReward, vars.pendingCollReward);\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(singleLiquidation.entireTroveColl);\\n        uint collToLiquidate = singleLiquidation.entireTroveColl - singleLiquidation.collGasCompensation;\\n\\n        (singleLiquidation.debtToOffset,\\n        singleLiquidation.collToSendToSP,\\n        singleLiquidation.debtToRedistribute,\\n        singleLiquidation.collToRedistribute) = _getOffsetAndRedistributionVals(singleLiquidation.entireTroveDebt, collToLiquidate, _SIMInStabPool);\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.entireTroveColl, uint8(TroveManagerOperation.liquidateInNormalMode));\\n        emit TroveUpdated(_borrower, 0, 0, 0, uint8(TroveManagerOperation.liquidateInNormalMode));\\n        return singleLiquidation;\\n    }\\n\\n    // Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint _ICR,\\n        uint _SIMInStabPool,\\n        uint _TCR,\\n        uint _price\\n    )\\n        internal\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {return singleLiquidation;} // don't liquidate if last trove\\n        (singleLiquidation.entireTroveDebt,\\n        singleLiquidation.entireTroveColl,\\n        vars.pendingDebtReward,\\n        vars.pendingCollReward) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(singleLiquidation.entireTroveColl);\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl - singleLiquidation.collGasCompensation;\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(_activePool, _defaultPool, vars.pendingDebtReward, vars.pendingCollReward);\\n            _removeStake(_borrower);\\n           \\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation.entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.entireTroveColl, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n            emit TroveUpdated(_borrower, 0, 0, 0, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n            \\n        // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n             _movePendingTroveRewardsToActivePool(_activePool, _defaultPool, vars.pendingDebtReward, vars.pendingCollReward);\\n            _removeStake(_borrower);\\n\\n            (singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute) = _getOffsetAndRedistributionVals(singleLiquidation.entireTroveDebt, vars.collToLiquidate, _SIMInStabPool);\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.entireTroveColl, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n            emit TroveUpdated(_borrower, 0, 0, 0, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n        /*\\n        * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n        * and there is SIM in the Stability Pool, only offset, with no redistribution,\\n        * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n        * The remainder due to the capped rate will be claimable as collateral surplus.\\n        */\\n        } else if ((_ICR >= MCR) && (_ICR < _TCR) && (singleLiquidation.entireTroveDebt <= _SIMInStabPool)) {\\n            _movePendingTroveRewardsToActivePool(_activePool, _defaultPool, vars.pendingDebtReward, vars.pendingCollReward);\\n            assert(_SIMInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(singleLiquidation.entireTroveDebt, singleLiquidation.entireTroveColl, _price);\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(_borrower, singleLiquidation.collSurplus);\\n            }\\n\\n            emit TroveLiquidated(_borrower, singleLiquidation.entireTroveDebt, singleLiquidation.collToSendToSP, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n            emit TroveUpdated(_borrower, 0, 0, 0, uint8(TroveManagerOperation.liquidateInRecoveryMode));\\n\\n        } else { // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _SIMInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n    * redistributed to active troves.\\n    */\\n    function _getOffsetAndRedistributionVals\\n    (\\n        uint _debt,\\n        uint _coll,\\n        uint _SIMInStabPool\\n    )\\n        internal\\n        pure\\n        returns (uint debtToOffset, uint collToSendToSP, uint debtToRedistribute, uint collToRedistribute)\\n    {\\n        if (_SIMInStabPool > 0) {\\n        /*\\n        * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n        * between all active troves.\\n        *\\n        *  If the trove's debt is larger than the deposited SIM in the Stability Pool:\\n        *\\n        *  - Offset an amount of the trove's debt equal to the SIM in the Stability Pool\\n        *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n        *\\n        */\\n            debtToOffset = LiquityMath._min(_debt, _SIMInStabPool);\\n            collToSendToSP = _coll * debtToOffset / _debt;\\n            debtToRedistribute = _debt - debtToOffset;\\n            collToRedistribute = _coll - collToSendToSP;\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n    *  Get its offset coll/debt and WSTETH gas comp, and close the trove.\\n    */\\n    function _getCappedOffsetVals\\n    (\\n        uint _entireTroveDebt,\\n        uint _entireTroveColl,\\n        uint _price\\n    )\\n        internal\\n        pure\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint cappedCollPortion = _entireTroveDebt * MCR / _price;\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(cappedCollPortion);\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion - singleLiquidation.collGasCompensation;\\n        singleLiquidation.collSurplus = _entireTroveColl - cappedCollPortion;\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /*\\n    * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n    * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n    */\\n    function liquidateTroves(uint _n) external override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            ISIMToken(address(0)),\\n//            IVe(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0))/*,\\n            address(0)*/\\n        );\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.SIMInStabPool = stabilityPoolCached.getTotalSIMDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(contractsCache, vars.price, vars.SIMInStabPool, _n);\\n        } else { // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(contractsCache.activePool, contractsCache.defaultPool, vars.price, vars.SIMInStabPool, _n);\\n        }\\n\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\n\\n        // Move liquidated WSTETH and SIM to the appropriate pools\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\n        _redistributeDebtAndColl(contractsCache.activePool, contractsCache.defaultPool, totals.totalDebtToRedistribute, totals.totalCollToRedistribute);\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendWSTETH(address(collSurplusPool), totals.totalCollSurplus);\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(contractsCache.activePool, totals.totalCollGasCompensation);\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals.totalCollInSequence - totals.totalCollGasCompensation - totals.totalCollSurplus;\\n        emit Liquidation(vars.liquidatedDebt, vars.liquidatedColl, totals.totalCollGasCompensation/*, totals.totalSIMGasCompensation*/);\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(contractsCache.activePool, msg.sender, /*totals.totalSIMGasCompensation,*/ totals.totalCollGasCompensation);\\n    }\\n\\n    /*\\n    * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n    * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n    */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode\\n    (\\n        ContractsCache memory _contractsCache,\\n        uint _price,\\n        uint _SIMInStabPool,\\n        uint _n\\n    )\\n        internal\\n        returns(LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingSIMInStabPool = _SIMInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingSIMInStabPool == 0) { break; }\\n\\n                uint TCR = LiquityMath._computeCR(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n\\n                singleLiquidation = _liquidateRecoveryMode(_contractsCache.activePool, _contractsCache.defaultPool, vars.user, vars.ICR, vars.remainingSIMInStabPool, TCR, _price);\\n\\n                // Update aggregate trackers\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n                vars.entireSystemDebt = vars.entireSystemDebt - singleLiquidation.debtToOffset;\\n                vars.entireSystemColl = vars.entireSystemColl - singleLiquidation.collToSendToSP - singleLiquidation.collGasCompensation - singleLiquidation.collSurplus;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n            }\\n            else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(_contractsCache.activePool, _contractsCache.defaultPool, vars.user, vars.remainingSIMInStabPool);\\n\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n            }  else break;  // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode\\n    (\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _SIMInStabPool,\\n        uint _n\\n    )\\n        internal\\n        returns(LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingSIMInStabPool = _SIMInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(_activePool, _defaultPool, vars.user, vars.remainingSIMInStabPool);\\n\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n            } else break;  // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /*\\n    * Attempt to liquidate a custom list of troves provided by the caller.\\n    */\\n    function batchLiquidateTroves(address[] memory _troveArray) public override {\\n        require(_troveArray.length != 0, \\\"TroveManager: Calldata address array must not be empty\\\");\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.SIMInStabPool = stabilityPoolCached.getTotalSIMDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(activePoolCached, defaultPoolCached, vars.price, vars.SIMInStabPool, _troveArray);\\n        } else {  //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(activePoolCached, defaultPoolCached, vars.price, vars.SIMInStabPool, _troveArray);\\n        }\\n\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\n\\n        // Move liquidated WSTETH and SIM to the appropriate pools\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\n        _redistributeDebtAndColl(activePoolCached, defaultPoolCached, totals.totalDebtToRedistribute, totals.totalCollToRedistribute);\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendWSTETH(address(collSurplusPool), totals.totalCollSurplus);\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(activePoolCached, totals.totalCollGasCompensation);\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals.totalCollInSequence - totals.totalCollGasCompensation - totals.totalCollSurplus;\\n        emit Liquidation(vars.liquidatedDebt, vars.liquidatedColl, totals.totalCollGasCompensation/*, totals.totalSIMGasCompensation*/);\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(activePoolCached, msg.sender, /*totals.totalSIMGasCompensation,*/ totals.totalCollGasCompensation);\\n    }\\n\\n    /*\\n    * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n    * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n    */\\n    function _getTotalFromBatchLiquidate_RecoveryMode\\n    (\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _SIMInStabPool,\\n        address[] memory _troveArray\\n    )\\n        internal\\n        returns(LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingSIMInStabPool = _SIMInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) { continue; }\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n\\n                // Skip this trove if ICR is greater than MCR and Stability Pool is empty\\n                if (vars.ICR >= MCR && vars.remainingSIMInStabPool == 0) { continue; }\\n\\n                uint TCR = LiquityMath._computeCR(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n\\n                singleLiquidation = _liquidateRecoveryMode(_activePool, _defaultPool, vars.user, vars.ICR, vars.remainingSIMInStabPool, TCR, _price);\\n\\n                // Update aggregate trackers\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n                vars.entireSystemDebt = vars.entireSystemDebt - singleLiquidation.debtToOffset;\\n                vars.entireSystemColl = vars.entireSystemColl - singleLiquidation.collToSendToSP - singleLiquidation.collGasCompensation - singleLiquidation.collSurplus;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n            }\\n\\n            else if (vars.backToNormalMode && vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(_activePool, _defaultPool, vars.user, vars.remainingSIMInStabPool);\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode\\n    (\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint _price,\\n        uint _SIMInStabPool,\\n        address[] memory _troveArray\\n    )\\n        internal\\n        returns(LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingSIMInStabPool = _SIMInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < MCR) {\\n                singleLiquidation = _liquidateNormalMode(_activePool, _defaultPool, vars.user, vars.remainingSIMInStabPool);\\n                vars.remainingSIMInStabPool = vars.remainingSIMInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(LiquidationTotals memory oldTotals, LiquidationValues memory singleLiquidation)\\n    internal pure returns(LiquidationTotals memory newTotals) {\\n\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals.totalCollGasCompensation + singleLiquidation.collGasCompensation;\\n//        newTotals.totalSIMGasCompensation = oldTotals.totalSIMGasCompensation + singleLiquidation.SIMGasCompensation;\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence + singleLiquidation.entireTroveDebt;\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence + singleLiquidation.entireTroveColl;\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset + singleLiquidation.debtToOffset;\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP + singleLiquidation.collToSendToSP;\\n        newTotals.totalDebtToRedistribute = oldTotals.totalDebtToRedistribute + singleLiquidation.debtToRedistribute;\\n        newTotals.totalCollToRedistribute = oldTotals.totalCollToRedistribute + singleLiquidation.collToRedistribute;\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus + singleLiquidation.collSurplus;\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(IActivePool _activePool, address _liquidator, /*uint _SIM,*/ uint _WSTETH) internal {\\n        /*if (_SIM > 0) {\\n            simToken.returnFromPool(gasPoolAddress, _liquidator, _SIM);\\n        }*/\\n\\n        if (_WSTETH > 0) {\\n            _activePool.sendWSTETH(_liquidator, _WSTETH);\\n        }\\n    }\\n\\n    // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(IActivePool _activePool, IDefaultPool _defaultPool, uint _SIM, uint _WSTETH) internal {\\n        _defaultPool.decreaseSIMDebt(_SIM);\\n        _activePool.increaseSIMDebt(_SIM);\\n        _defaultPool.sendWSTETHToActivePool(_WSTETH);\\n    }\\n\\n    // --- Redemption functions ---\\n\\n    // Redeem as much collateral as possible from _borrower's Trove in exchange for SIM up to _maxSIMamount\\n    function _redeemCollateralFromTrove(\\n        ContractsCache memory _contractsCache,\\n        address _borrower,\\n        uint _maxSIMamount,\\n        uint _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR\\n    )\\n        internal returns (SingleRedemptionValues memory singleRedemption)\\n    {\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n        singleRedemption.SIMLot = LiquityMath._min(_maxSIMamount, Troves[_borrower].debt);\\n\\n        // Get the WSTETHLot of equivalent value in USD\\n        singleRedemption.WSTETHLot = singleRedemption.SIMLot * DECIMAL_PRECISION / _price;\\n\\n        // Decrease the debt and collateral of the current Trove according to the SIM lot and corresponding WSTETH to send\\n        uint newDebt = (Troves[_borrower].debt) - singleRedemption.SIMLot;\\n        uint newColl = (Troves[_borrower].coll) - singleRedemption.WSTETHLot;\\n\\n        if (newDebt == 0) {\\n            // No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n            _removeStake(_borrower);\\n            _closeTrove(_borrower, Status.closedByRedemption);\\n            _redeemCloseTrove(_contractsCache, _borrower, newColl);\\n            emit TroveUpdated(_borrower, 0, 0, 0, uint8(TroveManagerOperation.redeemCollateral));\\n        } else {\\n            uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n            * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n            * certainly result in running out of gas. \\n            *\\n            * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n            */\\n            if (newNICR != _partialRedemptionHintNICR || _getNetDebt(newDebt) < MIN_NET_DEBT) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            _contractsCache.sortedTroves.reInsert(_borrower, newNICR, _upperPartialRedemptionHint, _lowerPartialRedemptionHint);\\n\\n            Troves[_borrower].debt = newDebt;\\n            Troves[_borrower].coll = newColl;\\n            _updateStakeAndTotalStakes(_borrower);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                newDebt, newColl,\\n                Troves[_borrower].stake,\\n                uint8(TroveManagerOperation.redeemCollateral)\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    /*\\n    * Called when a full redemption occurs, and closes the trove.\\n    * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n    * Any surplus WSTETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n    */\\n    function _redeemCloseTrove(ContractsCache memory _contractsCache, address _borrower, uint _WSTETH) internal {\\n        // send WSTETH from Active Pool to CollSurplus Pool\\n        _contractsCache.collSurplusPool.accountSurplus(_borrower, _WSTETH);\\n        _contractsCache.activePool.sendWSTETH(address(_contractsCache.collSurplusPool), _WSTETH);\\n    }\\n\\n    function _isValidFirstRedemptionHint(ISortedTroves _sortedTroves, address _firstRedemptionHint, uint _price) internal view returns (bool) {\\n        if (_firstRedemptionHint == address(0) ||\\n            !_sortedTroves.contains(_firstRedemptionHint) ||\\n            getCurrentICR(_firstRedemptionHint, _price) < MCR\\n        ) {\\n            return false;\\n        }\\n\\n        address nextTrove = _sortedTroves.getNext(_firstRedemptionHint);\\n        return nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n    }\\n\\n    /* Send _SIMamount SIM to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n    * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n    *\\n    * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n    * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n    *\\n    * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n    * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n    * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n    * costs can vary.\\n    *\\n    * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n    * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n    * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n    * in the sortedTroves list along with the ICR value that the hint was found for.\\n    *\\n    * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n    * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n    * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining SIM amount, which they can attempt\\n    * to redeem later.\\n    */\\n    function redeemCollateral(\\n        uint _SIMamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFeePercentage\\n    )\\n        external\\n        override\\n    {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            simToken,\\n            sortedTroves,\\n            collSurplusPool\\n        );\\n        RedemptionTotals memory totals;\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage);\\n        _requireAfterBootstrapPeriod();\\n        totals.price = priceFeed.fetchPrice();\\n        _requireTCRoverMCR(totals.price);\\n        _requireAmountGreaterThanZero(_SIMamount);\\n        _requireSIMBalanceCoversRedemption(contractsCache.simToken, msg.sender, _SIMamount);\\n\\n        totals.totalSIMSupplyAtStart = getEntireSystemDebt();\\n        // Confirm redeemer's balance is less than total SIM supply\\n        assert(contractsCache.simToken.balanceOf(msg.sender) <= totals.totalSIMSupplyAtStart);\\n\\n        totals.remainingSIM = _SIMamount;\\n        address currentBorrower;\\n\\n        if (_isValidFirstRedemptionHint(contractsCache.sortedTroves, _firstRedemptionHint, totals.price)) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = contractsCache.sortedTroves.getLast();\\n            // Find the first trove with ICR >= MCR\\n            while (currentBorrower != address(0) && getCurrentICR(currentBorrower, totals.price) < MCR) {\\n                currentBorrower = contractsCache.sortedTroves.getPrev(currentBorrower);\\n            }\\n        }\\n\\n        // Loop through the Troves starting from the one with lowest collateral ratio until _amount of SIM is exchanged for collateral\\n        if (_maxIterations == 0) { _maxIterations = type(uint).max; }\\n        while (currentBorrower != address(0) && totals.remainingSIM > 0 && _maxIterations > 0) {\\n            _maxIterations--;\\n            // Save the address of the Trove preceding the current one, before potentially modifying the list\\n            address nextUserToCheck = contractsCache.sortedTroves.getPrev(currentBorrower);\\n\\n            _applyPendingRewards(contractsCache.activePool, contractsCache.defaultPool, currentBorrower);\\n\\n            SingleRedemptionValues memory singleRedemption = _redeemCollateralFromTrove(\\n                contractsCache,\\n                currentBorrower,\\n                totals.remainingSIM,\\n                totals.price,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint,\\n                _partialRedemptionHintNICR\\n            );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n\\n            totals.totalSIMToRedeem  = totals.totalSIMToRedeem + singleRedemption.SIMLot;\\n            totals.totalWSTETHDrawn = totals.totalWSTETHDrawn + singleRedemption.WSTETHLot;\\n\\n            totals.remainingSIM = totals.remainingSIM - singleRedemption.SIMLot;\\n            currentBorrower = nextUserToCheck;\\n        }\\n        require(totals.totalWSTETHDrawn > 0, \\\"TroveManager: Unable to redeem any amount\\\");\\n\\n        // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n        // Use the saved total SIM supply value, from before it was reduced by the redemption.\\n        _updateBaseRateFromRedemption(totals.totalWSTETHDrawn, totals.price, totals.totalSIMSupplyAtStart);\\n\\n        // Calculate the WSTETH fee\\n        totals.WSTETHFee = _getRedemptionFee(totals.totalWSTETHDrawn);\\n\\n        _requireUserAcceptsFee(totals.WSTETHFee, totals.totalWSTETHDrawn, _maxFeePercentage);\\n\\n        // Send the WSTETH fee to the VeDistributor contract\\n        contractsCache.activePool.sendWSTETH(wstETHVeDistributor, totals.WSTETHFee);\\n        IVeDistributor(wstETHVeDistributor).checkpoint();\\n\\n        totals.WSTETHToSendToRedeemer = totals.totalWSTETHDrawn - totals.WSTETHFee;\\n\\n        emit Redemption(_SIMamount, totals.totalSIMToRedeem, totals.totalWSTETHDrawn, totals.WSTETHFee);\\n\\n        // Burn the total SIM that is cancelled with debt, and send the redeemed WSTETH to msg.sender\\n        contractsCache.simToken.burn(msg.sender, totals.totalSIMToRedeem);\\n        // Update Active Pool SIM, and send WSTETH to account\\n        contractsCache.activePool.decreaseSIMDebt(totals.totalSIMToRedeem);\\n        contractsCache.activePool.sendWSTETH(msg.sender, totals.WSTETHToSendToRedeemer);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    // Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view override returns (uint) {\\n        (uint currentWSTETH, uint currentSIMDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint NICR = LiquityMath._computeNominalCR(currentWSTETH, currentSIMDebt);\\n        return NICR;\\n    }\\n\\n    // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(address _borrower, uint _price) public view override returns (uint) {\\n        (uint currentWSTETH, uint currentSIMDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint ICR = LiquityMath._computeCR(currentWSTETH, currentSIMDebt, _price);\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(address _borrower) internal view returns (uint, uint) {\\n        uint pendingWSTETHReward = getPendingWSTETHReward(_borrower);\\n        uint pendingSIMDebtReward = getPendingSIMDebtReward(_borrower);\\n\\n        uint currentWSTETH = Troves[_borrower].coll + pendingWSTETHReward;\\n        uint currentSIMDebt = Troves[_borrower].debt + pendingSIMDebtReward;\\n\\n        return (currentWSTETH, currentSIMDebt);\\n    }\\n\\n    function applyPendingRewards(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(IActivePool _activePool, IDefaultPool _defaultPool, address _borrower) internal {\\n        if (hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint pendingWSTETHReward = getPendingWSTETHReward(_borrower);\\n            uint pendingSIMDebtReward = getPendingSIMDebtReward(_borrower);\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll + pendingWSTETHReward;\\n            Troves[_borrower].debt = Troves[_borrower].debt + pendingSIMDebtReward;\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(_activePool, _defaultPool, pendingSIMDebtReward, pendingWSTETHReward);\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                uint8(TroveManagerOperation.applyPendingRewards)\\n            );\\n        }\\n    }\\n\\n    // Update borrower's snapshots of L_WSTETH and L_SIMDebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n       return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].WSTETH = L_WSTETH;\\n        rewardSnapshots[_borrower].SIMDebt = L_SIMDebt;\\n        emit TroveSnapshotsUpdated(L_WSTETH, L_SIMDebt);\\n    }\\n\\n    // Get the borrower's pending accumulated WSTETH reward, earned by their stake\\n    function getPendingWSTETHReward(address _borrower) public view override returns (uint) {\\n        uint snapshotWSTETH = rewardSnapshots[_borrower].WSTETH;\\n        uint rewardPerUnitStaked = L_WSTETH - snapshotWSTETH;\\n\\n        if ( rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) { return 0; }\\n\\n        uint stake = Troves[_borrower].stake;\\n\\n        uint pendingWSTETHReward = stake * rewardPerUnitStaked / DECIMAL_PRECISION;\\n\\n        return pendingWSTETHReward;\\n    }\\n    \\n    // Get the borrower's pending accumulated SIM reward, earned by their stake\\n    function getPendingSIMDebtReward(address _borrower) public view override returns (uint) {\\n        uint snapshotSIMDebt = rewardSnapshots[_borrower].SIMDebt;\\n        uint rewardPerUnitStaked = L_SIMDebt - snapshotSIMDebt;\\n\\n        if ( rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) { return 0; }\\n\\n        uint stake =  Troves[_borrower].stake;\\n\\n        uint pendingSIMDebtReward = stake * rewardPerUnitStaked / DECIMAL_PRECISION;\\n\\n        return pendingSIMDebtReward;\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view override returns (bool) {\\n        /*\\n        * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n        * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n        * pending rewards\\n        */\\n        if (Troves[_borrower].status != Status.active) {return false;}\\n       \\n        return (rewardSnapshots[_borrower].WSTETH < L_WSTETH);\\n    }\\n\\n    // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (uint debt, uint coll, uint pendingSIMDebtReward, uint pendingWSTETHReward)\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingSIMDebtReward = getPendingSIMDebtReward(_borrower);\\n        pendingWSTETHReward = getPendingWSTETHReward(_borrower);\\n\\n        debt = debt + pendingSIMDebtReward;\\n        coll = coll + pendingWSTETHReward;\\n    }\\n\\n    function removeStake(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes - stake;\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function updateStakeAndTotalStakes(address _borrower) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(address _borrower) internal returns (uint) {\\n        uint newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes - oldStake + newStake;\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint _coll) internal view returns (uint) {\\n        uint stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n            * The following assert() holds true because:\\n            * - The system always contains >= 1 trove\\n            * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n            * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n            */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll * totalStakesSnapshot / totalCollateralSnapshot;\\n        }\\n        return stake;\\n    }\\n\\n    function _redistributeDebtAndColl(IActivePool _activePool, IDefaultPool _defaultPool, uint _debt, uint _coll) internal {\\n        if (_debt == 0) { return; }\\n\\n        /*\\n        * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n        * error correction, to keep the cumulative error low in the running totals L_WSTETH and L_SIMDebt:\\n        *\\n        * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n        * function was called.\\n        * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n        * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n        * 4) Store these errors for use in the next correction when this function is called.\\n        * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n        */\\n        uint WSTETHNumerator = _coll * DECIMAL_PRECISION + lastWSTETHError_Redistribution;\\n        uint SIMDebtNumerator = _debt * DECIMAL_PRECISION + lastSIMDebtError_Redistribution;\\n\\n        // Get the per-unit-staked terms\\n        uint WSTETHRewardPerUnitStaked = WSTETHNumerator / totalStakes;\\n        uint SIMDebtRewardPerUnitStaked = SIMDebtNumerator / totalStakes;\\n\\n        lastWSTETHError_Redistribution = WSTETHNumerator - WSTETHRewardPerUnitStaked * totalStakes;\\n        lastSIMDebtError_Redistribution = SIMDebtNumerator - SIMDebtRewardPerUnitStaked * totalStakes;\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_WSTETH = L_WSTETH + WSTETHRewardPerUnitStaked;\\n        L_SIMDebt = L_SIMDebt + SIMDebtRewardPerUnitStaked;\\n\\n        emit LTermsUpdated(L_WSTETH, L_SIMDebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseSIMDebt(_debt);\\n        _defaultPool.increaseSIMDebt(_debt);\\n        _activePool.sendWSTETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(closedStatus != Status.nonExistent && closedStatus != Status.active);\\n\\n        uint TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].WSTETH = 0;\\n        rewardSnapshots[_borrower].SIMDebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /*\\n    * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n    * Used in a liquidation sequence.\\n    *\\n    * The calculation excludes a portion of collateral that is in the ActivePool:\\n    *\\n    * the total WSTETH gas compensation from the liquidation sequence\\n    *\\n    * The WSTETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n    */\\n    function _updateSystemSnapshots_excludeCollRemainder(IActivePool _activePool, uint _collRemainder) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint activeColl = _activePool.getWSTETH();\\n        uint liquidatedColl = defaultPool.getWSTETH();\\n        totalCollateralSnapshot = activeColl - _collRemainder + liquidatedColl;\\n\\n        emit SystemSnapshotsUpdated(totalStakesSnapshot, totalCollateralSnapshot);\\n    }\\n\\n    // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(address _borrower) external override returns (uint index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(address _borrower) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum SIM\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 SIM dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length - 1);\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    /*\\n    * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n    * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n    */\\n    function _removeTroveOwner(address _borrower, uint TroveOwnersArrayLength) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(troveStatus != Status.nonExistent && troveStatus != Status.active);\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint length = TroveOwnersArrayLength;\\n        uint idxLast = length - 1;\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint _price) external view override returns (uint) {\\n        return _getTCR(_price);\\n    }\\n\\n    function checkRecoveryMode(uint _price) external view override returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an WSTETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint _entireSystemColl,\\n        uint _entireSystemDebt,\\n        uint _price\\n    )\\n        internal\\n        pure\\n    returns (bool)\\n    {\\n        uint TCR = LiquityMath._computeCR(_entireSystemColl, _entireSystemDebt, _price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    // --- Redemption fee functions ---\\n\\n    /*\\n    * This function has two impacts on the baseRate state variable:\\n    * 1) decays the baseRate based on time passed since last redemption or SIM borrowing operation.\\n    * then,\\n    * 2) increases the baseRate based on the amount redeemed, as a proportion of total supply\\n    */\\n    function _updateBaseRateFromRedemption(uint _WSTETHDrawn,  uint _price, uint _totalSIMSupply) internal returns (uint) {\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n\\n        /* Convert the drawn WSTETH back to SIM at face value rate (1 SIM:1 USD), in order to get\\n        * the fraction of total supply that was redeemed at face value. */\\n        uint redeemedSIMFraction = _WSTETHDrawn * _price / _totalSIMSupply;\\n\\n        uint newBaseRate = decayedBaseRate + redeemedSIMFraction / BETA;\\n        newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n        //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n        assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n        // Update the baseRate state variable\\n        baseRate = newBaseRate;\\n        emit BaseRateUpdated(newBaseRate);\\n        \\n        _updateLastFeeOpTime();\\n\\n        return newBaseRate;\\n    }\\n\\n    function getRedemptionRate() public view override returns (uint) {\\n        return _calcRedemptionRate(baseRate);\\n    }\\n\\n    function getRedemptionRateWithDecay() public view override returns (uint) {\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n        return LiquityMath._min(\\n            REDEMPTION_FEE_FLOOR + _baseRate,\\n            DECIMAL_PRECISION // cap at a maximum of 100%\\n        );\\n    }\\n\\n    function _getRedemptionFee(uint _WSTETHDrawn) internal view returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRate(), _WSTETHDrawn);\\n    }\\n\\n    function getRedemptionFeeWithDecay(uint _WSTETHDrawn) external view override returns (uint) {\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(), _WSTETHDrawn);\\n    }\\n\\n    function _calcRedemptionFee(uint _redemptionRate, uint _WSTETHDrawn) internal pure returns (uint) {\\n        uint redemptionFee = _redemptionRate * _WSTETHDrawn / DECIMAL_PRECISION;\\n        require(redemptionFee < _WSTETHDrawn, \\\"TroveManager: Fee would eat up all returned collateral\\\");\\n        return redemptionFee;\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    function getBorrowingRate() public view override returns (uint) {\\n        return _calcBorrowingRate(baseRate);\\n    }\\n\\n    function getBorrowingRateWithDecay() public view override returns (uint) {\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcBorrowingRate(uint _baseRate) internal pure returns (uint) {\\n        return LiquityMath._min(\\n            BORROWING_FEE_FLOOR + _baseRate,\\n            MAX_BORROWING_FEE\\n        );\\n    }\\n\\n    function getBorrowingFee(uint _SIMDebt) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRate(), _SIMDebt);\\n    }\\n\\n    function getBorrowingFeeWithDecay(uint _SIMDebt) external view override returns (uint) {\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _SIMDebt);\\n    }\\n\\n    function _calcBorrowingFee(uint _borrowingRate, uint _SIMDebt) internal pure returns (uint) {\\n        return _borrowingRate * _SIMDebt / DECIMAL_PRECISION;\\n    }\\n\\n\\n    // Updates the baseRate state variable based on time elapsed since the last redemption or SIM borrowing operation.\\n    function decayBaseRateFromBorrowing() external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        uint decayedBaseRate = _calcDecayedBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION);  // The baseRate can decay to 0\\n\\n        baseRate = decayedBaseRate;\\n        emit BaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastFeeOpTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastFeeOpTime() internal {\\n        uint timePassed = block.timestamp - lastFeeOperationTime;\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastFeeOperationTime = block.timestamp;\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    function _calcDecayedBaseRate() internal view returns (uint) {\\n        uint minutesPassed = _minutesPassedSinceLastFeeOp();\\n        uint decayFactor = LiquityMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n\\n        return baseRate * decayFactor / DECIMAL_PRECISION;\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint) {\\n        return (block.timestamp - lastFeeOperationTime) / SECONDS_IN_ONE_MINUTE;\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(msg.sender == borrowerOperationsAddress, \\\"TroveManager: Caller is not the BorrowerOperations contract\\\");\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(Troves[_borrower].status == Status.active, \\\"TroveManager: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireSIMBalanceCoversRedemption(ISIMToken _simToken, address _redeemer, uint _amount) internal view {\\n        require(_simToken.balanceOf(_redeemer) >= _amount, \\\"TroveManager: Requested redemption amount must be <= user's SIM token balance\\\");\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(uint TroveOwnersArrayLength) internal view {\\n        require (TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1, \\\"TroveManager: Only one trove in the system\\\");\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint _price) internal view {\\n        require(_getTCR(_price) >= MCR, \\\"TroveManager: Cannot redeem when TCR < MCR\\\");\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint systemDeploymentTime = shadyToken.getDeploymentStartTime();\\n        require(block.timestamp >= systemDeploymentTime + BOOTSTRAP_PERIOD, \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\");\\n    }\\n\\n    function _requireValidMaxFeePercentage(uint _maxFeePercentage) internal pure {\\n        require(_maxFeePercentage >= REDEMPTION_FEE_FLOOR && _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\");\\n    }\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view override returns (uint) {\\n        return uint(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view override returns (uint) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view override returns (uint) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view override returns (uint) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint _num) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(address _borrower, uint _collIncrease) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll + _collIncrease;\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(address _borrower, uint _collDecrease) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newColl = Troves[_borrower].coll - _collDecrease;\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(address _borrower, uint _debtIncrease) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt + _debtIncrease;\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(address _borrower, uint _debtDecrease) external override returns (uint) {\\n        _requireCallerIsBorrowerOperations();\\n        uint newDebt = Troves[_borrower].debt - _debtDecrease;\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x8c63e5e924c2277016e8d8b30fc43e45ecc21a571ffe17029820707b1744fe7f\",\"license\":\"MIT\"},\"contracts/VeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IVe.sol\\\";\\nimport \\\"./interfaces/IVeDistributor.sol\\\";\\nimport \\\"./dependencies/ControllableV3.sol\\\";\\n\\n/// @title Contract for distributing rewards to ve holders.\\n///        Rewards will be staked to the veNFT without extending lock period.\\n///        Based on Solidly contract.\\n/// @author belbix\\ncontract VeDistributor is ControllableV3, IVeDistributor {\\n  using SafeERC20 for IERC20;\\n\\n  // for contract internal purposes, don't need to store in the interface\\n  struct ClaimCalculationResult {\\n    uint toDistribute;\\n    uint userEpoch;\\n    uint weekCursor;\\n    uint maxUserEpoch;\\n    bool success;\\n  }\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant VE_DIST_VERSION = \\\"1.0.0\\\";\\n  uint internal constant WEEK = 7 * 86400;\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  /// @dev Voting escrow token address\\n  IVe public ve;\\n  /// @dev Token for ve rewards\\n  address public override rewardToken;\\n\\n  // --- CHECKPOINT\\n\\n  /// @dev Cursor for the current epoch\\n  uint public activePeriod;\\n  /// @dev Tokens per week stored on checkpoint call. Predefined array size = max weeks size\\n  uint[1000000000000000] public tokensPerWeek;\\n  /// @dev Ve supply checkpoints. Predefined array size = max weeks size\\n  uint[1000000000000000] public veSupply;\\n  /// @dev Ve supply checkpoint time cursor\\n  uint public timeCursor;\\n  /// @dev Token balance updated on checkpoint/claim\\n  uint public tokenLastBalance;\\n  /// @dev Last checkpoint time\\n  uint public lastTokenTime;\\n\\n  // --- CLAIM\\n\\n  /// @dev Timestamp when this contract was inited\\n  uint public startTime;\\n  /// @dev veID => week cursor stored on the claim action\\n  mapping(uint => uint) public timeCursorOf;\\n  /// @dev veID => epoch stored on the claim action\\n  mapping(uint => uint) public userEpochOf;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CheckpointToken(\\n    uint time,\\n    uint tokens\\n  );\\n\\n  event Claimed(\\n    uint tokenId,\\n    uint amount,\\n    uint claimEpoch,\\n    uint maxEpoch\\n  );\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @dev Proxy initialization. Call it after contract deploy.\\n  function init(\\n    address controller_,\\n    address _ve,\\n    address _rewardToken\\n  ) external initializer {\\n    __Controllable_init(controller_);\\n    _requireERC20(_rewardToken);\\n    _requireInterface(_ve, InterfaceIds.I_VE);\\n\\n    uint _t = block.timestamp / WEEK * WEEK;\\n    startTime = _t;\\n    lastTokenTime = _t;\\n    timeCursor = _t;\\n\\n    rewardToken = _rewardToken;\\n    ve = IVe(_ve);\\n\\n//    IERC20(_rewardToken).safeApprove(_ve, type(uint).max);\\n  }\\n\\n  // *************************************************************\\n  //                      CHECKPOINT\\n  // *************************************************************\\n\\n  function checkpoint() external override {\\n    uint _period = activePeriod;\\n    // only trigger if new week\\n    if (block.timestamp >= _period + 1 weeks) {\\n      // set new period rounded to weeks\\n      activePeriod = block.timestamp / 1 weeks * 1 weeks;\\n      // checkpoint token balance that was just minted in veDist\\n      _checkpointToken();\\n      // checkpoint supply\\n      _checkpointTotalSupply();\\n    }\\n  }\\n\\n  /// @dev Update tokensPerWeek value\\n  function _checkpointToken() internal {\\n    uint tokenBalance = IERC20(rewardToken).balanceOf(address(this));\\n    uint toDistribute = tokenBalance - tokenLastBalance;\\n    tokenLastBalance = tokenBalance;\\n\\n    uint t = lastTokenTime;\\n    uint sinceLast = block.timestamp - t;\\n    lastTokenTime = block.timestamp;\\n    uint thisWeek = t / WEEK * WEEK;\\n    uint nextWeek = 0;\\n\\n    // checkpoint should be called at least once per 20 weeks\\n    for (uint i = 0; i < 20; i++) {\\n      nextWeek = thisWeek + WEEK;\\n      if (block.timestamp < nextWeek) {\\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, block.timestamp, t, sinceLast);\\n        break;\\n      } else {\\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, nextWeek, t, sinceLast);\\n      }\\n      t = nextWeek;\\n      thisWeek = nextWeek;\\n    }\\n    emit CheckpointToken(block.timestamp, toDistribute);\\n  }\\n\\n  /// @dev Adjust value based on time since last update\\n  function adjustToDistribute(\\n    uint toDistribute,\\n    uint t0,\\n    uint t1,\\n    uint sinceLast\\n  ) public pure returns (uint) {\\n    if (t0 <= t1 || t0 - t1 == 0 || sinceLast == 0) {\\n      return toDistribute;\\n    }\\n    return toDistribute * (t0 - t1) / sinceLast;\\n  }\\n\\n  /// @dev Search in the loop given timestamp through ve points history.\\n  ///      Return minimal possible epoch.\\n  function findTimestampEpoch(IVe _ve, uint _timestamp) public view returns (uint) {\\n    uint _min = 0;\\n    uint _max = _ve.epoch();\\n    for (uint i = 0; i < 128; i++) {\\n      if (_min >= _max) break;\\n      uint _mid = (_min + _max + 2) / 2;\\n      IVe.Point memory pt = _ve.pointHistory(_mid);\\n      if (pt.ts <= _timestamp) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  /// @dev Search in the loop given timestamp through ve user points history.\\n  ///      Return minimal possible epoch.\\n  function findTimestampUserEpoch(\\n    IVe _ve,\\n    uint tokenId,\\n    uint _timestamp,\\n    uint maxUserEpoch\\n  ) public view returns (uint) {\\n    uint _min = 0;\\n    uint _max = maxUserEpoch;\\n    for (uint i = 0; i < 128; i++) {\\n      if (_min >= _max) break;\\n      uint _mid = (_min + _max + 2) / 2;\\n      IVe.Point memory pt = _ve.userPointHistory(tokenId, _mid);\\n      if (pt.ts <= _timestamp) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  /// @dev Return ve power at given timestamp\\n  function veForAt(uint _tokenId, uint _timestamp) external view returns (uint) {\\n    IVe _ve = ve;\\n    uint maxUserEpoch = _ve.userPointEpoch(_tokenId);\\n    uint epoch = findTimestampUserEpoch(_ve, _tokenId, _timestamp, maxUserEpoch);\\n    IVe.Point memory pt = _ve.userPointHistory(_tokenId, epoch);\\n    return uint(int256(_positiveInt128(pt.bias - pt.slope * (int128(int256(_timestamp - pt.ts))))));\\n  }\\n\\n  /// @dev Call ve checkpoint and write veSupply at the current timeCursor\\n  function checkpointTotalSupply() external override {\\n    _checkpointTotalSupply();\\n  }\\n\\n  function _checkpointTotalSupply() internal {\\n    IVe _ve = ve;\\n    uint t = timeCursor;\\n    uint roundedTimestamp = block.timestamp / WEEK * WEEK;\\n    _ve.checkpoint();\\n\\n    // assume will be called more frequently than 20 weeks\\n    for (uint i = 0; i < 20; i++) {\\n      if (t > roundedTimestamp) {\\n        break;\\n      } else {\\n        uint epoch = findTimestampEpoch(_ve, t);\\n        IVe.Point memory pt = _ve.pointHistory(epoch);\\n        veSupply[t] = adjustVeSupply(t, pt.ts, pt.bias, pt.slope);\\n      }\\n      t += WEEK;\\n    }\\n    timeCursor = t;\\n  }\\n\\n  /// @dev Calculate ve supply based on bias and slop for the given timestamp\\n  function adjustVeSupply(uint t, uint ptTs, int128 ptBias, int128 ptSlope) public pure returns (uint) {\\n    if (t < ptTs) {\\n      return 0;\\n    }\\n    int128 dt = int128(int256(t - ptTs));\\n    if (ptBias < ptSlope * dt) {\\n      return 0;\\n    }\\n    return uint(int256(_positiveInt128(ptBias - ptSlope * dt)));\\n  }\\n\\n  // *************************************************************\\n  //                      CLAIM\\n  // *************************************************************\\n\\n  /// @dev Return available to claim earned amount\\n  function claimable(uint _tokenId) external view returns (uint) {\\n    uint _lastTokenTime = lastTokenTime / WEEK * WEEK;\\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, ve, _lastTokenTime);\\n    return result.toDistribute;\\n  }\\n\\n  /// @dev Claim rewards for given veID\\n  function claim(uint _tokenId) external override returns (uint) {\\n    IVe _ve = ve;\\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n    uint _lastTokenTime = lastTokenTime;\\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n    uint amount = _claim(_tokenId, _ve, _lastTokenTime);\\n    if (amount != 0) {\\n      IERC20(rewardToken).safeTransfer(IERC721(address(_ve)).ownerOf(_tokenId), amount);\\n//      _ve.increaseAmount(rewardToken, _tokenId, amount);\\n      tokenLastBalance -= amount;\\n    }\\n    return amount;\\n  }\\n\\n  /// @dev Claim rewards for given veIDs\\n  function claimMany(uint[] memory _tokenIds) external returns (bool) {\\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n    uint _lastTokenTime = lastTokenTime;\\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n    IVe _votingEscrow = ve;\\n    uint total = 0;\\n\\n    for (uint i = 0; i < _tokenIds.length; i++) {\\n      uint _tokenId = _tokenIds[i];\\n      if (_tokenId == 0) break;\\n      uint amount = _claim(_tokenId, _votingEscrow, _lastTokenTime);\\n      if (amount != 0) {\\n        IERC20(rewardToken).safeTransfer(IERC721(address(_votingEscrow)).ownerOf(_tokenId), amount);\\n//        _votingEscrow.increaseAmount(rewardToken, _tokenId, amount);\\n        total += amount;\\n      }\\n    }\\n    if (total != 0) {\\n      tokenLastBalance -= total;\\n    }\\n\\n    return true;\\n  }\\n\\n  function _claim(uint _tokenId, IVe _ve, uint _lastTokenTime) internal returns (uint) {\\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, _ve, _lastTokenTime);\\n    if (result.success) {\\n      userEpochOf[_tokenId] = result.userEpoch;\\n      timeCursorOf[_tokenId] = result.weekCursor;\\n      emit Claimed(_tokenId, result.toDistribute, result.userEpoch, result.maxUserEpoch);\\n    }\\n    return result.toDistribute;\\n  }\\n\\n  function _calculateClaim(\\n    uint _tokenId,\\n    IVe _ve,\\n    uint _lastTokenTime\\n  ) internal view returns (ClaimCalculationResult memory) {\\n    uint userEpoch;\\n    uint maxUserEpoch = _ve.userPointEpoch(_tokenId);\\n    uint _startTime = startTime;\\n\\n    if (maxUserEpoch == 0) {\\n      return ClaimCalculationResult(0, 0, 0, 0, false);\\n    }\\n\\n    uint weekCursor = timeCursorOf[_tokenId];\\n\\n    if (weekCursor == 0) {\\n      userEpoch = findTimestampUserEpoch(_ve, _tokenId, _startTime, maxUserEpoch);\\n    } else {\\n      userEpoch = userEpochOf[_tokenId];\\n    }\\n\\n    if (userEpoch == 0) userEpoch = 1;\\n\\n    IVe.Point memory userPoint = _ve.userPointHistory(_tokenId, userEpoch);\\n    if (weekCursor == 0) {\\n      weekCursor = (userPoint.ts + WEEK - 1) / WEEK * WEEK;\\n    }\\n    if (weekCursor >= lastTokenTime) {\\n      return ClaimCalculationResult(0, 0, 0, 0, false);\\n    }\\n    if (weekCursor < _startTime) {\\n      weekCursor = _startTime;\\n    }\\n\\n    return calculateToDistribute(\\n      _tokenId,\\n      weekCursor,\\n      _lastTokenTime,\\n      userPoint,\\n      userEpoch,\\n      maxUserEpoch,\\n      _ve\\n    );\\n  }\\n\\n  function calculateToDistribute(\\n    uint _tokenId,\\n    uint weekCursor,\\n    uint _lastTokenTime,\\n    IVe.Point memory userPoint,\\n    uint userEpoch,\\n    uint maxUserEpoch,\\n    IVe _ve\\n  ) public view returns (ClaimCalculationResult memory) {\\n    IVe.Point memory oldUserPoint;\\n    uint toDistribute;\\n    for (uint i = 0; i < 50; i++) {\\n      if (weekCursor >= _lastTokenTime) {\\n        break;\\n      }\\n      if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\\n        userEpoch += 1;\\n        oldUserPoint = userPoint;\\n        if (userEpoch > maxUserEpoch) {\\n          userPoint = IVe.Point(0, 0, 0, 0);\\n        } else {\\n          userPoint = _ve.userPointHistory(_tokenId, userEpoch);\\n        }\\n      } else {\\n        int128 dt = int128(int256(weekCursor - oldUserPoint.ts));\\n        uint balanceOf = uint(int256(_positiveInt128(oldUserPoint.bias - dt * oldUserPoint.slope)));\\n        if (balanceOf == 0 && userEpoch > maxUserEpoch) {\\n          break;\\n        }\\n        toDistribute += balanceOf * tokensPerWeek[weekCursor] / veSupply[weekCursor];\\n        weekCursor += WEEK;\\n      }\\n    }\\n    return ClaimCalculationResult(\\n      toDistribute,\\n      Math.min(maxUserEpoch, userEpoch - 1),\\n      weekCursor,\\n      maxUserEpoch,\\n      true\\n    );\\n  }\\n\\n  function _positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  /// @dev Block timestamp rounded to weeks\\n  function timestamp() external view returns (uint) {\\n    return block.timestamp / WEEK * WEEK;\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_VE_DISTRIBUTOR || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x7afcd3dea25c3c4a8b25430e4709aece54144636973e83e28d45dce5b3462006\",\"license\":\"MIT\"},\"contracts/dependencies/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IBase.sol\\\";\\n\\n/* \\n* Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n* common functions. \\n*/\\ncontract Base is BaseMath, IBase {\\n    uint constant public _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint constant public MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint constant public CCR = 1500000000000000000; // 150%\\n\\n    // Amount of SIM to be locked in gas pool on opening troves\\n//    uint constant public SIM_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net SIM debt a trove must have\\n    uint constant public MIN_NET_DEBT = 1e18; //1800e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint constant public PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint constant public BORROWING_FEE_FLOOR = DECIMAL_PRECISION / 1000 * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt/* + SIM_GAS_COMPENSATION*/;\\n    }\\n\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt/* + SIM_GAS_COMPENSATION*/;\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(uint _entireColl) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWSTETH();\\n        uint liquidatedColl = defaultPool.getWSTETH();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getSIMDebt();\\n        uint closedDebt = defaultPool.getSIMDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n        uint feePercentage = _fee * DECIMAL_PRECISION / _amount;\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd7cf2fa10d9ddc2236b243d16b8ae22c9c8ec15aee73e4c9b4d3d4054c9ed604\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xfbd2340d208377996fc6305a28a939c849d7337e8fa1789e3130b73106de1d9f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     */\\n    function _checkContract(address account_) internal view {\\n        require(account_ != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account_) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6282e853a7b31ee8bbbb4008869300bf900f7f43610f5b4be9499d40549b207a\",\"license\":\"MIT\"},\"contracts/dependencies/ControllableV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./TetuERC165.sol\\\";\\nimport \\\"./InterfaceIds.sol\\\";\\nimport \\\"./SlotsLib.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"3.0.1\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  /// @dev Prevent implementation init\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\\n    require(IController(controller_).governance() != address(0), \\\"Zero governance\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) public override view returns (bool) {\\n    return _value == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) public override view returns (bool) {\\n    return IController(controller()).governance() == _value;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view returns (uint){\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view returns (address){\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n  /// @dev Gets a slot as bytes32\\n  function getSlot(uint slot) external view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe4cb568bfe305f68f3db6a20a5bb84e72266aecc349a97913503133c7f5b435a\",\"license\":\"MIT\"},\"contracts/dependencies/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n    /// @notice Version of the contract\\n    /// @dev Should be incremented when contract changed\\n    string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n    /// default notation:\\n    /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n    /// As type({Interface}).interfaceId can be changed,\\n    /// when some functions changed at the interface,\\n    /// so used hardcoded interface identifiers\\n\\n    bytes4 public constant I_VE = bytes4(keccak256(\\\"IVe\\\"));\\n    bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n    bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n    bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n    bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n}\\n\",\"keccak256\":\"0xd7f6aa4d6e73708fee00f96f0d4b3276ca1b164d3c12ede567c0736443115df2\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LiquityMath {\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x * y;\\n\\n        decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        // cap to avoid overflow\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        }\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll * NICR_PRECISION / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll * _price / _debt;\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb9ed155e8331948da867a6e089052dff0a667e25119ff602c6b88099f53b0ba\",\"license\":\"MIT\"},\"contracts/dependencies/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  // ************* ARRAY SETTERS *******************\\n\\n  /// @dev Sets a slot array at index with address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, address value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot array at index with uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets an array length\\n  function setLength(bytes32 slot, uint length) internal {\\n    assembly {\\n      sstore(slot, length)\\n    }\\n  }\\n\\n  /// @dev Pushes an address to the array\\n  function push(bytes32 slot, address value) internal {\\n    uint length = arrayLength(slot);\\n    setAt(slot, length, value);\\n    setLength(slot, length + 1);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x87400ece5c41c4e0106a48d66a063e8fe335dfb59ad108d7ccd71e0deb6889e6\",\"license\":\"MIT\"},\"contracts/dependencies/TetuERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf972813f3a255c8ab5afd2184a3cc5c68688de7836af374c74218b454233d325\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolSIMDebtUpdated(uint _SIMDebt);\\n    event ActivePoolWSTETHBalanceUpdated(uint _WSTETH);\\n\\n    // --- Functions ---\\n    function sendWSTETH(address _account, uint _amount) external;\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x43e7e6c53312584b369d356a350f2027530ad8c123cee37657b6f3d21cfcdfca\",\"license\":\"MIT\"},\"contracts/interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\n\\ninterface IBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x861429b40d61dfeedf3166fd9fabe1f2864a6e335784228ad83041f9c889d7fd\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ninterface ICollSurplusPool {\\n\\n    // --- Events ---\\n\\n    event WSTETHAddressChanged(address _newWSTETHAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _WSTETHAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWSTETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x8ec9e63e51efe61f20e4f3088f69dc2d16aece7bb651cd03be199cbcc50a49bf\",\"license\":\"MIT\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0x849ffde751c702df794cb2533a6401ae8b29c559fe23f9de76a64a60b66ab878\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IController {\\n\\n    // --- DEPENDENCY ADDRESSES\\n    function governance() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x15d57764f807b9fa17edbd6f0a4c8d5a1f27c5eef80ed8a2b04e031f4abb1428\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolSIMDebtUpdated(uint _SIMDebt);\\n    event DefaultPoolWSTETHBalanceUpdated(uint _WSTETH);\\n\\n    // --- Functions ---\\n    function sendWSTETHToActivePool(uint _amount) external;\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x6f5fa0dbd6ea671d127969b2b0c8369f5a32e917dac9fa2eb67aa23313036e9f\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    \\n    // --- Events ---\\n    \\n    event WSTETHBalanceUpdated(uint _newBalance);\\n    event SIMBalanceUpdated(uint _newBalance);\\n    event WSTETHAddressChanged(address _newWSTETHAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n    \\n    function getWSTETH() external view returns (uint);\\n\\n    function getSIMDebt() external view returns (uint);\\n\\n    function increaseSIMDebt(uint _amount) external;\\n\\n    function decreaseSIMDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x75d5870d6307794574684881915ae899ba46f514e523f8672912ef908a1d1d85\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPriceFeed {\\n\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n   \\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd48e100d585578b5eec065f625881aa4539745a125c8a7052481b75fbc934901\",\"license\":\"MIT\"},\"contracts/interfaces/ISHADYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ISHADYToken is IERC20, IERC20Permit {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address communityIssuanceAddress);\\n    event VeAddressSet(address veAddress);\\n    event LockupContractFactoryAddressSet(address lockupContractFactoryAddress);\\n\\n    // --- Functions ---\\n\\n    function sendToVe(address sender_, uint amount_) external;\\n\\n    function getDeploymentStartTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x63c2553eab3941bce864fb60d49dc71c46cc57f7ba23b9990597de3a9312d248\",\"license\":\"MIT\"},\"contracts/interfaces/ISIMToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ISIMToken is IERC20, IERC20Permit {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address troveManagerAddress);\\n    event StabilityPoolAddressChanged(address newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(address newBorrowerOperationsAddress);\\n    event LUSDTokenBalanceUpdated(address user, uint amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(address account_, uint256 amount_) external;\\n\\n    function sendToPool(address sender_, address poolAddress, uint256 amount_) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0x295a4dba127380ef6b9ca9a3b9cbb762d10d6288a82e569bbdb562315f45656b\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n    \\n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\\n\\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\\n\\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x79acb39627952e016fbf3ecd352a88bc662817f62f76357b6c737ee316949302\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/*\\n * The Stability Pool holds SIM tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its SIM debt gets offset with\\n * SIM in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of SIM tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a SIM loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WSTETH gain, as the WSTETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total SIM in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WSTETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- SHADY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An SHADY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued SHADY in proportion to the deposit as a share of total deposits. The SHADY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n\\n    // --- Events ---\\n    \\n    event StabilityPoolWSTETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolSIMBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event SIMTokenAddressChanged(address _newSIMTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(address indexed _frontEnd, uint _newFrontEndStake, address _depositor);\\n\\n    event WSTETHGainWithdrawn(address indexed _depositor, uint _WSTETH, uint _SIMLoss);\\n    event SHADYPaidToDepositor(address indexed _depositor, uint _SHADY);\\n    event SHADYPaidToFrontEnd(address indexed _frontEnd, uint _SHADY);\\n    event WSTETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other SIM contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _WSTETHAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _SIMTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (SHADY, WSTETH) to depositor\\n     * - Sends the tagged front end's accumulated SHADY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (SHADY, WSTETH) to depositor\\n     * - Sends the tagged front end's accumulated SHADY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WSTETH gain\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's SHADY gain to  depositor\\n     * - Sends all tagged front end's SHADY gain to the tagged front end\\n     * - Transfers the depositor's entire WSTETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWSTETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n//    function registerFrontEnd(uint _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the SIM contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WSTETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WSTETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WSTETH received from a self-destruct.\\n     */\\n    function getWSTETH() external view returns (uint);\\n\\n    /*\\n     * Returns SIM held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalSIMDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WSTETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWSTETHGain(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Calculate the SHADY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorSHADYGain(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Return the SHADY gain earned by the front end.\\n     */\\n//    function getFrontEndSHADYGain(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedSIMDeposit(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n//    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for WSTETH received\\n     * receive() external payable;\\n     */\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x0e50659b56f98d22a2f9b9e373f1c4bee798060f6ca989ecea823628d39d99fb\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./ISIMToken.sol\\\";\\nimport \\\"./ISHADYToken.sol\\\";\\nimport \\\"./IVe.sol\\\";\\n\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBase {\\n    \\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SIMTokenAddressChanged(address _newSIMTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n//    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event SHADYTokenAddressChanged(address _shadyTokenAddress);\\n    event WSTETHVeDistibutorAddressChanged(address _shadyStakingAddress);\\n\\n    event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation/*, uint _SIMGasCompensation*/);\\n    event Redemption(uint _attemptedSIMAmount, uint _actualSIMAmount, uint _WSTETHSent, uint _WSTETHFee);\\n    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\\n    event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);\\n    event LTermsUpdated(uint _L_WSTETH, uint _L_SIMDebt);\\n    event TroveSnapshotsUpdated(uint _L_WSTETH, uint _L_SIMDebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n//        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _simTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _shadyTokenAddress,\\n        address _veAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n    function simToken() external view returns (ISIMToken);\\n    function shadyToken() external view returns (ISHADYToken);\\n    function wstETHVeDistributor() external view returns (address);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(uint _index) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _SIMAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(address _borrower) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWSTETHReward(address _borrower) external view returns (uint);\\n\\n    function getPendingSIMDebtReward(address _borrower) external view returns (uint);\\n\\n     function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(address _borrower) external view returns (\\n        uint debt,\\n        uint coll,\\n        uint pendingSIMDebtReward,\\n        uint pendingWSTETHReward\\n    );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint);\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(uint _WSTETHDrawn) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint SIMDebt) external view returns (uint);\\n    function getBorrowingFeeWithDecay(uint _SIMDebt) external view returns (uint);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n    \\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);\\n\\n    function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint); \\n\\n    function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint); \\n\\n    function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint); \\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5437efa603b786cef94bc696b61ae9710570ea8feee29603f2e5efe83f9eab91\",\"license\":\"MIT\"},\"contracts/interfaces/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n\\n//    function increaseF_WSTETH(uint _WSTETHFee) external;\\n\\n//    function increaseF_SIM(uint _SIMFee) external;\\n\\n    function lockedAmounts(uint veId, address stakingToken) external view returns (uint);\\n\\n    function lockedDerivedAmount(uint veId) external view returns (uint);\\n\\n    function lockedEnd(uint veId) external view returns (uint);\\n\\n    function tokens(uint idx) external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(address _token, uint _value, uint _lockDuration, address _to) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function increaseAmount(address _token, uint _tokenId, uint _value) external;\\n\\n    function totalSupplyAt(uint _block) external view returns (uint);\\n}\",\"keccak256\":\"0x925d70778879890862a50bff1f150b79ad160ab7fd5549addf748b978b5628d8\",\"license\":\"MIT\"},\"contracts/interfaces/IVeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IVeDistributor {\\n\\n  function rewardToken() external view returns (address);\\n\\n  function checkpoint() external;\\n\\n  function checkpointTotalSupply() external;\\n\\n  function claim(uint _tokenId) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0xc2b9b9f77d6419a78de1621eb1eb0bad42400ce04ce2de2e5fa842c976748472\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61532d80620000856000396000f3fe608060405234801561001057600080fd5b50600436106104655760003560e01c8063795d26c311610257578063bf9befb111610146578063d5b35635116100c3578063f2fde38b11610087578063f2fde38b146109f0578063f36b242514610a03578063f5ecd2c214610a0b578063f92d34331461058c578063fe2ba84814610a1e57600080fd5b8063d5b3563514610985578063d66a255314610998578063d9a72444146109c1578063e2135da2146109d4578063e2ac77b0146109dd57600080fd5b8063cda775f91161010a578063cda775f914610930578063d293c71014610943578063d380a37c14610956578063d3d6f8431461095f578063d540f2501461097257600080fd5b8063bf9befb1146108f3578063c35bc550146108fc578063c52861f214610906578063c7b554811461090e578063cbd138ae1461091d57600080fd5b8063a20baee6116101d4578063b7f8cf9b11610198578063b7f8cf9b1461087e578063b82f263d14610891578063b91af97c146108a4578063bcd37526146108d7578063bda0760e146108ea57600080fd5b8063a20baee614610546578063a3f4df7e14610817578063ae9187541461084f578063b0d8e18114610862578063b556eb661461087557600080fd5b8063887105d31161021b578063887105d3146107cf5780638da5cb5b146107d757806391894ebc146107e857806396d711ff146107fb5780639976cf451461080457600080fd5b8063795d26c31461078f5780637f7dde4a14610797578063807d138d146107aa57806380f203a3146107b357806382fe3eb9146107bc57600080fd5b80634870dd9a11610373578063653d46e7116102f057806372423c17116102b457806372423c171461074757806372fe25aa14610546578063741bef1a1461075a578063756b253e1461076d578063794e57241461078057600080fd5b8063653d46e7146106b857806366ca4a21146106cb5780636c37a4af146106d35780636ef64338146106e6578063715018a61461073f57600080fd5b80635d6b480f116103375780635d6b480f146106565780635dba4c4a1461066957806361ec893d14610671578063631203b01461067957806364cee2601461068c57600080fd5b80634870dd9a1461060157806349eefeee146106095780634e443d9e1461061157806356061388146106345780635733d58f1461064757600080fd5b80631e8b1c2b116104015780632b11551a116103c55780632b11551a146105945780632f8655681461059c5780633cc74225146105af578063477d66cf146105c2578063480cd578146105d557600080fd5b80631e8b1c2b146105555780631f68f20a1461056857806321e3780114610571578063240926691461058457806328d28b5b1461058c57600080fd5b8063048c661d1461046a578063071a7541146104935780630b076557146104a957806312610e92146104be57806312d954e3146104d157806315d549f1146104e45780631673c79a146104f757806318f2817a146105335780631bf4355514610546575b600080fd5b60055461047d906001600160a01b031681565b60405161048a9190614d7b565b60405180910390f35b61049b600281565b60405190815260200161048a565b6104bc6104b7366004614db4565b610a31565b005b61049b6104cc366004614dd1565b610a59565b61049b6104df366004614db4565b610aac565b61049b6104f2366004614db4565b610b6a565b61051e610505366004614db4565b6013602052600090815260409020805460019091015482565b6040805192835260208301919091520161048a565b61049b610541366004614db4565b610b8c565b61049b670de0b6b3a764000081565b6104bc610563366004614e13565b610b9f565b61049b600b5481565b61049b61057f366004614db4565b610f2e565b61049b610f5e565b61049b610f7f565b61049b610f93565b6104bc6105aa366004614db4565b610fa5565b60015461047d906001600160a01b031681565b61049b6105d0366004614ed8565b611011565b61049b6105e3366004614db4565b6001600160a01b03166000908152600d602052604090206001015490565b61049b60c881565b60145461049b565b61062461061f366004614ed8565b611024565b604051901515815260200161048a565b60085461047d906001600160a01b031681565b61049b6714d1120d7b16000081565b6104bc610664366004614dd1565b61102f565b6104bc611087565b61049b603c81565b61049b610687366004614ed8565b6110f3565b61049b61069a366004614db4565b6001600160a01b03166000908152600d602052604090206002015490565b6104bc6106c6366004614ed8565b611100565b61049b611456565b6104bc6106e1366004614ef1565b611468565b61072e6106f4366004614db4565b600d6020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b60405161048a959493929190614fd3565b6104bc611797565b61049b610755366004614dd1565b6117ab565b60025461047d906001600160a01b031681565b61047d61077b366004614ed8565b611803565b61049b670f43fc2c04ee000081565b61049b61182d565b60005461047d906001600160a01b031681565b61049b600f5481565b61049b60125481565b6104bc6107ca366004614db4565b611929565b61049b61193a565b6003546001600160a01b031661047d565b60095461047d906001600160a01b031681565b61049b60105481565b61049b610812366004614dd1565b6119ff565b6108426040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b60405161048a9190615027565b600a5461047d906001600160a01b031681565b61049b610870366004614db4565b611a2d565b61049b60165481565b60045461047d906001600160a01b031681565b61049b61089f366004614ed8565b611a54565b6108b76108b2366004614db4565b611a5f565b60408051948552602085019390935291830152606082015260800161048a565b6104bc6108e5366004615075565b611ab7565b61049b60155481565b61049b600e5481565b61049b62278d0081565b61049b612228565b61049b670ddd4b8c6c7d70d881565b6104bc61092b366004614db4565b61223a565b60065461047d906001600160a01b031681565b61049b610951366004614dd1565b61224d565b61049b600c5481565b61049b61096d366004614dd1565b61226c565b60075461047d906001600160a01b031681565b61049b610993366004614ed8565b61229d565b61049b6109a6366004614db4565b6001600160a01b03166000908152600d602052604090205490565b61047d6109cf366004614ed8565b6122b0565b61049b60115481565b6106246109eb366004614db4565b6122e0565b6104bc6109fe366004614db4565b612343565b61049b6123b9565b61049b610a19366004614db4565b6123c6565b6104bc610a2c366004614db4565b6123ef565b610a39612400565b600054600154610a56916001600160a01b03908116911683612480565b50565b6000610a63612400565b6001600160a01b0383166000908152600d6020526040812054610a879084906150f9565b6001600160a01b0385166000908152600d602052604090208190559150505b92915050565b6001600160a01b0381166000908152601360205260408120600101546012548290610ad89083906150f9565b9050801580610b17575060016001600160a01b0385166000908152600d602052604090206003015460ff166004811115610b1457610b14614fbd565b14155b15610b26575060009392505050565b6001600160a01b0384166000908152600d602052604081206002015490670de0b6b3a7640000610b56848461510c565b610b609190615139565b9695505050505050565b6000610b74612400565b610b7d82612588565b6001600160801b031692915050565b6000610b96612400565b610aa682612621565b8051600003610c145760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b6000546001546005546001600160a01b03928316929182169116610c36614cbd565b610c3e614cee565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb7919061514d565b826000018181525050826001600160a01b0316637f9be6876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d22919061514d565b60208301528151610d32906126c6565b1580156040840152610d5a57610d538585846000015185602001518a6126e3565b9050610d72565b610d6f8585846000015185602001518a61290b565b90505b6000816020015111610d965760405162461bcd60e51b8152600401610c0b90615166565b6060810151608082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610dd392600401918252602082015260400190565b600060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b50505050610e1985858360a001518460c001516129da565b60e081015115610e8e5760065460e08201516040516303570deb60e61b81526001600160a01b038881169363d5c37ac093610e5b9392909116916004016151a8565b600060405180830381600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b505050505b610e9c858260400151612c06565b6020810151606083015260e081015160408201518251610ebc91906150f9565b610ec691906150f9565b60808301819052606080840151604084810151815192835260208301949094528101929092527fc5cb827645ffa2009bf4c45a58df393302651bf85a1f49ba3bd75c05032bcde2910160405180910390a1610f2685338360400151612d51565b505050505050565b6001600160a01b0381166000908152600d602052604081206003015460ff166004811115610aa657610aa6614fbd565b610f716064670de0b6b3a7640000615139565b610f7c90600561510c565b81565b610f716103e8670de0b6b3a7640000615139565b6000610fa0600b54612dbc565b905090565b610fae81612df9565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110610fe457610fe46151c1565b60200260200101906001600160a01b031690816001600160a01b03168152505061100d81610b9f565b5050565b6000610aa661101e611456565b83612e90565b6000610aa6826126c6565b611037612400565b80600481111561104957611049614fbd565b6001600160a01b0383166000908152600d60205260409020600301805460ff1916600183600481111561107e5761107e614fbd565b02179055505050565b61108f612400565b6000611099612eb6565b9050670de0b6b3a76400008111156110b3576110b36151d7565b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610a56612efa565b6000610aa661101e6123b9565b6040805160a081018252600080546001600160a01b03908116835260015481166020840152928201819052600a54831660608301526080820152600554909116611148614cbd565b611150614cee565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c9919061514d565b826000018181525050826001600160a01b0316637f9be6876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611234919061514d565b60208301528151611244906126c6565b158015604084015261126b57611264848360000151846020015188612f51565b905061128b565b6112888460000151856020015184600001518560200151896132cf565b90505b60008160200151116112af5760405162461bcd60e51b8152600401610c0b90615166565b6060810151608082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926112ec92600401918252602082015260400190565b600060405180830381600087803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b5050505061133a846000015185602001518360a001518460c001516129da565b60e0810151156113af57835160065460e08301516040516303570deb60e61b81526001600160a01b039384169363d5c37ac09361137c939116916004016151a8565b600060405180830381600087803b15801561139657600080fd5b505af11580156113aa573d6000803e3d6000fd5b505050505b6113c184600001518260400151612c06565b6020810151606083015260e0810151604082015182516113e191906150f9565b6113eb91906150f9565b60808301819052606080840151604084810151815192835260208301949094528101929092527fc5cb827645ffa2009bf4c45a58df393302651bf85a1f49ba3bd75c05032bcde2910160405180910390a161144f8460000151338360400151612d51565b5050505050565b6000610fa0611463612eb6565b6133ff565b611470613451565b6114798a6134ab565b611482896134ab565b61148b886134ab565b611494876134ab565b61149d866134ab565b6114a6856134ab565b6114af846134ab565b6114b8836134ab565b6114c1826134ab565b6114ca816134ab565b600480546001600160a01b03199081166001600160a01b038d8116919091179092556000805482168c84161790556001805482168b84161790556005805482168a8416179055600680548216898416179055600280548216888416179055600780548216878416179055600a80548216868416179055600880548216858416179055600980549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859061158c908c90614d7b565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882896040516115c39190614d7b565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b886040516115fa9190614d7b565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f876040516116319190614d7b565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d866040516116689190614d7b565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db2648560405161169f9190614d7b565b60405180910390a17f522d83e1b4d0586985996a5a2f3987e11187efba22d8ee8b185af633301082af846040516116d69190614d7b565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008360405161170d9190614d7b565b60405180910390a17fde9158b30dd0126701d34f16989ef2c0172023471ec11abdd952c6053df80a19826040516117449190614d7b565b60405180910390a17f655ad37a0fece31f786055168b763bbb40e57404304b8eeda3f9bf5b632a6ae38160405161177b9190614d7b565b60405180910390a161178b611797565b50505050505050505050565b61179f613451565b6117a96000613550565b565b60006117b5612400565b6001600160a01b0383166000908152600d60205260408120600101546117dc9084906151ed565b6001600160a01b0385166000908152600d6020526040902060010181905591505092915050565b6014818154811061181357600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040805163c7662fa560e01b8152905183926001600160a01b03169163c7662fa59160048083019260209291908290030181865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c7662fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611916919061514d565b905061192281836151ed565b9250505090565b611931612400565b610a56816135a2565b60008054604080516321901a7960e21b8152905183926001600160a01b03169163864069e49160048083019260209291908290030181865afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a8919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b6000611a09612400565b6001600160a01b0383166000908152600d6020526040812054610a879084906151ed565b6000806000611a3b84613606565b915091506000611a4b8383613682565b95945050505050565b6000610aa6826136b8565b6001600160a01b0381166000908152600d602052604081208054600190910154909180611a8b85610aac565b9150611a96856123c6565b9050611aa282856151ed565b9350611aae81846151ed565b92509193509193565b6040805160a08082018352600080546001600160a01b0390811684526001548116602080860191909152600754821685870152600a54821660608087019190915260065490921660808087019190915286516101008101885284815291820184905295810183905290810182905293840181905290830181905260c0830181905260e083015290611b47836136e4565b611b4f61377f565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc8919061514d565b60c08201819052611bd890613873565b611be1896138e6565b611bf08260400151338b61394d565b611bf861182d565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a0823190611c31903390600401614d7b565b602060405180830381865afa158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c72919061514d565b1115611c8057611c806151d7565b888152606082015160c0820151600091611c9b918b90613a46565b15611ca7575087611db9565b82606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0d9190615200565b90505b6001600160a01b03811615801590611d3c5750670f43fc2c04ee0000611d3a828460c0015161224d565b105b15611db95782606001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401611d719190614d7b565b602060405180830381865afa158015611d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db29190615200565b9050611d10565b84600003611dc75760001994505b6001600160a01b03811615801590611ddf5750815115155b8015611deb5750600085115b15611efa5784611dfa8161521d565b955050600083606001516001600160a01b031663b72703ac836040518263ffffffff1660e01b8152600401611e2f9190614d7b565b602060405180830381865afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190615200565b9050611e858460000151856020015184612480565b6000611e9e858486600001518760c001518e8e8e613b90565b9050806040015115611eb1575050611efa565b80516020850151611ec291906151ed565b6020808601919091528101516040850151611edd91906151ed565b604085015280518451611ef091906150f9565b8452509050611dc7565b6000826040015111611f605760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610c0b565b611f7782604001518360c001518460e00151613df3565b50611f858260400151613e96565b606083018190526040830151611f9c919086613ea3565b825160095460608401516040516303570deb60e61b81526001600160a01b039384169363d5c37ac093611fd4939116916004016151a8565b600060405180830381600087803b158015611fee57600080fd5b505af1158015612002573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b5050506060830151604084015161208192506150f9565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad8936120dd938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b815260040161211b9291906151a8565b600060405180830381600087803b15801561213557600080fd5b505af1158015612149573d6000803e3d6000fd5b505084516020850151604051636bfc0b7960e01b81526001600160a01b039092169350636bfc0b7992506121839160040190815260200190565b600060405180830381600087803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b5050845160808501516040516303570deb60e61b81526001600160a01b03909216935063d5c37ac092506121ea913391906004016151a8565b600060405180830381600087803b15801561220457600080fd5b505af1158015612218573d6000803e3d6000fd5b5050505050505050505050505050565b6000610fa0612235612eb6565b612dbc565b612242612400565b610a56816002613f14565b600080600061225b85613606565b915091506000610b6083838761400a565b6000612276612400565b6001600160a01b0383166000908152600d60205260408120600101546117dc9084906150f9565b6000610aa66122aa612228565b8361403b565b6000601482815481106122c5576122c56151c1565b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b0383166000908152600d602052604090206003015460ff16600481111561231457612314614fbd565b1461232157506000919050565b506011546001600160a01b039091166000908152601360205260409020541090565b61234b613451565b6001600160a01b0381166123b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c0b565b610a5681613550565b6000610fa0600b546133ff565b6001600160a01b0381166000908152601360205260408120546011548290610ad89083906150f9565b6123f7612400565b610a56816140cb565b6004546001600160a01b031633146117a95760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610c0b565b612489816122e0565b156125835761249781612df9565b60006124a2826123c6565b905060006124af83610aac565b6001600160a01b0384166000908152600d60205260409020600101549091506124d99083906151ed565b6001600160a01b0384166000908152600d602052604090206001810191909155546125059082906151ed565b6001600160a01b0384166000908152600d6020526040902055612527836135a2565b61253385858385614116565b6001600160a01b0383166000818152600d60205260408082208054600182015460029092015492516000805160206152d8833981519152946125789492939291615234565b60405180910390a250505b505050565b601480546001808201835560008381527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec90920180546001600160a01b0319166001600160a01b038616179055915490916125e2916150f9565b6001600160a01b03929092166000908152600d602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152600d602052604081206001015481906126489061422a565b6001600160a01b0384166000908152600d60205260409020600201805490829055600e5491925090829061267d9083906150f9565b61268791906151ed565b600e8190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b6000806126d2836136b8565b6714d1120d7b160000119392505050565b6126eb614cee565b6126f3614d33565b6126fb614cee565b8482526000608083015261270d61182d565b60a083015261271a61193a565b60c0830152600060208301525b835182602001511015612900578382602001518151811061274a5761274a6151c1565b6020908102919091018101516001600160a01b0316606084018190526000908152600d909152604090206003015460019060ff16600481111561278f5761278f614fbd565b036128e8576127a282606001518761224d565b6040830152608082015161289157670f43fc2c04ee00008260400151101580156127cb57508151155b6128e85760006127e48360c001518460a001518961400a565b90506128018989856060015186604001518760000151868d614260565b60608101518451919350612814916150f9565b8352606082015160a084015161282a91906150f9565b60a084015260e08201516040830151608084015160c086015161284d91906150f9565b61285791906150f9565b61286191906150f9565b60c0840152612870848361454e565b93506128858360c001518460a001518961461d565b156080840152506128e8565b816080015180156128ad5750670f43fc2c04ee00008260400151105b156128e8576128c688888460600151856000015161463e565b606081015183519192506128d9916150f9565b82526128e5838261454e565b92505b602082018051906128f882615252565b905250612727565b505095945050505050565b612913614cee565b61291b614d33565b612923614cee565b848252600060208301525b8351826020015110156129005783826020015181518110612951576129516151c1565b60209081029190910101516001600160a01b031660608301819052612976908761224d565b60408301819052670f43fc2c04ee000011156129c2576129a088888460600151856000015161463e565b606081015183519192506129b3916150f9565b82526129bf838261454e565b92505b602082018051906129d282615252565b90525061292e565b8115612c00576015546000906129f8670de0b6b3a76400008461510c565b612a0291906151ed565b90506000601654670de0b6b3a764000085612a1d919061510c565b612a2791906151ed565b90506000600e5483612a399190615139565b90506000600e5483612a4b9190615139565b9050600e5482612a5b919061510c565b612a6590856150f9565b601555600e54612a75908261510c565b612a7f90846150f9565b601655601154612a909083906151ed565b601155601254612aa19082906151ed565b60128190556011546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612adf928252602082015260400190565b60405180910390a1604051636bfc0b7960e01b8152600481018790526001600160a01b03891690636bfc0b7990602401600060405180830381600087803b158015612b2957600080fd5b505af1158015612b3d573d6000803e3d6000fd5b505060405163707cf39f60e01b8152600481018990526001600160a01b038a16925063707cf39f9150602401600060405180830381600087803b158015612b8357600080fd5b505af1158015612b97573d6000803e3d6000fd5b50506040516303570deb60e61b81526001600160a01b038b16925063d5c37ac09150612bc9908a9089906004016151a8565b600060405180830381600087803b158015612be357600080fd5b505af1158015612bf7573d6000803e3d6000fd5b50505050505050505b50505050565b600e54600f819055506000826001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c73919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cee919061514d565b905080612cfb84846150f9565b612d0591906151ed565b6010819055600f546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612d43928252602082015260400190565b60405180910390a150505050565b8015612583576040516303570deb60e61b81526001600160a01b0384169063d5c37ac090612d8590859085906004016151a8565b600060405180830381600087803b158015612d9f57600080fd5b505af1158015612db3573d6000803e3d6000fd5b50505050505050565b6000610aa682612dd66103e8670de0b6b3a7640000615139565b612de190600561510c565b612deb91906151ed565b670de0b6b3a764000061477b565b60016001600160a01b0382166000908152600d602052604090206003015460ff166004811115612e2b57612e2b614fbd565b14610a565760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610c0b565b6000670de0b6b3a7640000612ea5838561510c565b612eaf9190615139565b9392505050565b600080612ec1614791565b90506000612ed7670ddd4b8c6c7d70d8836147ad565b9050670de0b6b3a764000081600b54612ef0919061510c565b6119229190615139565b6000600c5442612f0a91906150f9565b9050603c8110610a565742600c8190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc906020015b60405180910390a150565b612f59614cee565b612f61614d33565b612f69614cee565b84825260006080830152612f7b61182d565b60a0830152612f8861193a565b8260c001818152505086606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff79190615200565b82606001906001600160a01b031690816001600160a01b031681525050600087606001516001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190615200565b6000602085015290505b8483602001511080156130af5750806001600160a01b031683606001516001600160a01b031614155b156132c457600088606001516001600160a01b031663b72703ac85606001516040518263ffffffff1660e01b81526004016130ea9190614d7b565b602060405180830381865afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b9190615200565b905061313b84606001518961224d565b6040850152608084015161323557670f43fc2c04ee000084604001511015801561316457508351155b1561316f57506132c4565b60006131848560c001518660a001518b61400a565b8a5160208c01516060880151604089015189519495506131a594868f614260565b606081015186519195506131b8916150f9565b8552606084015160a08601516131ce91906150f9565b60a086015260e08401516040850151608086015160c08801516131f191906150f9565b6131fb91906150f9565b61320591906150f9565b60c0860152613214868561454e565b95506132298560c001518660a001518b61461d565b1560808601525061329e565b836080015180156132515750670f43fc2c04ee00008460400151105b156132985761327289600001518a602001518660600151876000015161463e565b60608101518551919450613285916150f9565b8452613291858461454e565b945061329e565b506132c4565b6001600160a01b03166060840152602083018051906132bc82615252565b905250613086565b505050949350505050565b6132d7614cee565b6132df614d33565b6132e7614cee565b600a54858352600060208401526001600160a01b03165b84836020015110156133f357806001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c9190615200565b6001600160a01b031660608401819052613386908861224d565b60408401819052670f43fc2c04ee000011156133d6576133b089898560600151866000015161463e565b606081015184519193506133c3916150f9565b83526133cf848361454e565b93506133db565b6133f3565b602083018051906133eb82615252565b9052506132fe565b50505095945050505050565b6000610aa6826134196103e8670de0b6b3a7640000615139565b61342490600561510c565b61342e91906151ed565b6134416064670de0b6b3a7640000615139565b61344c90600561510c565b61477b565b6003546001600160a01b031633146117a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c0b565b6001600160a01b0381166135015760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610c0b565b803b8061100d5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610c0b565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601180546001600160a01b038316600090815260136020526040908190209182556012546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92612f4692908252602082015260400190565b6000806000613614846123c6565b9050600061362185610aac565b6001600160a01b0386166000908152600d60205260408120600101549192509061364c9084906151ed565b6001600160a01b0387166000908152600d6020526040812054919250906136749084906151ed565b919791965090945050505050565b600081156136af578161369e68056bc75e2d631000008561510c565b6136a89190615139565b9050610aa6565b50600019610aa6565b6000806136c361193a565b905060006136cf61182d565b90506136dc82828661400a565b949350505050565b6136f86103e8670de0b6b3a7640000615139565b61370390600561510c565b811015801561371a5750670de0b6b3a76400008111155b610a565760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610c0b565b60085460408051631e425be160e11b815290516000926001600160a01b031691633c84b7c29160048083019260209291908290030181865afa1580156137c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ed919061514d565b90506137fc62278d00826151ed565b421015610a56576040805162461bcd60e51b81526020600482015260248101919091527f54726f76654d616e616765723a20526564656d7074696f6e7320617265206e6f60448201527f7420616c6c6f77656420647572696e6720626f6f7473747261702070686173656064820152608401610c0b565b670f43fc2c04ee0000613885826136b8565b1015610a565760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610c0b565b60008111610a565760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610c0b565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061397b908690600401614d7b565b602060405180830381865afa158015613998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139bc919061514d565b10156125835760405162461bcd60e51b815260206004820152604d60248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d207573657227732053494d2060648201526c746f6b656e2062616c616e636560981b608482015260a401610c0b565b60006001600160a01b0383161580613ac85750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e890613a85908690600401614d7b565b602060405180830381865afa158015613aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac6919061526b565b155b80613ae35750670f43fc2c04ee0000613ae1848461224d565b105b15613af057506000612eaf565b60405163765e015960e01b81526000906001600160a01b0386169063765e015990613b1f908790600401614d7b565b602060405180830381865afa158015613b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b609190615200565b90506001600160a01b0381161580611a4b5750670f43fc2c04ee0000613b86828561224d565b1095945050505050565b613bb6604051806060016040528060008152602001600081526020016000151581525090565b6001600160a01b0387166000908152600d6020526040902054613bda90879061477b565b8082528590613bf290670de0b6b3a76400009061510c565b613bfc9190615139565b60208083019190915281516001600160a01b0389166000908152600d9092526040822054613c2a91906150f9565b6020808401516001600160a01b038b166000908152600d90925260408220600101549293509091613c5b91906150f9565b905081600003613cc057613c6e896140cb565b613c79896004613f14565b613c848a8a83614858565b6001600160a01b0389166000805160206152d8833981519152600080806003604051613cb39493929190615234565b60405180910390a2613de5565b6000613ccc8284613682565b90508481141580613ce45750670de0b6b3a764000083105b15613cf85750506001604083015250613de8565b60608b015160405163015f109360e51b81526001600160a01b038c81166004830152602482018490528981166044830152888116606483015290911690632be2126090608401600060405180830381600087803b158015613d5857600080fd5b505af1158015613d6c573d6000803e3d6000fd5b5050506001600160a01b038b166000908152600d6020526040902084815560010183905550613d9a8a612621565b506001600160a01b038a166000818152600d6020526040908190206002015490516000805160206152d883398151915291613ddb9187918791600390615234565b60405180910390a2505b50505b979650505050505050565b600080613dfe612eb6565b9050600083613e0d868861510c565b613e179190615139565b90506000613e26600283615139565b613e3090846151ed565b9050613e4481670de0b6b3a764000061477b565b905060008111613e5657613e566151d7565b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610b60612efa565b6000610aa66122aa610f93565b600082613eb8670de0b6b3a76400008661510c565b613ec29190615139565b905081811115612c005760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610c0b565b6000816004811115613f2857613f28614fbd565b14158015613f4857506001816004811115613f4557613f45614fbd565b14155b613f5457613f546151d7565b601454613f60816148f0565b6001600160a01b0383166000908152600d60205260409020600301805483919060ff19166001836004811115613f9857613f98614fbd565b02179055506001600160a01b0383166000908152600d60209081526040808320600180820185905590849055601390925282208281550155613fda83826149ca565b600a54604051631484968760e11b81526001600160a01b03909116906329092d0e90612d85908690600401614d7b565b600082156140325760008361401f848761510c565b6140299190615139565b9150612eaf9050565b50600019612eaf565b600080670de0b6b3a7640000614051848661510c565b61405b9190615139565b9050828110612eaf5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616044820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b6064820152608401610c0b565b6001600160a01b0381166000908152600d6020526040902060020154600e546140f59082906150f9565b600e55506001600160a01b03166000908152600d6020526040812060020155565b604051636bfc0b7960e01b8152600481018390526001600160a01b03841690636bfc0b7990602401600060405180830381600087803b15801561415857600080fd5b505af115801561416c573d6000803e3d6000fd5b505060405163707cf39f60e01b8152600481018590526001600160a01b038716925063707cf39f9150602401600060405180830381600087803b1580156141b257600080fd5b505af11580156141c6573d6000803e3d6000fd5b5050604051636655d16b60e11b8152600481018490526001600160a01b038616925063ccaba2d69150602401600060405180830381600087803b15801561420c57600080fd5b505af1158015614220573d6000803e3d6000fd5b5050505050505050565b60008060105460000361423e575081610aa6565b6000600f5411614250576142506151d7565b601054600f54612ea5908561510c565b614268614cee565b61428c60405180606001604052806000815260200160008152602001600081525090565b60145460011061429c5750613de8565b6142a587611a5f565b604085015260208481019190915284018190529083526142c490614b9a565b6040830181905260208301516142da91906150f9565b8152670de0b6b3a764000086116143b1576142ff898983602001518460400151614116565b614308876140cb565b6000606083018190526080830152815160a0830152805160c083015261432f876003613f14565b815160208301516001600160a01b038916916000805160206152b88339815191529160025b60408051938452602084019290925260ff169082015260600160405180910390a26001600160a01b0387166000805160206152d88339815191526000808060026040516143a49493929190615234565b60405180910390a2614542565b670de0b6b3a7640000861180156143cf5750670f43fc2c04ee000086105b1561441f576143e8898983602001518460400151614116565b6143f1876140cb565b81518151614400919087614ba7565b60c086015260a08501526080840152606083015261432f876003613f14565b670f43fc2c04ee0000861015801561443657508386105b8015614443575081518510155b156145315761445c898983602001518460400151614116565b8460000361446c5761446c6151d7565b614475876140cb565b6144888260000151836020015185614c08565b9150614495876003613f14565b60e0820151156145085760065460e0830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab916144d5918b91906004016151a8565b600060405180830381600087803b1580156144ef57600080fd5b505af1158015614503573d6000803e3d6000fd5b505050505b815160808301516001600160a01b038916916000805160206152b8833981519152916002614354565b614539614cee565b9150613de89050565b50979650505050505050565b614556614cee565b8160400151836040015161456a91906151ed565b60408201528151602084015161458091906151ed565b602080830191909152820151835161459891906151ed565b8152606080830151908401516145ae91906151ed565b6060820152608080830151908401516145c791906151ed565b608082015260a080830151908401516145e091906151ed565b60a082015260c080830151908401516145f991906151ed565b60c082015260e0808301519084015161461291906151ed565b60e082015292915050565b60008061462b85858561400a565b6714d1120d7b1600001195945050505050565b614646614cee565b61466a60405180606001604052806000815260200160008152602001600081525090565b61467384611a5f565b6040850190815260208581019283528601929092529184529051905161469d918891889190614116565b6146a6846140cb565b6146b38260200151614b9a565b6040830181905260208301516000916146cb916150f9565b90506146dc83600001518286614ba7565b60c087015260a0860152608085015260608401526146fb856003613f14565b825160208085015160408051938452918301526001908201526001600160a01b038616906000805160206152b88339815191529060600160405180910390a26001600160a01b0385166000805160206152d88339815191526000808060016040516147699493929190615234565b60405180910390a25050949350505050565b600081831061478a5781612eaf565b5090919050565b6000603c600c54426147a391906150f9565b610fa09190615139565b6000631f5405008211156147c357631f54050091505b816000036147da5750670de0b6b3a7640000610aa6565b670de0b6b3a764000083835b600181111561484e576147fa60028261528d565b60000361481f5761480b8283614c86565b9150614818600282615139565b90506147e6565b6148298284614c86565b92506148358283614c86565b915060026148446001836150f9565b6148189190615139565b610b608284614c86565b82608001516001600160a01b0316633f10abab83836040518363ffffffff1660e01b815260040161488a9291906151a8565b600060405180830381600087803b1580156148a457600080fd5b505af11580156148b8573d6000803e3d6000fd5b5050845160808601516040516303570deb60e61b81526001600160a01b03909216935063d5c37ac09250612d859185906004016151a8565b60018111801561496b5750600a546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015614945573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614969919061514d565b115b610a565760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610c0b565b6001600160a01b0382166000908152600d602052604081206003015460ff16908160048111156149fc576149fc614fbd565b14158015614a1c57506001816004811115614a1957614a19614fbd565b14155b614a2857614a286151d7565b6001600160a01b0383166000908152600d602052604081206003015461010090046001600160801b0316908390614a606001836150f9565b905080836001600160801b03161115614a7b57614a7b6151d7565b600060148281548110614a9057614a906151c1565b600091825260209091200154601480546001600160a01b03909216925082916001600160801b038716908110614ac857614ac86151c1565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600d83526040918290206003018054610100600160881b0319166101006001600160801b038a16908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a16014805480614b6f57614b6f6152a1565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610aa660c883615139565b60008080808415614bf257614bbc878661477b565b935086614bc9858861510c565b614bd39190615139565b9250614bdf84886150f9565b9150614beb83876150f9565b9050614bff565b5060009250829150859050845b93509350935093565b614c10614cee565b83815260208101839052600082614c2f670f43fc2c04ee00008761510c565b614c399190615139565b9050614c4481614b9a565b6040830181905260608301869052614c5c90826150f9565b6080830152614c6b81856150f9565b60e083015250600060a0820181905260c08201529392505050565b600080614c93838561510c565b9050670de0b6b3a7640000614ca9600282615139565b614cb390836151ed565b6136dc9190615139565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610a5657600080fd5b8035614daf81614d8f565b919050565b600060208284031215614dc657600080fd5b8135612eaf81614d8f565b60008060408385031215614de457600080fd5b8235614def81614d8f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215614e2657600080fd5b823567ffffffffffffffff80821115614e3e57600080fd5b818501915085601f830112614e5257600080fd5b813581811115614e6457614e64614dfd565b8060051b604051601f19603f83011681018181108582111715614e8957614e89614dfd565b604052918252848201925083810185019188831115614ea757600080fd5b938501935b82851015614ecc57614ebd85614da4565b84529385019392850192614eac565b98975050505050505050565b600060208284031215614eea57600080fd5b5035919050565b6000806000806000806000806000806101408b8d031215614f1157600080fd5b8a35614f1c81614d8f565b995060208b0135614f2c81614d8f565b985060408b0135614f3c81614d8f565b975060608b0135614f4c81614d8f565b965060808b0135614f5c81614d8f565b955060a08b0135614f6c81614d8f565b945060c08b0135614f7c81614d8f565b935060e08b0135614f8c81614d8f565b92506101008b0135614f9d81614d8f565b9150614fac6101208c01614da4565b90509295989b9194979a5092959850565b634e487b7160e01b600052602160045260246000fd5b858152602081018590526040810184905260a081016005841061500657634e487b7160e01b600052602160045260246000fd5b60608201939093526001600160801b03919091166080909101529392505050565b600060208083528351808285015260005b8181101561505457858101830151858201604001528201615038565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a03121561509057600080fd5b8735965060208801356150a281614d8f565b955060408801356150b281614d8f565b945060608801356150c281614d8f565b9699959850939660808101359560a0820135955060c0909101359350915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610aa657610aa66150e3565b8082028115828204841417610aa657610aa66150e3565b634e487b7160e01b600052601260045260246000fd5b60008261514857615148615123565b500490565b60006020828403121561515f57600080fd5b5051919050565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b80820180821115610aa657610aa66150e3565b60006020828403121561521257600080fd5b8151612eaf81614d8f565b60008161522c5761522c6150e3565b506000190190565b9384526020840192909252604083015260ff16606082015260800190565b600060018201615264576152646150e3565b5060010190565b60006020828403121561527d57600080fd5b81518015158114612eaf57600080fd5b60008261529c5761529c615123565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220411c8debc9f34620fc92eb44727c84c0b006aaee2ab6491372e95674221afabf64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104655760003560e01c8063795d26c311610257578063bf9befb111610146578063d5b35635116100c3578063f2fde38b11610087578063f2fde38b146109f0578063f36b242514610a03578063f5ecd2c214610a0b578063f92d34331461058c578063fe2ba84814610a1e57600080fd5b8063d5b3563514610985578063d66a255314610998578063d9a72444146109c1578063e2135da2146109d4578063e2ac77b0146109dd57600080fd5b8063cda775f91161010a578063cda775f914610930578063d293c71014610943578063d380a37c14610956578063d3d6f8431461095f578063d540f2501461097257600080fd5b8063bf9befb1146108f3578063c35bc550146108fc578063c52861f214610906578063c7b554811461090e578063cbd138ae1461091d57600080fd5b8063a20baee6116101d4578063b7f8cf9b11610198578063b7f8cf9b1461087e578063b82f263d14610891578063b91af97c146108a4578063bcd37526146108d7578063bda0760e146108ea57600080fd5b8063a20baee614610546578063a3f4df7e14610817578063ae9187541461084f578063b0d8e18114610862578063b556eb661461087557600080fd5b8063887105d31161021b578063887105d3146107cf5780638da5cb5b146107d757806391894ebc146107e857806396d711ff146107fb5780639976cf451461080457600080fd5b8063795d26c31461078f5780637f7dde4a14610797578063807d138d146107aa57806380f203a3146107b357806382fe3eb9146107bc57600080fd5b80634870dd9a11610373578063653d46e7116102f057806372423c17116102b457806372423c171461074757806372fe25aa14610546578063741bef1a1461075a578063756b253e1461076d578063794e57241461078057600080fd5b8063653d46e7146106b857806366ca4a21146106cb5780636c37a4af146106d35780636ef64338146106e6578063715018a61461073f57600080fd5b80635d6b480f116103375780635d6b480f146106565780635dba4c4a1461066957806361ec893d14610671578063631203b01461067957806364cee2601461068c57600080fd5b80634870dd9a1461060157806349eefeee146106095780634e443d9e1461061157806356061388146106345780635733d58f1461064757600080fd5b80631e8b1c2b116104015780632b11551a116103c55780632b11551a146105945780632f8655681461059c5780633cc74225146105af578063477d66cf146105c2578063480cd578146105d557600080fd5b80631e8b1c2b146105555780631f68f20a1461056857806321e3780114610571578063240926691461058457806328d28b5b1461058c57600080fd5b8063048c661d1461046a578063071a7541146104935780630b076557146104a957806312610e92146104be57806312d954e3146104d157806315d549f1146104e45780631673c79a146104f757806318f2817a146105335780631bf4355514610546575b600080fd5b60055461047d906001600160a01b031681565b60405161048a9190614d7b565b60405180910390f35b61049b600281565b60405190815260200161048a565b6104bc6104b7366004614db4565b610a31565b005b61049b6104cc366004614dd1565b610a59565b61049b6104df366004614db4565b610aac565b61049b6104f2366004614db4565b610b6a565b61051e610505366004614db4565b6013602052600090815260409020805460019091015482565b6040805192835260208301919091520161048a565b61049b610541366004614db4565b610b8c565b61049b670de0b6b3a764000081565b6104bc610563366004614e13565b610b9f565b61049b600b5481565b61049b61057f366004614db4565b610f2e565b61049b610f5e565b61049b610f7f565b61049b610f93565b6104bc6105aa366004614db4565b610fa5565b60015461047d906001600160a01b031681565b61049b6105d0366004614ed8565b611011565b61049b6105e3366004614db4565b6001600160a01b03166000908152600d602052604090206001015490565b61049b60c881565b60145461049b565b61062461061f366004614ed8565b611024565b604051901515815260200161048a565b60085461047d906001600160a01b031681565b61049b6714d1120d7b16000081565b6104bc610664366004614dd1565b61102f565b6104bc611087565b61049b603c81565b61049b610687366004614ed8565b6110f3565b61049b61069a366004614db4565b6001600160a01b03166000908152600d602052604090206002015490565b6104bc6106c6366004614ed8565b611100565b61049b611456565b6104bc6106e1366004614ef1565b611468565b61072e6106f4366004614db4565b600d6020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b60405161048a959493929190614fd3565b6104bc611797565b61049b610755366004614dd1565b6117ab565b60025461047d906001600160a01b031681565b61047d61077b366004614ed8565b611803565b61049b670f43fc2c04ee000081565b61049b61182d565b60005461047d906001600160a01b031681565b61049b600f5481565b61049b60125481565b6104bc6107ca366004614db4565b611929565b61049b61193a565b6003546001600160a01b031661047d565b60095461047d906001600160a01b031681565b61049b60105481565b61049b610812366004614dd1565b6119ff565b6108426040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b60405161048a9190615027565b600a5461047d906001600160a01b031681565b61049b610870366004614db4565b611a2d565b61049b60165481565b60045461047d906001600160a01b031681565b61049b61089f366004614ed8565b611a54565b6108b76108b2366004614db4565b611a5f565b60408051948552602085019390935291830152606082015260800161048a565b6104bc6108e5366004615075565b611ab7565b61049b60155481565b61049b600e5481565b61049b62278d0081565b61049b612228565b61049b670ddd4b8c6c7d70d881565b6104bc61092b366004614db4565b61223a565b60065461047d906001600160a01b031681565b61049b610951366004614dd1565b61224d565b61049b600c5481565b61049b61096d366004614dd1565b61226c565b60075461047d906001600160a01b031681565b61049b610993366004614ed8565b61229d565b61049b6109a6366004614db4565b6001600160a01b03166000908152600d602052604090205490565b61047d6109cf366004614ed8565b6122b0565b61049b60115481565b6106246109eb366004614db4565b6122e0565b6104bc6109fe366004614db4565b612343565b61049b6123b9565b61049b610a19366004614db4565b6123c6565b6104bc610a2c366004614db4565b6123ef565b610a39612400565b600054600154610a56916001600160a01b03908116911683612480565b50565b6000610a63612400565b6001600160a01b0383166000908152600d6020526040812054610a879084906150f9565b6001600160a01b0385166000908152600d602052604090208190559150505b92915050565b6001600160a01b0381166000908152601360205260408120600101546012548290610ad89083906150f9565b9050801580610b17575060016001600160a01b0385166000908152600d602052604090206003015460ff166004811115610b1457610b14614fbd565b14155b15610b26575060009392505050565b6001600160a01b0384166000908152600d602052604081206002015490670de0b6b3a7640000610b56848461510c565b610b609190615139565b9695505050505050565b6000610b74612400565b610b7d82612588565b6001600160801b031692915050565b6000610b96612400565b610aa682612621565b8051600003610c145760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160448201527572726179206d757374206e6f7420626520656d70747960501b60648201526084015b60405180910390fd5b6000546001546005546001600160a01b03928316929182169116610c36614cbd565b610c3e614cee565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb7919061514d565b826000018181525050826001600160a01b0316637f9be6876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d22919061514d565b60208301528151610d32906126c6565b1580156040840152610d5a57610d538585846000015185602001518a6126e3565b9050610d72565b610d6f8585846000015185602001518a61290b565b90505b6000816020015111610d965760405162461bcd60e51b8152600401610c0b90615166565b6060810151608082015160405163335525ad60e01b81526001600160a01b0386169263335525ad92610dd392600401918252602082015260400190565b600060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b50505050610e1985858360a001518460c001516129da565b60e081015115610e8e5760065460e08201516040516303570deb60e61b81526001600160a01b038881169363d5c37ac093610e5b9392909116916004016151a8565b600060405180830381600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b505050505b610e9c858260400151612c06565b6020810151606083015260e081015160408201518251610ebc91906150f9565b610ec691906150f9565b60808301819052606080840151604084810151815192835260208301949094528101929092527fc5cb827645ffa2009bf4c45a58df393302651bf85a1f49ba3bd75c05032bcde2910160405180910390a1610f2685338360400151612d51565b505050505050565b6001600160a01b0381166000908152600d602052604081206003015460ff166004811115610aa657610aa6614fbd565b610f716064670de0b6b3a7640000615139565b610f7c90600561510c565b81565b610f716103e8670de0b6b3a7640000615139565b6000610fa0600b54612dbc565b905090565b610fae81612df9565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110610fe457610fe46151c1565b60200260200101906001600160a01b031690816001600160a01b03168152505061100d81610b9f565b5050565b6000610aa661101e611456565b83612e90565b6000610aa6826126c6565b611037612400565b80600481111561104957611049614fbd565b6001600160a01b0383166000908152600d60205260409020600301805460ff1916600183600481111561107e5761107e614fbd565b02179055505050565b61108f612400565b6000611099612eb6565b9050670de0b6b3a76400008111156110b3576110b36151d7565b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610a56612efa565b6000610aa661101e6123b9565b6040805160a081018252600080546001600160a01b03908116835260015481166020840152928201819052600a54831660608301526080820152600554909116611148614cbd565b611150614cee565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c9919061514d565b826000018181525050826001600160a01b0316637f9be6876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611234919061514d565b60208301528151611244906126c6565b158015604084015261126b57611264848360000151846020015188612f51565b905061128b565b6112888460000151856020015184600001518560200151896132cf565b90505b60008160200151116112af5760405162461bcd60e51b8152600401610c0b90615166565b6060810151608082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926112ec92600401918252602082015260400190565b600060405180830381600087803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b5050505061133a846000015185602001518360a001518460c001516129da565b60e0810151156113af57835160065460e08301516040516303570deb60e61b81526001600160a01b039384169363d5c37ac09361137c939116916004016151a8565b600060405180830381600087803b15801561139657600080fd5b505af11580156113aa573d6000803e3d6000fd5b505050505b6113c184600001518260400151612c06565b6020810151606083015260e0810151604082015182516113e191906150f9565b6113eb91906150f9565b60808301819052606080840151604084810151815192835260208301949094528101929092527fc5cb827645ffa2009bf4c45a58df393302651bf85a1f49ba3bd75c05032bcde2910160405180910390a161144f8460000151338360400151612d51565b5050505050565b6000610fa0611463612eb6565b6133ff565b611470613451565b6114798a6134ab565b611482896134ab565b61148b886134ab565b611494876134ab565b61149d866134ab565b6114a6856134ab565b6114af846134ab565b6114b8836134ab565b6114c1826134ab565b6114ca816134ab565b600480546001600160a01b03199081166001600160a01b038d8116919091179092556000805482168c84161790556001805482168b84161790556005805482168a8416179055600680548216898416179055600280548216888416179055600780548216878416179055600a80548216868416179055600880548216858416179055600980549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859061158c908c90614d7b565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882896040516115c39190614d7b565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b886040516115fa9190614d7b565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f876040516116319190614d7b565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d866040516116689190614d7b565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db2648560405161169f9190614d7b565b60405180910390a17f522d83e1b4d0586985996a5a2f3987e11187efba22d8ee8b185af633301082af846040516116d69190614d7b565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788008360405161170d9190614d7b565b60405180910390a17fde9158b30dd0126701d34f16989ef2c0172023471ec11abdd952c6053df80a19826040516117449190614d7b565b60405180910390a17f655ad37a0fece31f786055168b763bbb40e57404304b8eeda3f9bf5b632a6ae38160405161177b9190614d7b565b60405180910390a161178b611797565b50505050505050505050565b61179f613451565b6117a96000613550565b565b60006117b5612400565b6001600160a01b0383166000908152600d60205260408120600101546117dc9084906151ed565b6001600160a01b0385166000908152600d6020526040902060010181905591505092915050565b6014818154811061181357600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546040805163c7662fa560e01b8152905183926001600160a01b03169163c7662fa59160048083019260209291908290030181865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c7662fa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611916919061514d565b905061192281836151ed565b9250505090565b611931612400565b610a56816135a2565b60008054604080516321901a7960e21b8152905183926001600160a01b03169163864069e49160048083019260209291908290030181865afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a8919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b6000611a09612400565b6001600160a01b0383166000908152600d6020526040812054610a879084906151ed565b6000806000611a3b84613606565b915091506000611a4b8383613682565b95945050505050565b6000610aa6826136b8565b6001600160a01b0381166000908152600d602052604081208054600190910154909180611a8b85610aac565b9150611a96856123c6565b9050611aa282856151ed565b9350611aae81846151ed565b92509193509193565b6040805160a08082018352600080546001600160a01b0390811684526001548116602080860191909152600754821685870152600a54821660608087019190915260065490921660808087019190915286516101008101885284815291820184905295810183905290810182905293840181905290830181905260c0830181905260e083015290611b47836136e4565b611b4f61377f565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc8919061514d565b60c08201819052611bd890613873565b611be1896138e6565b611bf08260400151338b61394d565b611bf861182d565b60e0820181905260408084015190516370a0823160e01b81526001600160a01b03909116906370a0823190611c31903390600401614d7b565b602060405180830381865afa158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c72919061514d565b1115611c8057611c806151d7565b888152606082015160c0820151600091611c9b918b90613a46565b15611ca7575087611db9565b82606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0d9190615200565b90505b6001600160a01b03811615801590611d3c5750670f43fc2c04ee0000611d3a828460c0015161224d565b105b15611db95782606001516001600160a01b031663b72703ac826040518263ffffffff1660e01b8152600401611d719190614d7b565b602060405180830381865afa158015611d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db29190615200565b9050611d10565b84600003611dc75760001994505b6001600160a01b03811615801590611ddf5750815115155b8015611deb5750600085115b15611efa5784611dfa8161521d565b955050600083606001516001600160a01b031663b72703ac836040518263ffffffff1660e01b8152600401611e2f9190614d7b565b602060405180830381865afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190615200565b9050611e858460000151856020015184612480565b6000611e9e858486600001518760c001518e8e8e613b90565b9050806040015115611eb1575050611efa565b80516020850151611ec291906151ed565b6020808601919091528101516040850151611edd91906151ed565b604085015280518451611ef091906150f9565b8452509050611dc7565b6000826040015111611f605760405162461bcd60e51b815260206004820152602960248201527f54726f76654d616e616765723a20556e61626c6520746f2072656465656d20616044820152681b9e48185b5bdd5b9d60ba1b6064820152608401610c0b565b611f7782604001518360c001518460e00151613df3565b50611f858260400151613e96565b606083018190526040830151611f9c919086613ea3565b825160095460608401516040516303570deb60e61b81526001600160a01b039384169363d5c37ac093611fd4939116916004016151a8565b600060405180830381600087803b158015611fee57600080fd5b505af1158015612002573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b5050506060830151604084015161208192506150f9565b60808301526020820151604080840151606085015191517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad8936120dd938f93919293845260208401929092526040830152606082015260800190565b60405180910390a182604001516001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b815260040161211b9291906151a8565b600060405180830381600087803b15801561213557600080fd5b505af1158015612149573d6000803e3d6000fd5b505084516020850151604051636bfc0b7960e01b81526001600160a01b039092169350636bfc0b7992506121839160040190815260200190565b600060405180830381600087803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b5050845160808501516040516303570deb60e61b81526001600160a01b03909216935063d5c37ac092506121ea913391906004016151a8565b600060405180830381600087803b15801561220457600080fd5b505af1158015612218573d6000803e3d6000fd5b5050505050505050505050505050565b6000610fa0612235612eb6565b612dbc565b612242612400565b610a56816002613f14565b600080600061225b85613606565b915091506000610b6083838761400a565b6000612276612400565b6001600160a01b0383166000908152600d60205260408120600101546117dc9084906150f9565b6000610aa66122aa612228565b8361403b565b6000601482815481106122c5576122c56151c1565b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b0383166000908152600d602052604090206003015460ff16600481111561231457612314614fbd565b1461232157506000919050565b506011546001600160a01b039091166000908152601360205260409020541090565b61234b613451565b6001600160a01b0381166123b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c0b565b610a5681613550565b6000610fa0600b546133ff565b6001600160a01b0381166000908152601360205260408120546011548290610ad89083906150f9565b6123f7612400565b610a56816140cb565b6004546001600160a01b031633146117a95760405162461bcd60e51b815260206004820152603b60248201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060448201527f426f72726f7765724f7065726174696f6e7320636f6e747261637400000000006064820152608401610c0b565b612489816122e0565b156125835761249781612df9565b60006124a2826123c6565b905060006124af83610aac565b6001600160a01b0384166000908152600d60205260409020600101549091506124d99083906151ed565b6001600160a01b0384166000908152600d602052604090206001810191909155546125059082906151ed565b6001600160a01b0384166000908152600d6020526040902055612527836135a2565b61253385858385614116565b6001600160a01b0383166000818152600d60205260408082208054600182015460029092015492516000805160206152d8833981519152946125789492939291615234565b60405180910390a250505b505050565b601480546001808201835560008381527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec90920180546001600160a01b0319166001600160a01b038616179055915490916125e2916150f9565b6001600160a01b03929092166000908152600d602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b0381166000908152600d602052604081206001015481906126489061422a565b6001600160a01b0384166000908152600d60205260409020600201805490829055600e5491925090829061267d9083906150f9565b61268791906151ed565b600e8190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b6000806126d2836136b8565b6714d1120d7b160000119392505050565b6126eb614cee565b6126f3614d33565b6126fb614cee565b8482526000608083015261270d61182d565b60a083015261271a61193a565b60c0830152600060208301525b835182602001511015612900578382602001518151811061274a5761274a6151c1565b6020908102919091018101516001600160a01b0316606084018190526000908152600d909152604090206003015460019060ff16600481111561278f5761278f614fbd565b036128e8576127a282606001518761224d565b6040830152608082015161289157670f43fc2c04ee00008260400151101580156127cb57508151155b6128e85760006127e48360c001518460a001518961400a565b90506128018989856060015186604001518760000151868d614260565b60608101518451919350612814916150f9565b8352606082015160a084015161282a91906150f9565b60a084015260e08201516040830151608084015160c086015161284d91906150f9565b61285791906150f9565b61286191906150f9565b60c0840152612870848361454e565b93506128858360c001518460a001518961461d565b156080840152506128e8565b816080015180156128ad5750670f43fc2c04ee00008260400151105b156128e8576128c688888460600151856000015161463e565b606081015183519192506128d9916150f9565b82526128e5838261454e565b92505b602082018051906128f882615252565b905250612727565b505095945050505050565b612913614cee565b61291b614d33565b612923614cee565b848252600060208301525b8351826020015110156129005783826020015181518110612951576129516151c1565b60209081029190910101516001600160a01b031660608301819052612976908761224d565b60408301819052670f43fc2c04ee000011156129c2576129a088888460600151856000015161463e565b606081015183519192506129b3916150f9565b82526129bf838261454e565b92505b602082018051906129d282615252565b90525061292e565b8115612c00576015546000906129f8670de0b6b3a76400008461510c565b612a0291906151ed565b90506000601654670de0b6b3a764000085612a1d919061510c565b612a2791906151ed565b90506000600e5483612a399190615139565b90506000600e5483612a4b9190615139565b9050600e5482612a5b919061510c565b612a6590856150f9565b601555600e54612a75908261510c565b612a7f90846150f9565b601655601154612a909083906151ed565b601155601254612aa19082906151ed565b60128190556011546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612adf928252602082015260400190565b60405180910390a1604051636bfc0b7960e01b8152600481018790526001600160a01b03891690636bfc0b7990602401600060405180830381600087803b158015612b2957600080fd5b505af1158015612b3d573d6000803e3d6000fd5b505060405163707cf39f60e01b8152600481018990526001600160a01b038a16925063707cf39f9150602401600060405180830381600087803b158015612b8357600080fd5b505af1158015612b97573d6000803e3d6000fd5b50506040516303570deb60e61b81526001600160a01b038b16925063d5c37ac09150612bc9908a9089906004016151a8565b600060405180830381600087803b158015612be357600080fd5b505af1158015612bf7573d6000803e3d6000fd5b50505050505050505b50505050565b600e54600f819055506000826001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c73919061514d565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cee919061514d565b905080612cfb84846150f9565b612d0591906151ed565b6010819055600f546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612d43928252602082015260400190565b60405180910390a150505050565b8015612583576040516303570deb60e61b81526001600160a01b0384169063d5c37ac090612d8590859085906004016151a8565b600060405180830381600087803b158015612d9f57600080fd5b505af1158015612db3573d6000803e3d6000fd5b50505050505050565b6000610aa682612dd66103e8670de0b6b3a7640000615139565b612de190600561510c565b612deb91906151ed565b670de0b6b3a764000061477b565b60016001600160a01b0382166000908152600d602052604090206003015460ff166004811115612e2b57612e2b614fbd565b14610a565760405162461bcd60e51b815260206004820152602f60248201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960448201526e1cdd081bdc881a5cc818db1bdcd959608a1b6064820152608401610c0b565b6000670de0b6b3a7640000612ea5838561510c565b612eaf9190615139565b9392505050565b600080612ec1614791565b90506000612ed7670ddd4b8c6c7d70d8836147ad565b9050670de0b6b3a764000081600b54612ef0919061510c565b6119229190615139565b6000600c5442612f0a91906150f9565b9050603c8110610a565742600c8190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc906020015b60405180910390a150565b612f59614cee565b612f61614d33565b612f69614cee565b84825260006080830152612f7b61182d565b60a0830152612f8861193a565b8260c001818152505086606001516001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff79190615200565b82606001906001600160a01b031690816001600160a01b031681525050600087606001516001600160a01b0316631e2231436040518163ffffffff1660e01b8152600401602060405180830381865afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190615200565b6000602085015290505b8483602001511080156130af5750806001600160a01b031683606001516001600160a01b031614155b156132c457600088606001516001600160a01b031663b72703ac85606001516040518263ffffffff1660e01b81526004016130ea9190614d7b565b602060405180830381865afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b9190615200565b905061313b84606001518961224d565b6040850152608084015161323557670f43fc2c04ee000084604001511015801561316457508351155b1561316f57506132c4565b60006131848560c001518660a001518b61400a565b8a5160208c01516060880151604089015189519495506131a594868f614260565b606081015186519195506131b8916150f9565b8552606084015160a08601516131ce91906150f9565b60a086015260e08401516040850151608086015160c08801516131f191906150f9565b6131fb91906150f9565b61320591906150f9565b60c0860152613214868561454e565b95506132298560c001518660a001518b61461d565b1560808601525061329e565b836080015180156132515750670f43fc2c04ee00008460400151105b156132985761327289600001518a602001518660600151876000015161463e565b60608101518551919450613285916150f9565b8452613291858461454e565b945061329e565b506132c4565b6001600160a01b03166060840152602083018051906132bc82615252565b905250613086565b505050949350505050565b6132d7614cee565b6132df614d33565b6132e7614cee565b600a54858352600060208401526001600160a01b03165b84836020015110156133f357806001600160a01b0316634d6228316040518163ffffffff1660e01b8152600401602060405180830381865afa158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c9190615200565b6001600160a01b031660608401819052613386908861224d565b60408401819052670f43fc2c04ee000011156133d6576133b089898560600151866000015161463e565b606081015184519193506133c3916150f9565b83526133cf848361454e565b93506133db565b6133f3565b602083018051906133eb82615252565b9052506132fe565b50505095945050505050565b6000610aa6826134196103e8670de0b6b3a7640000615139565b61342490600561510c565b61342e91906151ed565b6134416064670de0b6b3a7640000615139565b61344c90600561510c565b61477b565b6003546001600160a01b031633146117a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c0b565b6001600160a01b0381166135015760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610c0b565b803b8061100d5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610c0b565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601180546001600160a01b038316600090815260136020526040908190209182556012546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92612f4692908252602082015260400190565b6000806000613614846123c6565b9050600061362185610aac565b6001600160a01b0386166000908152600d60205260408120600101549192509061364c9084906151ed565b6001600160a01b0387166000908152600d6020526040812054919250906136749084906151ed565b919791965090945050505050565b600081156136af578161369e68056bc75e2d631000008561510c565b6136a89190615139565b9050610aa6565b50600019610aa6565b6000806136c361193a565b905060006136cf61182d565b90506136dc82828661400a565b949350505050565b6136f86103e8670de0b6b3a7640000615139565b61370390600561510c565b811015801561371a5750670de0b6b3a76400008111155b610a565760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401610c0b565b60085460408051631e425be160e11b815290516000926001600160a01b031691633c84b7c29160048083019260209291908290030181865afa1580156137c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ed919061514d565b90506137fc62278d00826151ed565b421015610a56576040805162461bcd60e51b81526020600482015260248101919091527f54726f76654d616e616765723a20526564656d7074696f6e7320617265206e6f60448201527f7420616c6c6f77656420647572696e6720626f6f7473747261702070686173656064820152608401610c0b565b670f43fc2c04ee0000613885826136b8565b1015610a565760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a2043616e6e6f742072656465656d207768656e604482015269102a21a9101e1026a1a960b11b6064820152608401610c0b565b60008111610a565760405162461bcd60e51b815260206004820152602e60248201527f54726f76654d616e616765723a20416d6f756e74206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608401610c0b565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061397b908690600401614d7b565b602060405180830381865afa158015613998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139bc919061514d565b10156125835760405162461bcd60e51b815260206004820152604d60248201527f54726f76654d616e616765723a2052657175657374656420726564656d70746960448201527f6f6e20616d6f756e74206d757374206265203c3d207573657227732053494d2060648201526c746f6b656e2062616c616e636560981b608482015260a401610c0b565b60006001600160a01b0383161580613ac85750604051630bb7c8fd60e31b81526001600160a01b03851690635dbe47e890613a85908690600401614d7b565b602060405180830381865afa158015613aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac6919061526b565b155b80613ae35750670f43fc2c04ee0000613ae1848461224d565b105b15613af057506000612eaf565b60405163765e015960e01b81526000906001600160a01b0386169063765e015990613b1f908790600401614d7b565b602060405180830381865afa158015613b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b609190615200565b90506001600160a01b0381161580611a4b5750670f43fc2c04ee0000613b86828561224d565b1095945050505050565b613bb6604051806060016040528060008152602001600081526020016000151581525090565b6001600160a01b0387166000908152600d6020526040902054613bda90879061477b565b8082528590613bf290670de0b6b3a76400009061510c565b613bfc9190615139565b60208083019190915281516001600160a01b0389166000908152600d9092526040822054613c2a91906150f9565b6020808401516001600160a01b038b166000908152600d90925260408220600101549293509091613c5b91906150f9565b905081600003613cc057613c6e896140cb565b613c79896004613f14565b613c848a8a83614858565b6001600160a01b0389166000805160206152d8833981519152600080806003604051613cb39493929190615234565b60405180910390a2613de5565b6000613ccc8284613682565b90508481141580613ce45750670de0b6b3a764000083105b15613cf85750506001604083015250613de8565b60608b015160405163015f109360e51b81526001600160a01b038c81166004830152602482018490528981166044830152888116606483015290911690632be2126090608401600060405180830381600087803b158015613d5857600080fd5b505af1158015613d6c573d6000803e3d6000fd5b5050506001600160a01b038b166000908152600d6020526040902084815560010183905550613d9a8a612621565b506001600160a01b038a166000818152600d6020526040908190206002015490516000805160206152d883398151915291613ddb9187918791600390615234565b60405180910390a2505b50505b979650505050505050565b600080613dfe612eb6565b9050600083613e0d868861510c565b613e179190615139565b90506000613e26600283615139565b613e3090846151ed565b9050613e4481670de0b6b3a764000061477b565b905060008111613e5657613e566151d7565b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1610b60612efa565b6000610aa66122aa610f93565b600082613eb8670de0b6b3a76400008661510c565b613ec29190615139565b905081811115612c005760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610c0b565b6000816004811115613f2857613f28614fbd565b14158015613f4857506001816004811115613f4557613f45614fbd565b14155b613f5457613f546151d7565b601454613f60816148f0565b6001600160a01b0383166000908152600d60205260409020600301805483919060ff19166001836004811115613f9857613f98614fbd565b02179055506001600160a01b0383166000908152600d60209081526040808320600180820185905590849055601390925282208281550155613fda83826149ca565b600a54604051631484968760e11b81526001600160a01b03909116906329092d0e90612d85908690600401614d7b565b600082156140325760008361401f848761510c565b6140299190615139565b9150612eaf9050565b50600019612eaf565b600080670de0b6b3a7640000614051848661510c565b61405b9190615139565b9050828110612eaf5760405162461bcd60e51b815260206004820152603660248201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616044820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b6064820152608401610c0b565b6001600160a01b0381166000908152600d6020526040902060020154600e546140f59082906150f9565b600e55506001600160a01b03166000908152600d6020526040812060020155565b604051636bfc0b7960e01b8152600481018390526001600160a01b03841690636bfc0b7990602401600060405180830381600087803b15801561415857600080fd5b505af115801561416c573d6000803e3d6000fd5b505060405163707cf39f60e01b8152600481018590526001600160a01b038716925063707cf39f9150602401600060405180830381600087803b1580156141b257600080fd5b505af11580156141c6573d6000803e3d6000fd5b5050604051636655d16b60e11b8152600481018490526001600160a01b038616925063ccaba2d69150602401600060405180830381600087803b15801561420c57600080fd5b505af1158015614220573d6000803e3d6000fd5b5050505050505050565b60008060105460000361423e575081610aa6565b6000600f5411614250576142506151d7565b601054600f54612ea5908561510c565b614268614cee565b61428c60405180606001604052806000815260200160008152602001600081525090565b60145460011061429c5750613de8565b6142a587611a5f565b604085015260208481019190915284018190529083526142c490614b9a565b6040830181905260208301516142da91906150f9565b8152670de0b6b3a764000086116143b1576142ff898983602001518460400151614116565b614308876140cb565b6000606083018190526080830152815160a0830152805160c083015261432f876003613f14565b815160208301516001600160a01b038916916000805160206152b88339815191529160025b60408051938452602084019290925260ff169082015260600160405180910390a26001600160a01b0387166000805160206152d88339815191526000808060026040516143a49493929190615234565b60405180910390a2614542565b670de0b6b3a7640000861180156143cf5750670f43fc2c04ee000086105b1561441f576143e8898983602001518460400151614116565b6143f1876140cb565b81518151614400919087614ba7565b60c086015260a08501526080840152606083015261432f876003613f14565b670f43fc2c04ee0000861015801561443657508386105b8015614443575081518510155b156145315761445c898983602001518460400151614116565b8460000361446c5761446c6151d7565b614475876140cb565b6144888260000151836020015185614c08565b9150614495876003613f14565b60e0820151156145085760065460e0830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab916144d5918b91906004016151a8565b600060405180830381600087803b1580156144ef57600080fd5b505af1158015614503573d6000803e3d6000fd5b505050505b815160808301516001600160a01b038916916000805160206152b8833981519152916002614354565b614539614cee565b9150613de89050565b50979650505050505050565b614556614cee565b8160400151836040015161456a91906151ed565b60408201528151602084015161458091906151ed565b602080830191909152820151835161459891906151ed565b8152606080830151908401516145ae91906151ed565b6060820152608080830151908401516145c791906151ed565b608082015260a080830151908401516145e091906151ed565b60a082015260c080830151908401516145f991906151ed565b60c082015260e0808301519084015161461291906151ed565b60e082015292915050565b60008061462b85858561400a565b6714d1120d7b1600001195945050505050565b614646614cee565b61466a60405180606001604052806000815260200160008152602001600081525090565b61467384611a5f565b6040850190815260208581019283528601929092529184529051905161469d918891889190614116565b6146a6846140cb565b6146b38260200151614b9a565b6040830181905260208301516000916146cb916150f9565b90506146dc83600001518286614ba7565b60c087015260a0860152608085015260608401526146fb856003613f14565b825160208085015160408051938452918301526001908201526001600160a01b038616906000805160206152b88339815191529060600160405180910390a26001600160a01b0385166000805160206152d88339815191526000808060016040516147699493929190615234565b60405180910390a25050949350505050565b600081831061478a5781612eaf565b5090919050565b6000603c600c54426147a391906150f9565b610fa09190615139565b6000631f5405008211156147c357631f54050091505b816000036147da5750670de0b6b3a7640000610aa6565b670de0b6b3a764000083835b600181111561484e576147fa60028261528d565b60000361481f5761480b8283614c86565b9150614818600282615139565b90506147e6565b6148298284614c86565b92506148358283614c86565b915060026148446001836150f9565b6148189190615139565b610b608284614c86565b82608001516001600160a01b0316633f10abab83836040518363ffffffff1660e01b815260040161488a9291906151a8565b600060405180830381600087803b1580156148a457600080fd5b505af11580156148b8573d6000803e3d6000fd5b5050845160808601516040516303570deb60e61b81526001600160a01b03909216935063d5c37ac09250612d859185906004016151a8565b60018111801561496b5750600a546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa4319160048083019260209291908290030181865afa158015614945573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614969919061514d565b115b610a565760405162461bcd60e51b815260206004820152602a60248201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206044820152697468652073797374656d60b01b6064820152608401610c0b565b6001600160a01b0382166000908152600d602052604081206003015460ff16908160048111156149fc576149fc614fbd565b14158015614a1c57506001816004811115614a1957614a19614fbd565b14155b614a2857614a286151d7565b6001600160a01b0383166000908152600d602052604081206003015461010090046001600160801b0316908390614a606001836150f9565b905080836001600160801b03161115614a7b57614a7b6151d7565b600060148281548110614a9057614a906151c1565b600091825260209091200154601480546001600160a01b03909216925082916001600160801b038716908110614ac857614ac86151c1565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600d83526040918290206003018054610100600160881b0319166101006001600160801b038a16908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a16014805480614b6f57614b6f6152a1565b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b6000610aa660c883615139565b60008080808415614bf257614bbc878661477b565b935086614bc9858861510c565b614bd39190615139565b9250614bdf84886150f9565b9150614beb83876150f9565b9050614bff565b5060009250829150859050845b93509350935093565b614c10614cee565b83815260208101839052600082614c2f670f43fc2c04ee00008761510c565b614c399190615139565b9050614c4481614b9a565b6040830181905260608301869052614c5c90826150f9565b6080830152614c6b81856150f9565b60e083015250600060a0820181905260c08201529392505050565b600080614c93838561510c565b9050670de0b6b3a7640000614ca9600282615139565b614cb390836151ed565b6136dc9190615139565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610a5657600080fd5b8035614daf81614d8f565b919050565b600060208284031215614dc657600080fd5b8135612eaf81614d8f565b60008060408385031215614de457600080fd5b8235614def81614d8f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215614e2657600080fd5b823567ffffffffffffffff80821115614e3e57600080fd5b818501915085601f830112614e5257600080fd5b813581811115614e6457614e64614dfd565b8060051b604051601f19603f83011681018181108582111715614e8957614e89614dfd565b604052918252848201925083810185019188831115614ea757600080fd5b938501935b82851015614ecc57614ebd85614da4565b84529385019392850192614eac565b98975050505050505050565b600060208284031215614eea57600080fd5b5035919050565b6000806000806000806000806000806101408b8d031215614f1157600080fd5b8a35614f1c81614d8f565b995060208b0135614f2c81614d8f565b985060408b0135614f3c81614d8f565b975060608b0135614f4c81614d8f565b965060808b0135614f5c81614d8f565b955060a08b0135614f6c81614d8f565b945060c08b0135614f7c81614d8f565b935060e08b0135614f8c81614d8f565b92506101008b0135614f9d81614d8f565b9150614fac6101208c01614da4565b90509295989b9194979a5092959850565b634e487b7160e01b600052602160045260246000fd5b858152602081018590526040810184905260a081016005841061500657634e487b7160e01b600052602160045260246000fd5b60608201939093526001600160801b03919091166080909101529392505050565b600060208083528351808285015260005b8181101561505457858101830151858201604001528201615038565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a03121561509057600080fd5b8735965060208801356150a281614d8f565b955060408801356150b281614d8f565b945060608801356150c281614d8f565b9699959850939660808101359560a0820135955060c0909101359350915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610aa657610aa66150e3565b8082028115828204841417610aa657610aa66150e3565b634e487b7160e01b600052601260045260246000fd5b60008261514857615148615123565b500490565b60006020828403121561515f57600080fd5b5051919050565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b80820180821115610aa657610aa66150e3565b60006020828403121561521257600080fd5b8151612eaf81614d8f565b60008161522c5761522c6150e3565b506000190190565b9384526020840192909252604083015260ff16606082015260800190565b600060018201615264576152646150e3565b5060010190565b60006020828403121561527d57600080fd5b81518015158114612eaf57600080fd5b60008261529c5761529c615123565b500690565b634e487b7160e01b600052603160045260246000fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220411c8debc9f34620fc92eb44727c84c0b006aaee2ab6491372e95674221afabf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25709,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)27920"
      },
      {
        "astId": 25712,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)28262"
      },
      {
        "astId": 25716,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)28397"
      },
      {
        "astId": 590,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15870,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15874,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStabilityPool)28915"
      },
      {
        "astId": 15877,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ICollSurplusPool)28176"
      },
      {
        "astId": 15881,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "simToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISIMToken)28557"
      },
      {
        "astId": 15885,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "shadyToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ISHADYToken)28498"
      },
      {
        "astId": 15888,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "wstETHVeDistributor",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15891,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ISortedTroves)28693"
      },
      {
        "astId": 15919,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "baseRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 15921,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15944,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "Troves",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Trove)15939_storage)"
      },
      {
        "astId": 15946,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 15948,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 15950,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 15952,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_WSTETH",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 15954,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "L_SIMDebt",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 15959,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)15964_storage)"
      },
      {
        "astId": 15967,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15969,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastWSTETHError_Redistribution",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 15971,
        "contract": "contracts/TroveManager.sol:TroveManager",
        "label": "lastSIMDebtError_Redistribution",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IActivePool)27920": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)28176": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)28262": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)28397": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISHADYToken)28498": {
        "encoding": "inplace",
        "label": "contract ISHADYToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISIMToken)28557": {
        "encoding": "inplace",
        "label": "contract ISIMToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)28693": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)28915": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      },
      "t_enum(Status)15927": {
        "encoding": "inplace",
        "label": "enum TroveManager.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)15964_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)15964_storage"
      },
      "t_mapping(t_address,t_struct(Trove)15939_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)15939_storage"
      },
      "t_struct(RewardSnapshot)15964_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.RewardSnapshot",
        "members": [
          {
            "astId": 15961,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "WSTETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15963,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "SIMDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trove)15939_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.Trove",
        "members": [
          {
            "astId": 15929,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15931,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "coll",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15933,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15936,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)15927"
          },
          {
            "astId": 15938,
            "contract": "contracts/TroveManager.sol:TroveManager",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}