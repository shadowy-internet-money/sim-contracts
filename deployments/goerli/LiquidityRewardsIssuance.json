{
  "address": "0x7c0d6747738d341ba28dc9475FE0e7ffc25B7fdb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_shadyTokenAddress",
          "type": "address"
        }
      ],
      "name": "SHADYTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSHADYIssued",
          "type": "uint256"
        }
      ],
      "name": "TotalSHADYIssuedUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ISSUANCE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHADYSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueSHADY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_SHADYamount",
          "type": "uint256"
        }
      ],
      "name": "sendSHADY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shadyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_issuerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shadyToken",
      "outputs": [
        {
          "internalType": "contract ISHADYToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSHADYIssued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67444c74555417edefed355660d3e4851cf4c18bd86255a88a5d1c7f6c9e72fa",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0x7c0d6747738d341ba28dc9475FE0e7ffc25B7fdb",
    "transactionIndex": 2,
    "gasUsed": "698478",
    "logsBloom": "0x
    "blockHash": "0x3cada077ac7896ef2183c3cffe658f357dadf2f2d16248a13849a1b08e15efe9",
    "transactionHash": "0x67444c74555417edefed355660d3e4851cf4c18bd86255a88a5d1c7f6c9e72fa",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9518041,
        "transactionHash": "0x67444c74555417edefed355660d3e4851cf4c18bd86255a88a5d1c7f6c9e72fa",
        "address": "0x7c0d6747738d341ba28dc9475FE0e7ffc25B7fdb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3cada077ac7896ef2183c3cffe658f357dadf2f2d16248a13849a1b08e15efe9"
      }
    ],
    "blockNumber": 9518041,
    "cumulativeGasUsed": "754771",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ec6f9376f02b1b14c8f28d3638a109e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_shadyTokenAddress\",\"type\":\"address\"}],\"name\":\"SHADYTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSHADYIssued\",\"type\":\"uint256\"}],\"name\":\"TotalSHADYIssuedUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUANCE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHADYSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueSHADY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_SHADYamount\",\"type\":\"uint256\"}],\"name\":\"sendSHADY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shadyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issuerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shadyToken\",\"outputs\":[{\"internalType\":\"contract ISHADYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSHADYIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityRewardsIssuance.sol\":\"LiquidityRewardsIssuance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LiquidityRewardsIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./dependencies/Issuance.sol\\\";\\n\\ncontract LiquidityRewardsIssuance is Issuance {\\n    string constant public NAME = \\\"LiquidityRewardsIssuance\\\";\\n}\",\"keccak256\":\"0xcbc9f3c6b8c206f16caca5dec0bb1cea3d175dc22c34debe41dd9a160f6da252\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xfbd2340d208377996fc6305a28a939c849d7337e8fa1789e3130b73106de1d9f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     */\\n    function _checkContract(address account_) internal view {\\n        require(account_ != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account_) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6282e853a7b31ee8bbbb4008869300bf900f7f43610f5b4be9499d40549b207a\",\"license\":\"MIT\"},\"contracts/dependencies/Issuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISHADYToken.sol\\\";\\nimport \\\"../interfaces/IIssuance.sol\\\";\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"./CheckContract.sol\\\";\\n\\n\\nabstract contract Issuance is IIssuance, Ownable, CheckContract, BaseMath {\\n    // --- Data ---\\n\\n    uint constant public SECONDS_IN_ONE_MINUTE = 60;\\n\\n   /* The issuance factor F determines the curvature of the issuance curve.\\n    *\\n    * Minutes in one year: 60*24*365 = 525600\\n    *\\n    * For 50% of remaining tokens issued each year, with minutes as time units, we have:\\n    * \\n    * F ** 525600 = 0.5\\n    * \\n    * Re-arranging:\\n    * \\n    * 525600 * ln(F) = ln(0.5)\\n    * F = 0.5 ** (1/525600)\\n    * F = 0.999998681227695000 \\n    */\\n    uint constant public ISSUANCE_FACTOR = 999998681227695000;\\n\\n    /* \\n    * The community SHADY supply cap is the starting balance of the Community Issuance contract.\\n    * It should be minted to this contract by SHADYToken, when the token is deployed.\\n    * \\n    * Set to 32M (slightly less than 1/3) of total SHADY supply.\\n    */\\n    uint constant public SHADYSupplyCap = 30e24; // 30 million\\n\\n    ISHADYToken public shadyToken;\\n\\n    address public issuerAddress;\\n\\n    uint public totalSHADYIssued;\\n    uint public immutable deploymentTime;\\n\\n    // --- Functions ---\\n\\n    constructor() {\\n        deploymentTime = block.timestamp;\\n    }\\n\\n    function setAddresses(\\n        address _shadyTokenAddress, \\n        address _issuerAddress\\n    ) external virtual onlyOwner override {\\n        _checkContract(_shadyTokenAddress);\\n//        _checkContract(_issuerAddress);\\n\\n        shadyToken = ISHADYToken(_shadyTokenAddress);\\n        issuerAddress = _issuerAddress;\\n\\n        // When SHADYToken deployed, it should have transferred CommunityIssuance's SHADY entitlement\\n        uint SHADYBalance = shadyToken.balanceOf(address(this));\\n        assert(SHADYBalance >= SHADYSupplyCap);\\n\\n        emit SHADYTokenAddressSet(_shadyTokenAddress);\\n        emit StabilityPoolAddressSet(_issuerAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function issueSHADY() external override returns (uint) {\\n        _requireCallerIsIssuer();\\n\\n        uint latestTotalSHADYIssued = SHADYSupplyCap * _getCumulativeIssuanceFraction() / DECIMAL_PRECISION;\\n        uint issuance = latestTotalSHADYIssued - totalSHADYIssued;\\n\\n        totalSHADYIssued = latestTotalSHADYIssued;\\n        emit TotalSHADYIssuedUpdated(latestTotalSHADYIssued);\\n        \\n        return issuance;\\n    }\\n\\n    /* Gets 1-f^t    where: f < 1\\n\\n    f: issuance factor that determines the shape of the curve\\n    t:  time passed since last SHADY issuance event  */\\n    function _getCumulativeIssuanceFraction() internal view returns (uint) {\\n        // Get the time passed since deployment\\n        uint timePassedInMinutes = (block.timestamp - deploymentTime) / SECONDS_IN_ONE_MINUTE;\\n\\n        // f^t\\n        uint power = LiquityMath._decPow(ISSUANCE_FACTOR, timePassedInMinutes);\\n\\n        //  (1 - f^t)\\n        uint cumulativeIssuanceFraction = (uint(DECIMAL_PRECISION) - power);\\n        assert(cumulativeIssuanceFraction <= DECIMAL_PRECISION); // must be in range [0,1]\\n\\n        return cumulativeIssuanceFraction;\\n    }\\n\\n    function sendSHADY(address _account, uint _SHADYamount) external override {\\n        _requireCallerIsIssuer();\\n        require(SHADYSupplyCap - totalSHADYIssued + _SHADYamount <= shadyToken.balanceOf(address(this)), \\\"Issuance: not enough issued SHADY\\\");\\n        shadyToken.transfer(_account, _SHADYamount);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsIssuer() internal view {\\n        require(msg.sender == issuerAddress, \\\"CommunityIssuance: caller is not issuer\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc39370283264daf445366499929b1e19dffb7f081b4423208ae7fd78693f01b0\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LiquityMath {\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x * y;\\n\\n        decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        // cap to avoid overflow\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        }\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll * NICR_PRECISION / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll * _price / _debt;\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb9ed155e8331948da867a6e089052dff0a667e25119ff602c6b88099f53b0ba\",\"license\":\"MIT\"},\"contracts/interfaces/IIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IIssuance {\\n    \\n    // --- Events ---\\n\\n    event SHADYTokenAddressSet(address _shadyTokenAddress);\\n    event StabilityPoolAddressSet(address _stabilityPoolAddress);\\n    event TotalSHADYIssuedUpdated(uint _totalSHADYIssued);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(address shadyTokenAddress_, address stabilityPoolAddress_) external;\\n\\n    function issueSHADY() external returns (uint);\\n\\n    function sendSHADY(address account_, uint shadyAmount_) external;\\n}\\n\",\"keccak256\":\"0x9a439634f0ad04cf564b2b65adfe2bcd2dfe879da466a413535e92cf1377bf2d\",\"license\":\"MIT\"},\"contracts/interfaces/ISHADYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ISHADYToken is IERC20, IERC20Permit {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address communityIssuanceAddress);\\n    event VeAddressSet(address veAddress);\\n    event LockupContractFactoryAddressSet(address lockupContractFactoryAddress);\\n\\n    // --- Functions ---\\n\\n    function getDeploymentStartTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0bbd59d283d2bb3fe7e414bf7b72803221212720bd012f56d585470781e3b662\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5061001a33610023565b42608052610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b608051610b39610095600039600081816101f301526106660152610b396000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c806390107afe1161008757806390107afe14610159578063a20baee61461016c578063a3f4df7e1461017b578063a63234e0146101bf578063aecb7be9146101d2578063c0504182146101db578063ecda10f5146101ee578063f2fde38b1461021557600080fd5b80630fc83da3146100da57806356061388146100fc578063586653e11461011c57806361ec893d1461012457806363f620c41461012c578063715018a61461013e5780638da5cb5b14610148575b600080fd5b6100e9670de0b5809a6f939881565b6040519081526020015b60405180910390f35b60015461010f906001600160a01b031681565b6040516100f3919061092b565b6100e9610228565b6100e9603c81565b6100e96a18d0bf423c03d8de00000081565b6101466102b7565b005b6000546001600160a01b031661010f565b61014661016736600461095b565b6102cb565b6100e9670de0b6b3a764000081565b6101b2604051806040016040528060188152602001774c69717569646974795265776172647349737375616e636560401b81525081565b6040516100f3919061098e565b60025461010f906001600160a01b031681565b6100e960035481565b6101466101e93660046109dc565b610408565b6100e97f000000000000000000000000000000000000000000000000000000000000000081565b610146610223366004610a06565b610579565b60006102326105f2565b6000670de0b6b3a764000061024561065c565b61025a906a18d0bf423c03d8de000000610a37565b6102649190610a64565b90506000600354826102769190610a78565b60038390556040518381529091507fca8c6da9ce6aab55ba8fc9e67c3d6d58167efeee4a5424619000f3efe9a9ef759060200160405180910390a192915050565b6102bf6106e2565b6102c9600061073c565b565b6102d36106e2565b6102dc8261078c565b600180546001600160a01b038085166001600160a01b0319928316811790935560028054918516919092161790556040516370a0823160e01b8152600091906370a082319061032f90309060040161092b565b602060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190610a8b565b90506a18d0bf423c03d8de00000081101561038d5761038d610aa4565b7f9b259e146c2867d904f1e19936caa92e357539c679b78fb96c0a0b15160b7d18836040516103bc919061092b565b60405180910390a17f45c53611bc8ba9e11f4f8173bda9e3faf89c395ddb83f9a55230b156828db315826040516103f3919061092b565b60405180910390a16104036102b7565b505050565b6104106105f2565b6001546040516370a0823160e01b81526001600160a01b03909116906370a082319061044090309060040161092b565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190610a8b565b816003546a18d0bf423c03d8de00000061049b9190610a78565b6104a59190610aba565b11156105025760405162461bcd60e51b815260206004820152602160248201527f49737375616e63653a206e6f7420656e6f7567682069737375656420534841446044820152605960f81b60648201526084015b60405180910390fd5b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190610acd565b6105816106e2565b6001600160a01b0381166105e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f9565b6105ef8161073c565b50565b6002546001600160a01b031633146102c95760405162461bcd60e51b815260206004820152602760248201527f436f6d6d756e69747949737375616e63653a2063616c6c6572206973206e6f746044820152661034b9b9bab2b960c91b60648201526084016104f9565b600080603c61068b7f000000000000000000000000000000000000000000000000000000000000000042610a78565b6106959190610a64565b905060006106ab670de0b5809a6f939883610835565b905060006106c182670de0b6b3a7640000610a78565b9050670de0b6b3a76400008111156106db576106db610aa4565b9392505050565b6000546001600160a01b031633146102c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166107e25760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016104f9565b803b806108315760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016104f9565b5050565b6000631f54050082111561084b57631f54050091505b816000036108625750670de0b6b3a76400006108e6565b670de0b6b3a764000083835b60018111156108d657610882600282610aef565b6000036108a75761089382836108ec565b91506108a0600282610a64565b905061086e565b6108b182846108ec565b92506108bd82836108ec565b915060026108cc600183610a78565b6108a09190610a64565b6108e082846108ec565b93505050505b92915050565b6000806108f98385610a37565b9050670de0b6b3a764000061090f600282610a64565b6109199083610aba565b6109239190610a64565b949350505050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461095657600080fd5b919050565b6000806040838503121561096e57600080fd5b6109778361093f565b91506109856020840161093f565b90509250929050565b600060208083528351808285015260005b818110156109bb5785810183015185820160400152820161099f565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156109ef57600080fd5b6109f88361093f565b946020939093013593505050565b600060208284031215610a1857600080fd5b6106db8261093f565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108e6576108e6610a21565b634e487b7160e01b600052601260045260246000fd5b600082610a7357610a73610a4e565b500490565b818103818111156108e6576108e6610a21565b600060208284031215610a9d57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b808201808211156108e6576108e6610a21565b600060208284031215610adf57600080fd5b815180151581146106db57600080fd5b600082610afe57610afe610a4e565b50069056fea2646970667358221220804855dfd1019022f4bd9b1295351b12bf1dc052cd5a5bf3338a18a9e0f61f2b64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c806390107afe1161008757806390107afe14610159578063a20baee61461016c578063a3f4df7e1461017b578063a63234e0146101bf578063aecb7be9146101d2578063c0504182146101db578063ecda10f5146101ee578063f2fde38b1461021557600080fd5b80630fc83da3146100da57806356061388146100fc578063586653e11461011c57806361ec893d1461012457806363f620c41461012c578063715018a61461013e5780638da5cb5b14610148575b600080fd5b6100e9670de0b5809a6f939881565b6040519081526020015b60405180910390f35b60015461010f906001600160a01b031681565b6040516100f3919061092b565b6100e9610228565b6100e9603c81565b6100e96a18d0bf423c03d8de00000081565b6101466102b7565b005b6000546001600160a01b031661010f565b61014661016736600461095b565b6102cb565b6100e9670de0b6b3a764000081565b6101b2604051806040016040528060188152602001774c69717569646974795265776172647349737375616e636560401b81525081565b6040516100f3919061098e565b60025461010f906001600160a01b031681565b6100e960035481565b6101466101e93660046109dc565b610408565b6100e97f000000000000000000000000000000000000000000000000000000000000000081565b610146610223366004610a06565b610579565b60006102326105f2565b6000670de0b6b3a764000061024561065c565b61025a906a18d0bf423c03d8de000000610a37565b6102649190610a64565b90506000600354826102769190610a78565b60038390556040518381529091507fca8c6da9ce6aab55ba8fc9e67c3d6d58167efeee4a5424619000f3efe9a9ef759060200160405180910390a192915050565b6102bf6106e2565b6102c9600061073c565b565b6102d36106e2565b6102dc8261078c565b600180546001600160a01b038085166001600160a01b0319928316811790935560028054918516919092161790556040516370a0823160e01b8152600091906370a082319061032f90309060040161092b565b602060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190610a8b565b90506a18d0bf423c03d8de00000081101561038d5761038d610aa4565b7f9b259e146c2867d904f1e19936caa92e357539c679b78fb96c0a0b15160b7d18836040516103bc919061092b565b60405180910390a17f45c53611bc8ba9e11f4f8173bda9e3faf89c395ddb83f9a55230b156828db315826040516103f3919061092b565b60405180910390a16104036102b7565b505050565b6104106105f2565b6001546040516370a0823160e01b81526001600160a01b03909116906370a082319061044090309060040161092b565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190610a8b565b816003546a18d0bf423c03d8de00000061049b9190610a78565b6104a59190610aba565b11156105025760405162461bcd60e51b815260206004820152602160248201527f49737375616e63653a206e6f7420656e6f7567682069737375656420534841446044820152605960f81b60648201526084015b60405180910390fd5b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190610acd565b6105816106e2565b6001600160a01b0381166105e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f9565b6105ef8161073c565b50565b6002546001600160a01b031633146102c95760405162461bcd60e51b815260206004820152602760248201527f436f6d6d756e69747949737375616e63653a2063616c6c6572206973206e6f746044820152661034b9b9bab2b960c91b60648201526084016104f9565b600080603c61068b7f000000000000000000000000000000000000000000000000000000000000000042610a78565b6106959190610a64565b905060006106ab670de0b5809a6f939883610835565b905060006106c182670de0b6b3a7640000610a78565b9050670de0b6b3a76400008111156106db576106db610aa4565b9392505050565b6000546001600160a01b031633146102c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166107e25760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016104f9565b803b806108315760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016104f9565b5050565b6000631f54050082111561084b57631f54050091505b816000036108625750670de0b6b3a76400006108e6565b670de0b6b3a764000083835b60018111156108d657610882600282610aef565b6000036108a75761089382836108ec565b91506108a0600282610a64565b905061086e565b6108b182846108ec565b92506108bd82836108ec565b915060026108cc600183610a78565b6108a09190610a64565b6108e082846108ec565b93505050505b92915050565b6000806108f98385610a37565b9050670de0b6b3a764000061090f600282610a64565b6109199083610aba565b6109239190610a64565b949350505050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461095657600080fd5b919050565b6000806040838503121561096e57600080fd5b6109778361093f565b91506109856020840161093f565b90509250929050565b600060208083528351808285015260005b818110156109bb5785810183015185820160400152820161099f565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156109ef57600080fd5b6109f88361093f565b946020939093013593505050565b600060208284031215610a1857600080fd5b6106db8261093f565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108e6576108e6610a21565b634e487b7160e01b600052601260045260246000fd5b600082610a7357610a73610a4e565b500490565b818103818111156108e6576108e6610a21565b600060208284031215610a9d57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b808201808211156108e6576108e6610a21565b600060208284031215610adf57600080fd5b815180151581146106db57600080fd5b600082610afe57610afe610a4e565b50069056fea2646970667358221220804855dfd1019022f4bd9b1295351b12bf1dc052cd5a5bf3338a18a9e0f61f2b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/LiquidityRewardsIssuance.sol:LiquidityRewardsIssuance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21843,
        "contract": "contracts/LiquidityRewardsIssuance.sol:LiquidityRewardsIssuance",
        "label": "shadyToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISHADYToken)23623"
      },
      {
        "astId": 21845,
        "contract": "contracts/LiquidityRewardsIssuance.sol:LiquidityRewardsIssuance",
        "label": "issuerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21847,
        "contract": "contracts/LiquidityRewardsIssuance.sol:LiquidityRewardsIssuance",
        "label": "totalSHADYIssued",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISHADYToken)23623": {
        "encoding": "inplace",
        "label": "contract ISHADYToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}