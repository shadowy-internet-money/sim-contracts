{
  "address": "0x960FdE8a92d5Ad1245E7AD267641F230d9a39Df1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_SIMFee",
          "type": "uint256"
        }
      ],
      "name": "SIMBorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_simTokenAddress",
          "type": "address"
        }
      ],
      "name": "SIMTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_VeAddress",
          "type": "address"
        }
      ],
      "name": "SimVeDistributorAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WSTETHAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "addColAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SIMChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "moveWSTETHGainToTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SIMAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_SIMAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repaySIM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WSTETHAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simVeDistributorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simToken",
      "outputs": [
        {
          "internalType": "contract ISIMToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simVeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SIMAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawSIM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc57822a1999c3c8038f8767ffb72a9f0c3b9a97ee91d5717296e0d41aaabeb63",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0x960FdE8a92d5Ad1245E7AD267641F230d9a39Df1",
    "transactionIndex": 23,
    "gasUsed": "3115493",
    "logsBloom": "0x
    "blockHash": "0x9f7306a2eae05871d979614773365ebcbcedcb832544d3be6d9d474df8c3a9af",
    "transactionHash": "0xc57822a1999c3c8038f8767ffb72a9f0c3b9a97ee91d5717296e0d41aaabeb63",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9518028,
        "transactionHash": "0xc57822a1999c3c8038f8767ffb72a9f0c3b9a97ee91d5717296e0d41aaabeb63",
        "address": "0x960FdE8a92d5Ad1245E7AD267641F230d9a39Df1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x9f7306a2eae05871d979614773365ebcbcedcb832544d3be6d9d474df8c3a9af"
      }
    ],
    "blockNumber": 9518028,
    "cumulativeGasUsed": "7309676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ec6f9376f02b1b14c8f28d3638a109e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SIMFee\",\"type\":\"uint256\"}],\"name\":\"SIMBorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_simTokenAddress\",\"type\":\"address\"}],\"name\":\"SIMTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_VeAddress\",\"type\":\"address\"}],\"name\":\"SimVeDistributorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WSTETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addColAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SIMChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"moveWSTETHGainToTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SIMAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SIMAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repaySIM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WSTETHAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simVeDistributorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simToken\",\"outputs\":[{\"internalType\":\"contract ISIMToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simVeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SIMAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawSIM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimCollateral()\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ITroveManager.sol\\\";\\nimport \\\"./interfaces/ISIMToken.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/ISortedTroves.sol\\\";\\nimport \\\"./interfaces/IVeDistributor.sol\\\";\\nimport \\\"./dependencies/Base.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\n\\n// https://github.com/liquity/dev/blob/main/packages/contracts/contracts/BorrowerOperations.sol\\ncontract BorrowerOperations is Base, Ownable, CheckContract, IBorrowerOperations {\\n    string constant public NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public WSTETHAddress;\\n\\n    ITroveManager public troveManager;\\n\\n    address public stabilityPoolAddress;\\n\\n    ICollSurplusPool public collSurplusPool;\\n\\n    address public simVeDistributor;\\n\\n    ISIMToken public simToken;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    address public feeReceiver;\\n\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint price;\\n        uint collChange;\\n        uint netDebtChange;\\n        bool isCollIncrease;\\n        uint debt;\\n        uint coll;\\n        uint oldICR;\\n        uint newICR;\\n        uint newTCR;\\n        uint SIMFee;\\n        uint newDebt;\\n        uint newColl;\\n        uint stake;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint price;\\n        uint SIMFee;\\n        uint netDebt;\\n        uint compositeDebt;\\n        uint ICR;\\n        uint NICR;\\n        uint stake;\\n        uint arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        ISIMToken simToken;\\n    }\\n\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    // --- Dependency setters ---\\n\\n    function setAddresses(\\n        address _WSTETHAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _simTokenAddress,\\n        address _simVeDistributorAddress,\\n        address _feeReceiver\\n    )\\n    external\\n    override\\n    onlyOwner\\n    {\\n        // This makes impossible to open a trove with zero withdrawn SIM\\n        assert(MIN_NET_DEBT > 0);\\n\\n        _checkContract(_WSTETHAddress);\\n        _checkContract(_troveManagerAddress);\\n        _checkContract(_activePoolAddress);\\n        _checkContract(_defaultPoolAddress);\\n        _checkContract(_stabilityPoolAddress);\\n        _checkContract(_collSurplusPoolAddress);\\n        _checkContract(_priceFeedAddress);\\n        _checkContract(_sortedTrovesAddress);\\n        _checkContract(_simTokenAddress);\\n        _checkContract(_simVeDistributorAddress);\\n\\n        WSTETHAddress = _WSTETHAddress;\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        simToken = ISIMToken(_simTokenAddress);\\n        simVeDistributor = _simVeDistributorAddress;\\n        feeReceiver = _feeReceiver;\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit SIMTokenAddressChanged(_simTokenAddress);\\n        emit SimVeDistributorAddressChanged(_simVeDistributorAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n\\n    function openTrove(uint amount, uint _maxFeePercentage, uint _SIMAmount, address _upperHint, address _lowerHint) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(troveManager, activePool, simToken);\\n        LocalVariables_openTrove memory vars;\\n\\n        require(IERC20(WSTETHAddress).transferFrom(msg.sender, address(this), amount));\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.SIMFee;\\n        vars.netDebt = _SIMAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.SIMFee = _triggerBorrowingFee(contractsCache.troveManager, contractsCache.simToken, _SIMAmount, _maxFeePercentage);\\n            vars.netDebt = vars.netDebt + vars.SIMFee;\\n        }\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested SIM amount + SIM borrowing fee + SIM gas comp.\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        vars.ICR = LiquityMath._computeCR(amount, vars.compositeDebt, vars.price);\\n        vars.NICR = LiquityMath._computeNominalCR(amount, vars.compositeDebt);\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint newTCR = _getNewTCRFromTroveChange(amount, true, vars.compositeDebt, true, vars.price);  // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(msg.sender, 1);\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, amount);\\n        contractsCache.troveManager.increaseTroveDebt(msg.sender, vars.compositeDebt);\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(msg.sender);\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(msg.sender);\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        // Move the ether to the Active Pool, and mint the SIMAmount to the borrower\\n        _activePoolAddColl(contractsCache.activePool, amount);\\n        _withdrawSIM(contractsCache.activePool, contractsCache.simToken, msg.sender, _SIMAmount, vars.netDebt);\\n\\n        emit TroveUpdated(msg.sender, vars.compositeDebt, amount, vars.stake, uint8(BorrowerOperation.openTrove));\\n        emit SIMBorrowingFeePaid(msg.sender, vars.SIMFee);\\n    }\\n\\n    // Send WSTETH as collateral to a trove\\n    function addColl(uint amount, address _upperHint, address _lowerHint) external override {\\n        require(IERC20(WSTETHAddress).transferFrom(msg.sender, address(this), amount));\\n        _adjustTrove(msg.sender, 0, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Send WSTETH as collateral to a trove. Called by only the Stability Pool.\\n    function moveWSTETHGainToTrove(address _borrower, address _upperHint, address _lowerHint) external payable override {\\n        _requireCallerIsStabilityPool();\\n        _adjustTrove(_borrower, 0, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Withdraw WSTETH collateral from a trove\\n    function withdrawColl(uint _collWithdrawal, address _upperHint, address _lowerHint) external override {\\n        _adjustTrove(msg.sender, _collWithdrawal, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Withdraw SIM tokens from a trove: mint new SIM tokens to the owner, and increase the trove's debt accordingly\\n    function withdrawSIM(uint _maxFeePercentage, uint _SIMAmount, address _upperHint, address _lowerHint) external override {\\n        _adjustTrove(msg.sender, 0, _SIMAmount, true, _upperHint, _lowerHint, _maxFeePercentage);\\n    }\\n\\n    // Repay SIM tokens to a Trove: Burn the repaid SIM tokens, and reduce the trove's debt accordingly\\n    function repaySIM(uint _SIMAmount, address _upperHint, address _lowerHint) external override {\\n        _adjustTrove(msg.sender, 0, _SIMAmount, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    function adjustTrove(uint addColAmount, uint _maxFeePercentage, uint _collWithdrawal, uint _SIMChange, bool _isDebtIncrease, address _upperHint, address _lowerHint) external payable override {\\n        if (addColAmount > 0) {\\n            require(IERC20(WSTETHAddress).transferFrom(msg.sender, address(this), addColAmount));\\n        }\\n        _adjustTrove(msg.sender, _collWithdrawal, _SIMChange, _isDebtIncrease, _upperHint, _lowerHint, _maxFeePercentage);\\n    }\\n\\n    /*\\n    * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n    *\\n    * It therefore expects either a positive msg.value, or a positive _collWithdrawal argument.\\n    *\\n    * If both are positive, it will revert.\\n    */\\n    function _adjustTrove(address _borrower, uint _collWithdrawal, uint _SIMChange, bool _isDebtIncrease, address _upperHint, address _lowerHint, uint _maxFeePercentage) internal {\\n        ContractsCache memory contractsCache = ContractsCache(troveManager, activePool, simToken);\\n        LocalVariables_adjustTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n            _requireNonZeroDebtChange(_SIMChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal);\\n        _requireNonZeroAdjustment(_collWithdrawal, _SIMChange);\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure WSTETH transfer from the Stability Pool to a trove\\n        uint b = IERC20(WSTETHAddress).balanceOf(address(this));\\n        assert(msg.sender == _borrower || (msg.sender == stabilityPoolAddress && b > 0 && _SIMChange == 0));\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not WSTETH was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(b, _collWithdrawal);\\n\\n        vars.netDebtChange = _SIMChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            vars.SIMFee = _triggerBorrowingFee(contractsCache.troveManager, contractsCache.simToken, _SIMChange, _maxFeePercentage);\\n            vars.netDebtChange = vars.netDebtChange + vars.SIMFee; // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(vars.coll, vars.debt, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease, vars.price);\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(isRecoveryMode, _collWithdrawal, _isDebtIncrease, vars);\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough SIM\\n        if (!_isDebtIncrease && _SIMChange > 0) {\\n            _requireAtLeastMinNetDebt(_getNetDebt(vars.debt) - vars.netDebtChange);\\n            _requireValidSIMRepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientSIMBalance(contractsCache.simToken, _borrower, vars.netDebtChange);\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(contractsCache.troveManager, _borrower, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(_borrower);\\n\\n        // Re-insert trove in to the sorted list\\n        uint newNICR = _getNewNominalICRFromTroveChange(vars.coll, vars.debt, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease);\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        emit TroveUpdated(_borrower, vars.newDebt, vars.newColl, vars.stake, uint8(BorrowerOperation.adjustTrove));\\n        emit SIMBorrowingFeePaid(msg.sender,  vars.SIMFee);\\n\\n        // Use the unmodified _SIMChange here, as we don't send the fee to the user\\n        _moveTokensAndWSTETHfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.simToken,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _SIMChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    function closeTrove() external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        ISIMToken simTokenCached = simToken;\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint price = priceFeed.fetchPrice();\\n        _requireNotInRecoveryMode(price);\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint debt = troveManagerCached.getTroveDebt(msg.sender);\\n\\n        _requireSufficientSIMBalance(simTokenCached, msg.sender, debt/*.sub(SIM_GAS_COMPENSATION)*/);\\n\\n        uint newTCR = _getNewTCRFromTroveChange(coll, false, debt, false, price);\\n        _requireNewTCRisAboveCCR(newTCR);\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        emit TroveUpdated(msg.sender, 0, 0, 0, uint8(BorrowerOperation.closeTrove));\\n\\n        // Burn the repaid SIM from the user's balance and the gas compensation from the Gas Pool\\n        _repaySIM(activePoolCached, simTokenCached, msg.sender, debt);\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendWSTETH(msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n     */\\n    function claimCollateral() external override {\\n        // send WSTETH from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _triggerBorrowingFee(ITroveManager _troveManager, ISIMToken _simToken, uint _SIMAmount, uint _maxFeePercentage) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        uint SIMFee = _troveManager.getBorrowingFee(_SIMAmount);\\n\\n        _requireUserAcceptsFee(SIMFee, _SIMAmount, _maxFeePercentage);\\n\\n        // Send half of fee to Ve contract\\n        uint half = SIMFee / 2;\\n        _simToken.mint(simVeDistributor, half);\\n        IVeDistributor(simVeDistributor).checkpoint();\\n\\n        // Send half of fee to feeReceiver\\n        _simToken.mint(feeReceiver, SIMFee - half);\\n\\n        return SIMFee;\\n    }\\n\\n    /*function _getUSDValue(uint _coll, uint _price) internal pure returns (uint) {\\n        uint usdValue = _price * _coll / DECIMAL_PRECISION;\\n\\n        return usdValue;\\n    }*/\\n\\n    function _getCollChange(\\n        uint _collReceived,\\n        uint _requestedCollWithdrawal\\n    )\\n    internal\\n    pure\\n    returns(uint collChange, bool isCollIncrease)\\n    {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment\\n    (\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    )\\n    internal\\n    returns (uint, uint)\\n    {\\n        uint newColl = (_isCollIncrease) ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n        uint newDebt = (_isDebtIncrease) ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\n            : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensAndWSTETHfromAdjustment\\n    (\\n        IActivePool _activePool,\\n        ISIMToken _simToken,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _SIMChange,\\n        bool _isDebtIncrease,\\n        uint _netDebtChange\\n    )\\n    internal\\n    {\\n        if (_isDebtIncrease) {\\n            _withdrawSIM(_activePool, _simToken, _borrower, _SIMChange, _netDebtChange);\\n        } else {\\n            _repaySIM(_activePool, _simToken, _borrower, _SIMChange);\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendWSTETH(_borrower, _collChange);\\n        }\\n    }\\n\\n    // Send WSTETH to Active Pool and increase its recorded WSTETH balance\\n    function _activePoolAddColl(IActivePool _activePool, uint _amount) internal {\\n        require(IERC20(WSTETHAddress).transfer(address(_activePool), _amount));\\n        _activePool.receiveWSTETH(_amount);\\n    }\\n\\n    // Issue the specified amount of SIM to _account and increases the total active debt (_netDebtIncrease potentially includes a SIMFee)\\n    function _withdrawSIM(IActivePool _activePool, ISIMToken _simToken, address _account, uint _SIMAmount, uint _netDebtIncrease) internal {\\n        _activePool.increaseSIMDebt(_netDebtIncrease);\\n        _simToken.mint(_account, _SIMAmount);\\n    }\\n\\n    // Burn the specified amount of SIM from _account and decreases the total active debt\\n    function _repaySIM(IActivePool _activePool, ISIMToken _simToken, address _account, uint _SIM) internal {\\n        _activePool.decreaseSIMDebt(_SIM);\\n        _simToken.burn(_account, _SIM);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    function _requireSingularCollChange(uint _collWithdrawal) internal view {\\n        require(IERC20(WSTETHAddress).balanceOf(address(this)) == 0 || _collWithdrawal == 0, \\\"BorrowerOperations: Cannot withdraw and add coll\\\");\\n    }\\n\\n    /*function _requireCallerIsBorrower(address _borrower) internal view {\\n        require(msg.sender == _borrower, \\\"BorrowerOps: Caller must be the borrower for a withdrawal\\\");\\n    }*/\\n\\n    function _requireNonZeroAdjustment(uint _collWithdrawal, uint _SIMChange) internal view {\\n        require(IERC20(WSTETHAddress).balanceOf(address(this)) != 0 || _collWithdrawal != 0 || _SIMChange != 0, \\\"BorrowerOps: There must be either a collateral change or a debt change\\\");\\n    }\\n\\n    function _requireTroveisActive(ITroveManager _troveManager, address _borrower) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status == 1, \\\"BorrowerOps: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireTroveisNotActive(ITroveManager _troveManager, address _borrower) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status != 1, \\\"BorrowerOps: Trove is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint _SIMChange) internal pure {\\n        require(_SIMChange > 0, \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\");\\n    }\\n\\n    function _requireNotInRecoveryMode(uint _price) internal view {\\n        require(!_checkRecoveryMode(_price), \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\");\\n    }\\n\\n    function _requireNoCollWithdrawal(uint _collWithdrawal) internal pure {\\n        require(_collWithdrawal == 0, \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\");\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode\\n    (\\n        bool _isRecoveryMode,\\n        uint _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    )\\n    internal\\n    view\\n    {\\n        /*\\n        *In Recovery Mode, only allow:\\n        *\\n        * - Pure collateral top-up\\n        * - Pure debt repayment\\n        * - Collateral top-up with debt repayment\\n        * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n        *\\n        * In Normal Mode, ensure:\\n        *\\n        * - The new ICR is above MCR\\n        * - The adjustment won't pull the TCR below CCR\\n        */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else { // if Normal Mode\\n            _requireICRisAboveMCR(_vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTroveChange(_vars.collChange, _vars.isCollIncrease, _vars.netDebtChange, _isDebtIncrease, _vars.price);\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(uint _newICR) internal pure {\\n        require(_newICR >= MCR, \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\");\\n    }\\n\\n    function _requireICRisAboveCCR(uint _newICR) internal pure {\\n        require(_newICR >= CCR, \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\");\\n    }\\n\\n    function _requireNewICRisAboveOldICR(uint _newICR, uint _oldICR) internal pure {\\n        require(_newICR >= _oldICR, \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\");\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint _newTCR) internal pure {\\n        require(_newTCR >= CCR, \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\");\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint _netDebt) internal pure {\\n        require (_netDebt >= MIN_NET_DEBT, \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\");\\n    }\\n\\n    function _requireValidSIMRepayment(uint _currentDebt, uint _debtRepayment) internal pure {\\n        require(_debtRepayment <= _currentDebt/*.sub(SIM_GAS_COMPENSATION)*/, \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\");\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(msg.sender == stabilityPoolAddress, \\\"BorrowerOps: Caller is not Stability Pool\\\");\\n    }\\n\\n    function _requireSufficientSIMBalance(ISIMToken _simToken, address _borrower, uint _debtRepayment) internal view {\\n        require(_simToken.balanceOf(_borrower) >= _debtRepayment, \\\"BorrowerOps: Caller doesnt have enough SIM to make repayment\\\");\\n    }\\n\\n    function _requireValidMaxFeePercentage(uint _maxFeePercentage, bool _isRecoveryMode) internal pure {\\n        if (_isRecoveryMode) {\\n            require(_maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must less than or equal to 100%\\\");\\n        } else {\\n            require(_maxFeePercentage >= BORROWING_FEE_FLOOR && _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\");\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange\\n    (\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    )\\n    pure\\n    internal\\n    returns (uint)\\n    {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(_coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease);\\n\\n        uint newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange\\n    (\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    )\\n    pure\\n    internal\\n    returns (uint)\\n    {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(_coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease);\\n\\n        uint newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    )\\n    internal\\n    pure\\n    returns (uint, uint)\\n    {\\n        uint newColl = _coll;\\n        uint newDebt = _debt;\\n\\n        newColl = _isCollIncrease ? _coll + _collChange :  _coll - _collChange;\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTroveChange\\n    (\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    )\\n    internal\\n    view\\n    returns (uint)\\n    {\\n        uint totalColl = getEntireSystemColl();\\n        uint totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease ? totalColl + _collChange : totalColl - _collChange;\\n        totalDebt = _isDebtIncrease ? totalDebt + _debtChange : totalDebt - _debtChange;\\n\\n        uint newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    /*function getCompositeDebt(uint _debt) external pure override returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }*/\\n}\\n\",\"keccak256\":\"0x90ad8c2210ad9b07a17a291abbe3e50ee0e734a332fe1b414ae5a98ad1db6e30\",\"license\":\"MIT\"},\"contracts/dependencies/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IBase.sol\\\";\\n\\n/* \\n* Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n* common functions. \\n*/\\ncontract Base is BaseMath, IBase {\\n    uint constant public _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint constant public MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint constant public CCR = 1500000000000000000; // 150%\\n\\n    // Amount of SIM to be locked in gas pool on opening troves\\n//    uint constant public SIM_GAS_COMPENSATION = 200e18;\\n\\n    // Minimum amount of net SIM debt a trove must have\\n    uint constant public MIN_NET_DEBT = 1e18; //1800e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint constant public PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint constant public BORROWING_FEE_FLOOR = DECIMAL_PRECISION / 1000 * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint _debt) internal pure returns (uint) {\\n        return _debt/* + SIM_GAS_COMPENSATION*/;\\n    }\\n\\n    function _getNetDebt(uint _debt) internal pure returns (uint) {\\n        return _debt/* + SIM_GAS_COMPENSATION*/;\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(uint _entireColl) internal pure returns (uint) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n        uint activeColl = activePool.getWSTETH();\\n        uint liquidatedColl = defaultPool.getWSTETH();\\n\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n        uint activeDebt = activePool.getSIMDebt();\\n        uint closedDebt = defaultPool.getSIMDebt();\\n\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(uint _price) internal view returns (uint TCR) {\\n        uint entireSystemColl = getEntireSystemColl();\\n        uint entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint _price) internal view returns (bool) {\\n        uint TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n        uint feePercentage = _fee * DECIMAL_PRECISION / _amount;\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd7cf2fa10d9ddc2236b243d16b8ae22c9c8ec15aee73e4c9b4d3d4054c9ed604\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0xfbd2340d208377996fc6305a28a939c849d7337e8fa1789e3130b73106de1d9f\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     */\\n    function _checkContract(address account_) internal view {\\n        require(account_ != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account_) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6282e853a7b31ee8bbbb4008869300bf900f7f43610f5b4be9499d40549b207a\",\"license\":\"MIT\"},\"contracts/dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary LiquityMath {\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x * y;\\n\\n        decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n        // cap to avoid overflow\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        }\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll * NICR_PRECISION / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll * _price / _debt;\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb9ed155e8331948da867a6e089052dff0a667e25119ff602c6b88099f53b0ba\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolSIMDebtUpdated(uint _SIMDebt);\\n    event ActivePoolWSTETHBalanceUpdated(uint _WSTETH);\\n\\n    // --- Functions ---\\n    function sendWSTETH(address _account, uint _amount) external;\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x43e7e6c53312584b369d356a350f2027530ad8c123cee37657b6f3d21cfcdfca\",\"license\":\"MIT\"},\"contracts/interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\n\\ninterface IBase {\\n    function priceFeed() external view returns (IPriceFeed);\\n}\\n\",\"keccak256\":\"0x861429b40d61dfeedf3166fd9fabe1f2864a6e335784228ad83041f9c889d7fd\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address  _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event SIMTokenAddressChanged(address _simTokenAddress);\\n    event SimVeDistributorAddressChanged(address _VeAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint arrayIndex);\\n    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\\n    event SIMBorrowingFeePaid(address indexed _borrower, uint _SIMFee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _simTokenAddress,\\n        address _shadyStakingAddress,\\n        address _feeReceiver\\n    ) external;\\n\\n    function openTrove(uint amount, uint _maxFee, uint _SIMAmount, address _upperHint, address _lowerHint) external payable;\\n\\n    function addColl(uint amount, address _upperHint, address _lowerHint) external;\\n\\n    function moveWSTETHGainToTrove(address _user, address _upperHint, address _lowerHint) external payable;\\n\\n    function withdrawColl(uint _amount, address _upperHint, address _lowerHint) external;\\n\\n    function withdrawSIM(uint _maxFee, uint _amount, address _upperHint, address _lowerHint) external;\\n\\n    function repaySIM(uint _amount, address _upperHint, address _lowerHint) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(uint addColAmount, uint _maxFee, uint _collWithdrawal, uint _debtChange, bool isDebtIncrease, address _upperHint, address _lowerHint) external payable;\\n\\n    function claimCollateral() external;\\n\\n//    function getCompositeDebt(uint _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0x1220371f708d0426c2deeab7ffcee6fff03f951a38b6a1f0f183921e9d76932c\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\ninterface ICollSurplusPool {\\n\\n    // --- Events ---\\n\\n    event WSTETHAddressChanged(address _newWSTETHAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _WSTETHAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getWSTETH() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n\\n    function accountSurplus(address _account, uint _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x8ec9e63e51efe61f20e4f3088f69dc2d16aece7bb651cd03be199cbcc50a49bf\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolSIMDebtUpdated(uint _SIMDebt);\\n    event DefaultPoolWSTETHBalanceUpdated(uint _WSTETH);\\n\\n    // --- Functions ---\\n    function sendWSTETHToActivePool(uint _amount) external;\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x6f5fa0dbd6ea671d127969b2b0c8369f5a32e917dac9fa2eb67aa23313036e9f\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    \\n    // --- Events ---\\n    \\n    event WSTETHBalanceUpdated(uint _newBalance);\\n    event SIMBalanceUpdated(uint _newBalance);\\n    event WSTETHAddressChanged(address _newWSTETHAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n    \\n    function getWSTETH() external view returns (uint);\\n\\n    function getSIMDebt() external view returns (uint);\\n\\n    function increaseSIMDebt(uint _amount) external;\\n\\n    function decreaseSIMDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x75d5870d6307794574684881915ae899ba46f514e523f8672912ef908a1d1d85\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPriceFeed {\\n\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n   \\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n}\\n\",\"keccak256\":\"0xd48e100d585578b5eec065f625881aa4539745a125c8a7052481b75fbc934901\",\"license\":\"MIT\"},\"contracts/interfaces/ISHADYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ISHADYToken is IERC20, IERC20Permit {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address communityIssuanceAddress);\\n    event VeAddressSet(address veAddress);\\n    event LockupContractFactoryAddressSet(address lockupContractFactoryAddress);\\n\\n    // --- Functions ---\\n\\n    function getDeploymentStartTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0bbd59d283d2bb3fe7e414bf7b72803221212720bd012f56d585470781e3b662\",\"license\":\"MIT\"},\"contracts/interfaces/ISIMToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ISIMToken is IERC20, IERC20Permit {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address troveManagerAddress);\\n    event StabilityPoolAddressChanged(address newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(address newBorrowerOperationsAddress);\\n    event LUSDTokenBalanceUpdated(address user, uint amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(address account_, uint256 amount_) external;\\n\\n    function sendToPool(address sender_, address poolAddress, uint256 amount_) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0x295a4dba127380ef6b9ca9a3b9cbb762d10d6288a82e569bbdb562315f45656b\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n    \\n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\\n\\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\\n\\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x79acb39627952e016fbf3ecd352a88bc662817f62f76357b6c737ee316949302\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/*\\n * The Stability Pool holds SIM tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its SIM debt gets offset with\\n * SIM in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of SIM tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a SIM loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an WSTETH gain, as the WSTETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total SIM in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / WSTETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- SHADY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An SHADY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued SHADY in proportion to the deposit as a share of total deposits. The SHADY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n\\n    // --- Events ---\\n    \\n    event StabilityPoolWSTETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolSIMBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event SIMTokenAddressChanged(address _newSIMTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(address indexed _frontEnd, uint _newFrontEndStake, address _depositor);\\n\\n    event WSTETHGainWithdrawn(address indexed _depositor, uint _WSTETH, uint _SIMLoss);\\n    event SHADYPaidToDepositor(address indexed _depositor, uint _SHADY);\\n    event SHADYPaidToFrontEnd(address indexed _frontEnd, uint _SHADY);\\n    event WSTETHSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other SIM contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _WSTETHAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _SIMTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (SHADY, WSTETH) to depositor\\n     * - Sends the tagged front end's accumulated SHADY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (SHADY, WSTETH) to depositor\\n     * - Sends the tagged front end's accumulated SHADY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some WSTETH gain\\n     * ---\\n     * - Triggers a SHADY issuance, based on time passed since the last issuance. The SHADY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's SHADY gain to  depositor\\n     * - Sends all tagged front end's SHADY gain to the tagged front end\\n     * - Transfers the depositor's entire WSTETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawWSTETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n//    function registerFrontEnd(uint _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the SIM contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's WSTETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /*\\n     * Returns the total amount of WSTETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like WSTETH received from a self-destruct.\\n     */\\n    function getWSTETH() external view returns (uint);\\n\\n    /*\\n     * Returns SIM held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalSIMDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the WSTETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorWSTETHGain(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Calculate the SHADY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorSHADYGain(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Return the SHADY gain earned by the front end.\\n     */\\n//    function getFrontEndSHADYGain(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedSIMDeposit(address _depositor) external view returns (uint);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n//    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for WSTETH received\\n     * receive() external payable;\\n     */\\n    function receiveWSTETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x0e50659b56f98d22a2f9b9e373f1c4bee798060f6ca989ecea823628d39d99fb\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./ISIMToken.sol\\\";\\nimport \\\"./ISHADYToken.sol\\\";\\nimport \\\"./IVe.sol\\\";\\n\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBase {\\n    \\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SIMTokenAddressChanged(address _newSIMTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n//    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event SHADYTokenAddressChanged(address _shadyTokenAddress);\\n    event WSTETHVeDistibutorAddressChanged(address _shadyStakingAddress);\\n\\n    event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation/*, uint _SIMGasCompensation*/);\\n    event Redemption(uint _attemptedSIMAmount, uint _actualSIMAmount, uint _WSTETHSent, uint _WSTETHFee);\\n    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\\n    event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);\\n    event BaseRateUpdated(uint _baseRate);\\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n    event TotalStakesUpdated(uint _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);\\n    event LTermsUpdated(uint _L_WSTETH, uint _L_SIMDebt);\\n    event TroveSnapshotsUpdated(uint _L_WSTETH, uint _L_SIMDebt);\\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n//        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _simTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _shadyTokenAddress,\\n        address _veAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n    function simToken() external view returns (ISIMToken);\\n    function shadyToken() external view returns (ISHADYToken);\\n    function wstETHVeDistributor() external view returns (address);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(uint _index) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint _SIMAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint _partialRedemptionHintNICR,\\n        uint _maxIterations,\\n        uint _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(address _borrower) external returns (uint index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingWSTETHReward(address _borrower) external view returns (uint);\\n\\n    function getPendingSIMDebtReward(address _borrower) external view returns (uint);\\n\\n     function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(address _borrower) external view returns (\\n        uint debt,\\n        uint coll,\\n        uint pendingSIMDebtReward,\\n        uint pendingWSTETHReward\\n    );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint);\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(uint _WSTETHDrawn) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint SIMDebt) external view returns (uint);\\n    function getBorrowingFeeWithDecay(uint _SIMDebt) external view returns (uint);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint);\\n    \\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function setTroveStatus(address _borrower, uint num) external;\\n\\n    function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);\\n\\n    function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint); \\n\\n    function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint); \\n\\n    function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint); \\n\\n    function getTCR(uint _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5437efa603b786cef94bc696b61ae9710570ea8feee29603f2e5efe83f9eab91\",\"license\":\"MIT\"},\"contracts/interfaces/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n\\n//    function increaseF_WSTETH(uint _WSTETHFee) external;\\n\\n//    function increaseF_SIM(uint _SIMFee) external;\\n\\n    function lockedAmounts(uint veId, address stakingToken) external view returns (uint);\\n\\n    function lockedDerivedAmount(uint veId) external view returns (uint);\\n\\n    function lockedEnd(uint veId) external view returns (uint);\\n\\n    function tokens(uint idx) external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(address _token, uint _value, uint _lockDuration, address _to) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function increaseAmount(address _token, uint _tokenId, uint _value) external;\\n\\n    function totalSupplyAt(uint _block) external view returns (uint);\\n}\",\"keccak256\":\"0x925d70778879890862a50bff1f150b79ad160ab7fd5549addf748b978b5628d8\",\"license\":\"MIT\"},\"contracts/interfaces/IVeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IVeDistributor {\\n\\n  function rewardToken() external view returns (address);\\n\\n  function checkpoint() external;\\n\\n  function checkpointTotalSupply() external;\\n\\n  function claim(uint _tokenId) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0xc2b9b9f77d6419a78de1621eb1eb0bad42400ce04ce2de2e5fa842c976748472\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6136f080620000856000396000f3fe6080604052600436106101b95760003560e01c8063741bef1a116100ed578063a20baee611610090578063a20baee61461021e578063a3f4df7e1461046d578063ae918754146104b8578063b3f00674146104d8578063cda775f9146104f8578063d540f25014610518578063d56d6bbe14610538578063f2fde38b14610558578063f92d34331461057857600080fd5b8063741bef1a14610396578063794e5724146103b6578063795d26c3146103d25780637985c5e4146103e75780637f7dde4a14610407578063887105d3146104275780638da5cb5b1461043c5780638f09162b1461045a57600080fd5b80633d83908a116101605780633d83908a146102c85780634870dd9a146102e85780635530273c146102fd5780635617c5c71461031d5780635733d58f1461033d5780635da8b1c3146103595780636f0b0c1c1461036c578063715018a61461038157806372fe25aa1461021e57600080fd5b80630b622ab2146101be5780630e704d50146101f457806311edbb581461020b5780631bf435551461021e57806321916942146102485780633b0713c5146102685780633c8c75ea146102885780633cc74225146102a8575b600080fd5b3480156101ca57600080fd5b506006546101de906001600160a01b031681565b6040516101eb919061327e565b60405180910390f35b34801561020057600080fd5b5061020961058d565b005b6102096102193660046132ae565b6108fc565b34801561022a57600080fd5b5061023a670de0b6b3a764000081565b6040519081526020016101eb565b34801561025457600080fd5b506102096102633660046132f1565b61091b565b34801561027457600080fd5b50610209610283366004613337565b610932565b34801561029457600080fd5b506008546101de906001600160a01b031681565b3480156102b457600080fd5b506001546101de906001600160a01b031681565b3480156102d457600080fd5b506005546101de906001600160a01b031681565b3480156102f457600080fd5b5061023a60c881565b34801561030957600080fd5b50610209610318366004613337565b610944565b34801561032957600080fd5b506004546101de906001600160a01b031681565b34801561034957600080fd5b5061023a6714d1120d7b16000081565b61020961036736600461336a565b610955565b34801561037857600080fd5b506102096109f2565b34801561038d57600080fd5b50610209610a50565b3480156103a257600080fd5b506002546101de906001600160a01b031681565b3480156103c257600080fd5b5061023a670f43fc2c04ee000081565b3480156103de57600080fd5b5061023a610a64565b3480156103f357600080fd5b506102096104023660046133d6565b610b60565b34801561041357600080fd5b506000546101de906001600160a01b031681565b34801561043357600080fd5b5061023a610e58565b34801561044857600080fd5b506003546001600160a01b03166101de565b6102096104683660046134a2565b610f1d565b34801561047957600080fd5b506104ab60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516101eb91906134f2565b3480156104c457600080fd5b50600a546101de906001600160a01b031681565b3480156104e457600080fd5b50600b546101de906001600160a01b031681565b34801561050457600080fd5b506007546101de906001600160a01b031681565b34801561052457600080fd5b506009546101de906001600160a01b031681565b34801561054457600080fd5b50610209610553366004613337565b61156c565b34801561056457600080fd5b50610209610573366004613540565b6115fd565b34801561058457600080fd5b5061023a61167b565b6005546000546009546001600160a01b039283169291821691166105b1833361169d565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610620919061355b565b905061062b81611776565b604051630b07655760e01b81526001600160a01b03851690630b0765579061065790339060040161327e565b600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038716915063480cd578906106b890339060040161327e565b602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f9919061355b565b90506000856001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610729919061327e565b602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061355b565b90506107778433836117ee565b6000610788836000846000886118d1565b905061079381611944565b604051631fc5750960e31b81526001600160a01b0388169063fe2ba848906107bf90339060040161327e565b600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038a16925063cbd138ae915061081d90339060040161327e565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b5050604080516000808252602082018190528183015260016060820152905133935060008051602061369b83398151915292509081900360800190a2610893868633856119d4565b6040516303570deb60e61b81526001600160a01b0387169063d5c37ac0906108c1903390879060040161358a565b600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b5050505050505050505050565b610904611a94565b61091683600080600086866000611b00565b505050565b61092c33600085600186868a611b00565b50505050565b61091633600085600086866000611b00565b610916338460008086866000611b00565b86156109da57600480546040516323b872dd60e01b81526001600160a01b03909116916323b872dd9161098e91339130918d91016135a3565b6020604051808303816000875af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d191906135c7565b6109da57600080fd5b6109e93386868686868c611b00565b50505050505050565b60075460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b90610a2290339060040161327e565b600060405180830381600087803b158015610a3c57600080fd5b505af115801561092c573d6000803e3d6000fd5b610a58612169565b610a6260006121c3565b565b600080546040805163c7662fa560e01b8152905183926001600160a01b03169163c7662fa59160048083019260209291908290030181865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061355b565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c7662fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d919061355b565b9050610b5981836135fa565b9250505090565b610b68612169565b610b718b612215565b610b7a8a612215565b610b8389612215565b610b8c88612215565b610b9587612215565b610b9e86612215565b610ba785612215565b610bb084612215565b610bb983612215565b610bc282612215565b600480546001600160a01b03199081166001600160a01b038e8116919091179092556005805482168d84161790556000805482168c84161790556001805482168b84161790556006805482168a8416179055600780548216898416179055600280548216888416179055600a80548216878416179055600980548216868416179055600880548216858416179055600b80549091169183169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567890610c90908c9061327e565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd88289604051610cc7919061327e565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b88604051610cfe919061327e565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f87604051610d35919061327e565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051610d6c919061327e565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051610da3919061327e565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880084604051610dda919061327e565b60405180910390a17f522d83e1b4d0586985996a5a2f3987e11187efba22d8ee8b185af633301082af83604051610e11919061327e565b60405180910390a17f7f35097d0a4ae21d735903f35b1a00cfafcefe66f953b129f52b8a4c1953cc6082604051610e48919061327e565b60405180910390a16108ef610a50565b60008054604080516321901a7960e21b8152905183926001600160a01b03169163864069e49160048083019260209291908290030181865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061355b565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b29573d6000803e3d6000fd5b60408051606080820183526005546001600160a01b0390811683526000805482166020808601919091526009548316858701528551610100810187528281529081018290528086018290529283018190526080830181905260a0830181905260c0830181905260e08301526004805494516323b872dd60e01b81529394929392909116916323b872dd91610fb791339130918d91016135a3565b6020604051808303816000875af1158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906135c7565b61100357600080fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c919061355b565b80825260009061108b906122be565b905061109787826122db565b82516110a390336123ef565b60408201869052806110df576110c383600001518460400151888a6124b1565b6020830181905260408301516110d991906135fa565b60408301525b6110ec82604001516126d5565b6040820151606083018190526111045761110461360d565b6111178883606001518460000151612753565b6080830152606082015161112c908990612787565b60a083015280156111495761114482608001516127bf565b61117c565b6111568260800151612837565b600061116f8960018560600151600187600001516118d1565b905061117a81611944565b505b8251604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f906111ae90339060019060040161358a565b600060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506112119033908c9060040161358a565b6020604051808303816000875af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611254919061355b565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161128a9133919060040161358a565b6020604051808303816000875af11580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd919061355b565b5082516040516382fe3eb960e01b81526001600160a01b03909116906382fe3eb9906112fd90339060040161327e565b600060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a915061135e90339060040161327e565b6020604051808303816000875af115801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a1919061355b565b60c0830152600a5460a08301516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916113e0913391908a908a90600401613623565b600060405180830381600087803b1580156113fa57600080fd5b505af115801561140e573d6000803e3d6000fd5b505084516040516315d549f160e01b81526001600160a01b0390911692506315d549f1915061144190339060040161327e565b6020604051808303816000875af1158015611460573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611484919061355b565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26114ce8360200151896128c7565b6114e783602001518460400151338986604001516129a2565b60608281015160c084015160408051928352602083018c9052820152600091810191909152339060008051602061369b8339815191529060800160405180910390a260208083015160405190815233917f9794ec0d2a774157c86453c5237bd9a8968af93795f98e8d51ec240ab46beb7b910160405180910390a25050505050505050565b600480546040516323b872dd60e01b81526001600160a01b03909116916323b872dd9161159f91339130918991016135a3565b6020604051808303816000875af11580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e291906135c7565b6115eb57600080fd5b61091633600080600086866000611b00565b611605612169565b6001600160a01b03811661166f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611678816121c3565b50565b61168f6103e8670de0b6b3a764000061364e565b61169a906005613670565b81565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906116cc90859060040161327e565b602060405180830381865afa1580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d919061355b565b9050806001146109165760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b6064820152608401611666565b61177f816122be565b156116785760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611666565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061181c90869060040161327e565b602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d919061355b565b10156109165760405162461bcd60e51b815260206004820152603c60248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f7567682053494d20746f206d616b652072657061796d656e74000000006064820152608401611666565b6000806118dc610e58565b905060006118e8610a64565b9050866118fe576118f98883613687565b611908565b61190888836135fa565b91508461191e576119198682613687565b611928565b61192886826135fa565b90506000611937838387612753565b9998505050505050505050565b6714d1120d7b1600008110156116785760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611666565b604051636bfc0b7960e01b8152600481018290526001600160a01b03851690636bfc0b7990602401600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0386169250639dc29fac9150611a5c908590859060040161358a565b600060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b5050505050505050565b6006546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b6064820152608401611666565b60408051606080820183526005546001600160a01b03908116835260008054821660208086019190915260095483168587015285516101a0810187528281528082018390528087018390529384018290526080840182905260a0840182905260c0840182905260e08401829052610100840182905261012084018290526101408401829052610160840182905261018084018290526002548651630fdb11cf60e01b8152965195969495931693630fdb11cf93600480830194919283900301908290875af1158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa919061355b565b808252600090611c09906122be565b90508615611c2457611c1b84826122db565b611c2488612a63565b611c2d89612ad3565b611c378989612bb2565b8251611c43908b61169d565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a0823191611c759130910161327e565b602060405180830381865afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb6919061355b565b9050336001600160a01b038c161480611cee57506006546001600160a01b031633148015611ce45750600081115b8015611cee575088155b611cfa57611cfa61360d565b8351604051630b07655760e01b81526001600160a01b0390911690630b07655790611d29908e9060040161327e565b600060405180830381600087803b158015611d4357600080fd5b505af1158015611d57573d6000803e3d6000fd5b50505050611d65818b612cb9565b15156060850152602084015260408301899052878015611d83575081155b15611db957611d9c846000015185604001518b886124b1565b61012084018190526040840151611db391906135fa565b60408401525b835160405163d66a255360e01b81526001600160a01b039091169063d66a255390611de8908e9060040161327e565b602060405180830381865afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e29919061355b565b608084015283516040516309019aaf60e31b81526001600160a01b039091169063480cd57890611e5d908e9060040161327e565b602060405180830381865afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e919061355b565b60a0840181905260808401518451611eb7929190612753565b8360c0018181525050611ee78360a0015184608001518560200151866060015187604001518d8960000151612cd8565b60e084015260a08301518a1115611f0057611f0061360d565b611f0c828b8a86612d0b565b87158015611f1a5750600089115b15611f6657611f418360400151611f32856080015190565b611f3c9190613687565b6126d5565b611f5383608001518460400151612d7f565b611f6684604001518c85604001516117ee565b611f8484600001518c8560200151866060015187604001518d612e01565b6101408501526101608401528351604051630c7940bd60e11b81526001600160a01b03909116906318f2817a90611fbf908e9060040161327e565b6020604051808303816000875af1158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612002919061355b565b8361018001818152505060006120308460a0015185608001518660200151876060015188604001518e612ff3565b600a5460405163015f109360e51b81529192506001600160a01b031690632be2126090612067908f9085908d908d90600401613623565b600060405180830381600087803b15801561208157600080fd5b505af1158015612095573d6000803e3d6000fd5b505050508b6001600160a01b031660008051602061369b8339815191528561014001518661016001518761018001516002808111156120d6576120d6613574565b6040805194855260208501939093529183015260ff16606082015260800160405180910390a261012084015160405190815233907f9794ec0d2a774157c86453c5237bd9a8968af93795f98e8d51ec240ab46beb7b9060200160405180910390a261215b8560200151866040015133876020015188606001518f8f8b60400151613024565b505050505050505050505050565b6003546001600160a01b03163314610a625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611666565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811661226b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401611666565b803b806122ba5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401611666565b5050565b6000806122ca836130b9565b6714d1120d7b160000119392505050565b801561235457670de0b6b3a76400008211156122ba5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c657373207468616044820152716e206f7220657175616c20746f203130302560701b6064820152608401611666565b6123686103e8670de0b6b3a764000061364e565b612373906005613670565b821015801561238a5750670de0b6b3a76400008211155b6122ba5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401611666565b6040516321e3780160e01b81526000906001600160a01b038416906321e378019061241e90859060040161327e565b602060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f919061355b565b9050806001036109165760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f766520697320616374697665000000006044820152606401611666565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124ee57600080fd5b505af1158015612502573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa15801561254e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612572919061355b565b905061257f8185856130e5565b600061258c60028361364e565b6008546040516340c10f1960e01b81529192506001600160a01b03808916926340c10f19926125c1921690859060040161358a565b600060405180830381600087803b1580156125db57600080fd5b505af11580156125ef573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b5050600b546001600160a01b03808a1693506340c10f1992501661267b8486613687565b6040518363ffffffff1660e01b815260040161269892919061358a565b600060405180830381600087803b1580156126b257600080fd5b505af11580156126c6573d6000803e3d6000fd5b50939998505050505050505050565b670de0b6b3a76400008110156116785760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d0000000000006064820152608401611666565b6000821561277b576000836127688487613670565b612772919061364e565b91506127809050565b506000195b9392505050565b600081156127b457816127a368056bc75e2d6310000085613670565b6127ad919061364e565b90506127b9565b506000195b92915050565b6714d1120d7b1600008110156116785760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611666565b670f43fc2c04ee00008110156116785760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611666565b6004805460405163a9059cbb60e01b81526001600160a01b039091169163a9059cbb916128f891869186910161358a565b6020604051808303816000875af1158015612917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293b91906135c7565b61294457600080fd5b604051636dd8630d60e11b8152600481018290526001600160a01b0383169063dbb0c61a90602401600060405180830381600087803b15801561298657600080fd5b505af115801561299a573d6000803e3d6000fd5b505050505050565b60405163707cf39f60e01b8152600481018290526001600160a01b0386169063707cf39f90602401600060405180830381600087803b1580156129e457600080fd5b505af11580156129f8573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f199150612a2a908690869060040161358a565b600060405180830381600087803b158015612a4457600080fd5b505af1158015612a58573d6000803e3d6000fd5b505050505050505050565b600081116116785760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b6064820152608401611666565b600480546040516370a0823160e01b81526001600160a01b03909116916370a0823191612b029130910161327e565b602060405180830381865afa158015612b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b43919061355b565b1580612b4d575080155b6116785760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b6064820152608401611666565b600480546040516370a0823160e01b81526001600160a01b03909116916370a0823191612be19130910161327e565b602060405180830381865afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c22919061355b565b151580612c2e57508115155b80612c3857508015155b6122ba5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611666565b6000808315612ccd57508290506001612cd1565b8291505b9250929050565b6000806000612ceb8a8a8a8a8a8a613156565b915091506000612cfc838387612753565b9b9a5050505050505050505050565b8315612d4457612d1a83613194565b8115612d3f57612d2d8160e001516127bf565b612d3f8160e001518260c00151613208565b61092c565b612d518160e00151612837565b612d6e8160200151826060015183604001518585600001516118d1565b610100820181905261092c90611944565b818111156122ba5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a401611666565b600080600085612e815760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f84390612e39908b908b9060040161358a565b6020604051808303816000875af1158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c919061355b565b612ef2565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790612eaf908b908b9060040161358a565b6020604051808303816000875af1158015612ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef2919061355b565b9050600084612f7157604051630930874960e11b81526001600160a01b038b16906312610e9290612f29908c908a9060040161358a565b6020604051808303816000875af1158015612f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6c919061355b565b612fe2565b604051639976cf4560e01b81526001600160a01b038b1690639976cf4590612f9f908c908a9060040161358a565b6020604051808303816000875af1158015612fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe2919061355b565b919a91995090975050505050505050565b6000806000613006898989898989613156565b9150915060006130168383612787565b9a9950505050505050505050565b811561303c5761303788888886856129a2565b613048565b613048888888866119d4565b831561305d5761305888866128c7565b611a8a565b6040516303570deb60e61b81526001600160a01b0389169063d5c37ac09061308b908990899060040161358a565b600060405180830381600087803b1580156130a557600080fd5b505af115801561215b573d6000803e3d6000fd5b6000806130c4610e58565b905060006130d0610a64565b90506130dd828286612753565b949350505050565b6000826130fa670de0b6b3a764000086613670565b613104919061364e565b90508181111561092c5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611666565b60008087878661316f5761316a888b613687565b613179565b613179888b6135fa565b91508461318a57612f6c868a613687565b612fe2868a6135fa565b80156116785760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611666565b808210156122ba5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611666565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146132a957600080fd5b919050565b6000806000606084860312156132c357600080fd5b6132cc84613292565b92506132da60208501613292565b91506132e860408501613292565b90509250925092565b6000806000806080858703121561330757600080fd5b843593506020850135925061331e60408601613292565b915061332c60608601613292565b905092959194509250565b60008060006060848603121561334c57600080fd5b833592506132da60208501613292565b801515811461167857600080fd5b600080600080600080600060e0888a03121561338557600080fd5b8735965060208801359550604088013594506060880135935060808801356133ac8161335c565b92506133ba60a08901613292565b91506133c860c08901613292565b905092959891949750929550565b60008060008060008060008060008060006101608c8e0312156133f857600080fd5b6134018c613292565b9a5061340f60208d01613292565b995061341d60408d01613292565b985061342b60608d01613292565b975061343960808d01613292565b965061344760a08d01613292565b955061345560c08d01613292565b945061346360e08d01613292565b93506134726101008d01613292565b92506134816101208d01613292565b91506134906101408d01613292565b90509295989b509295989b9093969950565b600080600080600060a086880312156134ba57600080fd5b8535945060208601359350604086013592506134d860608701613292565b91506134e660808701613292565b90509295509295909350565b600060208083528351808285015260005b8181101561351f57858101830151858201604001528201613503565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561355257600080fd5b61278082613292565b60006020828403121561356d57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156135d957600080fd5b81516127808161335c565b634e487b7160e01b600052601160045260246000fd5b808201808211156127b9576127b96135e4565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b60008261366b57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176127b9576127b96135e4565b818103818111156127b9576127b96135e456fec3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba26469706673582212206b16548990348aeffade3c7284466e774668358f69ea43099e2d63161566a24564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101b95760003560e01c8063741bef1a116100ed578063a20baee611610090578063a20baee61461021e578063a3f4df7e1461046d578063ae918754146104b8578063b3f00674146104d8578063cda775f9146104f8578063d540f25014610518578063d56d6bbe14610538578063f2fde38b14610558578063f92d34331461057857600080fd5b8063741bef1a14610396578063794e5724146103b6578063795d26c3146103d25780637985c5e4146103e75780637f7dde4a14610407578063887105d3146104275780638da5cb5b1461043c5780638f09162b1461045a57600080fd5b80633d83908a116101605780633d83908a146102c85780634870dd9a146102e85780635530273c146102fd5780635617c5c71461031d5780635733d58f1461033d5780635da8b1c3146103595780636f0b0c1c1461036c578063715018a61461038157806372fe25aa1461021e57600080fd5b80630b622ab2146101be5780630e704d50146101f457806311edbb581461020b5780631bf435551461021e57806321916942146102485780633b0713c5146102685780633c8c75ea146102885780633cc74225146102a8575b600080fd5b3480156101ca57600080fd5b506006546101de906001600160a01b031681565b6040516101eb919061327e565b60405180910390f35b34801561020057600080fd5b5061020961058d565b005b6102096102193660046132ae565b6108fc565b34801561022a57600080fd5b5061023a670de0b6b3a764000081565b6040519081526020016101eb565b34801561025457600080fd5b506102096102633660046132f1565b61091b565b34801561027457600080fd5b50610209610283366004613337565b610932565b34801561029457600080fd5b506008546101de906001600160a01b031681565b3480156102b457600080fd5b506001546101de906001600160a01b031681565b3480156102d457600080fd5b506005546101de906001600160a01b031681565b3480156102f457600080fd5b5061023a60c881565b34801561030957600080fd5b50610209610318366004613337565b610944565b34801561032957600080fd5b506004546101de906001600160a01b031681565b34801561034957600080fd5b5061023a6714d1120d7b16000081565b61020961036736600461336a565b610955565b34801561037857600080fd5b506102096109f2565b34801561038d57600080fd5b50610209610a50565b3480156103a257600080fd5b506002546101de906001600160a01b031681565b3480156103c257600080fd5b5061023a670f43fc2c04ee000081565b3480156103de57600080fd5b5061023a610a64565b3480156103f357600080fd5b506102096104023660046133d6565b610b60565b34801561041357600080fd5b506000546101de906001600160a01b031681565b34801561043357600080fd5b5061023a610e58565b34801561044857600080fd5b506003546001600160a01b03166101de565b6102096104683660046134a2565b610f1d565b34801561047957600080fd5b506104ab60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516101eb91906134f2565b3480156104c457600080fd5b50600a546101de906001600160a01b031681565b3480156104e457600080fd5b50600b546101de906001600160a01b031681565b34801561050457600080fd5b506007546101de906001600160a01b031681565b34801561052457600080fd5b506009546101de906001600160a01b031681565b34801561054457600080fd5b50610209610553366004613337565b61156c565b34801561056457600080fd5b50610209610573366004613540565b6115fd565b34801561058457600080fd5b5061023a61167b565b6005546000546009546001600160a01b039283169291821691166105b1833361169d565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610620919061355b565b905061062b81611776565b604051630b07655760e01b81526001600160a01b03851690630b0765579061065790339060040161327e565b600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b50506040516309019aaf60e31b8152600092506001600160a01b038716915063480cd578906106b890339060040161327e565b602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f9919061355b565b90506000856001600160a01b031663d66a2553336040518263ffffffff1660e01b8152600401610729919061327e565b602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061355b565b90506107778433836117ee565b6000610788836000846000886118d1565b905061079381611944565b604051631fc5750960e31b81526001600160a01b0388169063fe2ba848906107bf90339060040161327e565b600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b50506040516365e89c5760e11b81526001600160a01b038a16925063cbd138ae915061081d90339060040161327e565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b5050604080516000808252602082018190528183015260016060820152905133935060008051602061369b83398151915292509081900360800190a2610893868633856119d4565b6040516303570deb60e61b81526001600160a01b0387169063d5c37ac0906108c1903390879060040161358a565b600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b5050505050505050505050565b610904611a94565b61091683600080600086866000611b00565b505050565b61092c33600085600186868a611b00565b50505050565b61091633600085600086866000611b00565b610916338460008086866000611b00565b86156109da57600480546040516323b872dd60e01b81526001600160a01b03909116916323b872dd9161098e91339130918d91016135a3565b6020604051808303816000875af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d191906135c7565b6109da57600080fd5b6109e93386868686868c611b00565b50505050505050565b60075460405163b32beb5b60e01b81526001600160a01b039091169063b32beb5b90610a2290339060040161327e565b600060405180830381600087803b158015610a3c57600080fd5b505af115801561092c573d6000803e3d6000fd5b610a58612169565b610a6260006121c3565b565b600080546040805163c7662fa560e01b8152905183926001600160a01b03169163c7662fa59160048083019260209291908290030181865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061355b565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c7662fa56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d919061355b565b9050610b5981836135fa565b9250505090565b610b68612169565b610b718b612215565b610b7a8a612215565b610b8389612215565b610b8c88612215565b610b9587612215565b610b9e86612215565b610ba785612215565b610bb084612215565b610bb983612215565b610bc282612215565b600480546001600160a01b03199081166001600160a01b038e8116919091179092556005805482168d84161790556000805482168c84161790556001805482168b84161790556006805482168a8416179055600780548216898416179055600280548216888416179055600a80548216878416179055600980548216868416179055600880548216858416179055600b80549091169183169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a567890610c90908c9061327e565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd88289604051610cc7919061327e565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b88604051610cfe919061327e565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f87604051610d35919061327e565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d86604051610d6c919061327e565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db26485604051610da3919061327e565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe7880084604051610dda919061327e565b60405180910390a17f522d83e1b4d0586985996a5a2f3987e11187efba22d8ee8b185af633301082af83604051610e11919061327e565b60405180910390a17f7f35097d0a4ae21d735903f35b1a00cfafcefe66f953b129f52b8a4c1953cc6082604051610e48919061327e565b60405180910390a16108ef610a50565b60008054604080516321901a7960e21b8152905183926001600160a01b03169163864069e49160048083019260209291908290030181865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061355b565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663864069e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b29573d6000803e3d6000fd5b60408051606080820183526005546001600160a01b0390811683526000805482166020808601919091526009548316858701528551610100810187528281529081018290528086018290529283018190526080830181905260a0830181905260c0830181905260e08301526004805494516323b872dd60e01b81529394929392909116916323b872dd91610fb791339130918d91016135a3565b6020604051808303816000875af1158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906135c7565b61100357600080fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c919061355b565b80825260009061108b906122be565b905061109787826122db565b82516110a390336123ef565b60408201869052806110df576110c383600001518460400151888a6124b1565b6020830181905260408301516110d991906135fa565b60408301525b6110ec82604001516126d5565b6040820151606083018190526111045761110461360d565b6111178883606001518460000151612753565b6080830152606082015161112c908990612787565b60a083015280156111495761114482608001516127bf565b61117c565b6111568260800151612837565b600061116f8960018560600151600187600001516118d1565b905061117a81611944565b505b8251604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f906111ae90339060019060040161358a565b600060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505084516040516372423c1760e01b81526001600160a01b0390911692506372423c1791506112119033908c9060040161358a565b6020604051808303816000875af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611254919061355b565b5082516060830151604051639976cf4560e01b81526001600160a01b0390921691639976cf459161128a9133919060040161358a565b6020604051808303816000875af11580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd919061355b565b5082516040516382fe3eb960e01b81526001600160a01b03909116906382fe3eb9906112fd90339060040161327e565b600060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81526001600160a01b0390911692506318f2817a915061135e90339060040161327e565b6020604051808303816000875af115801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a1919061355b565b60c0830152600a5460a08301516040516346f7cf8760e01b81526001600160a01b03909216916346f7cf87916113e0913391908a908a90600401613623565b600060405180830381600087803b1580156113fa57600080fd5b505af115801561140e573d6000803e3d6000fd5b505084516040516315d549f160e01b81526001600160a01b0390911692506315d549f1915061144190339060040161327e565b6020604051808303816000875af1158015611460573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611484919061355b565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26114ce8360200151896128c7565b6114e783602001518460400151338986604001516129a2565b60608281015160c084015160408051928352602083018c9052820152600091810191909152339060008051602061369b8339815191529060800160405180910390a260208083015160405190815233917f9794ec0d2a774157c86453c5237bd9a8968af93795f98e8d51ec240ab46beb7b910160405180910390a25050505050505050565b600480546040516323b872dd60e01b81526001600160a01b03909116916323b872dd9161159f91339130918991016135a3565b6020604051808303816000875af11580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e291906135c7565b6115eb57600080fd5b61091633600080600086866000611b00565b611605612169565b6001600160a01b03811661166f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611678816121c3565b50565b61168f6103e8670de0b6b3a764000061364e565b61169a906005613670565b81565b6040516321e3780160e01b81526000906001600160a01b038416906321e37801906116cc90859060040161327e565b602060405180830381865afa1580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d919061355b565b9050806001146109165760405162461bcd60e51b815260206004820152602e60248201527f426f72726f7765724f70733a2054726f766520646f6573206e6f74206578697360448201526d1d081bdc881a5cc818db1bdcd95960921b6064820152608401611666565b61177f816122be565b156116785760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611666565b6040516370a0823160e01b815281906001600160a01b038516906370a082319061181c90869060040161327e565b602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d919061355b565b10156109165760405162461bcd60e51b815260206004820152603c60248201527f426f72726f7765724f70733a2043616c6c657220646f65736e7420686176652060448201527f656e6f7567682053494d20746f206d616b652072657061796d656e74000000006064820152608401611666565b6000806118dc610e58565b905060006118e8610a64565b9050866118fe576118f98883613687565b611908565b61190888836135fa565b91508461191e576119198682613687565b611928565b61192886826135fa565b90506000611937838387612753565b9998505050505050505050565b6714d1120d7b1600008110156116785760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611666565b604051636bfc0b7960e01b8152600481018290526001600160a01b03851690636bfc0b7990602401600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0386169250639dc29fac9150611a5c908590859060040161358a565b600060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b5050505050505050565b6006546001600160a01b03163314610a625760405162461bcd60e51b815260206004820152602960248201527f426f72726f7765724f70733a2043616c6c6572206973206e6f742053746162696044820152681b1a5d1e48141bdbdb60ba1b6064820152608401611666565b60408051606080820183526005546001600160a01b03908116835260008054821660208086019190915260095483168587015285516101a0810187528281528082018390528087018390529384018290526080840182905260a0840182905260c0840182905260e08401829052610100840182905261012084018290526101408401829052610160840182905261018084018290526002548651630fdb11cf60e01b8152965195969495931693630fdb11cf93600480830194919283900301908290875af1158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa919061355b565b808252600090611c09906122be565b90508615611c2457611c1b84826122db565b611c2488612a63565b611c2d89612ad3565b611c378989612bb2565b8251611c43908b61169d565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a0823191611c759130910161327e565b602060405180830381865afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb6919061355b565b9050336001600160a01b038c161480611cee57506006546001600160a01b031633148015611ce45750600081115b8015611cee575088155b611cfa57611cfa61360d565b8351604051630b07655760e01b81526001600160a01b0390911690630b07655790611d29908e9060040161327e565b600060405180830381600087803b158015611d4357600080fd5b505af1158015611d57573d6000803e3d6000fd5b50505050611d65818b612cb9565b15156060850152602084015260408301899052878015611d83575081155b15611db957611d9c846000015185604001518b886124b1565b61012084018190526040840151611db391906135fa565b60408401525b835160405163d66a255360e01b81526001600160a01b039091169063d66a255390611de8908e9060040161327e565b602060405180830381865afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e29919061355b565b608084015283516040516309019aaf60e31b81526001600160a01b039091169063480cd57890611e5d908e9060040161327e565b602060405180830381865afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e919061355b565b60a0840181905260808401518451611eb7929190612753565b8360c0018181525050611ee78360a0015184608001518560200151866060015187604001518d8960000151612cd8565b60e084015260a08301518a1115611f0057611f0061360d565b611f0c828b8a86612d0b565b87158015611f1a5750600089115b15611f6657611f418360400151611f32856080015190565b611f3c9190613687565b6126d5565b611f5383608001518460400151612d7f565b611f6684604001518c85604001516117ee565b611f8484600001518c8560200151866060015187604001518d612e01565b6101408501526101608401528351604051630c7940bd60e11b81526001600160a01b03909116906318f2817a90611fbf908e9060040161327e565b6020604051808303816000875af1158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612002919061355b565b8361018001818152505060006120308460a0015185608001518660200151876060015188604001518e612ff3565b600a5460405163015f109360e51b81529192506001600160a01b031690632be2126090612067908f9085908d908d90600401613623565b600060405180830381600087803b15801561208157600080fd5b505af1158015612095573d6000803e3d6000fd5b505050508b6001600160a01b031660008051602061369b8339815191528561014001518661016001518761018001516002808111156120d6576120d6613574565b6040805194855260208501939093529183015260ff16606082015260800160405180910390a261012084015160405190815233907f9794ec0d2a774157c86453c5237bd9a8968af93795f98e8d51ec240ab46beb7b9060200160405180910390a261215b8560200151866040015133876020015188606001518f8f8b60400151613024565b505050505050505050505050565b6003546001600160a01b03163314610a625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611666565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811661226b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401611666565b803b806122ba5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401611666565b5050565b6000806122ca836130b9565b6714d1120d7b160000119392505050565b801561235457670de0b6b3a76400008211156122ba5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c657373207468616044820152716e206f7220657175616c20746f203130302560701b6064820152608401611666565b6123686103e8670de0b6b3a764000061364e565b612373906005613670565b821015801561238a5750670de0b6b3a76400008211155b6122ba5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201526f656e20302e352520616e64203130302560801b6064820152608401611666565b6040516321e3780160e01b81526000906001600160a01b038416906321e378019061241e90859060040161327e565b602060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f919061355b565b9050806001036109165760405162461bcd60e51b815260206004820152601c60248201527f426f72726f7765724f70733a2054726f766520697320616374697665000000006044820152606401611666565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124ee57600080fd5b505af1158015612502573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa15801561254e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612572919061355b565b905061257f8185856130e5565b600061258c60028361364e565b6008546040516340c10f1960e01b81529192506001600160a01b03808916926340c10f19926125c1921690859060040161358a565b600060405180830381600087803b1580156125db57600080fd5b505af11580156125ef573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b5050600b546001600160a01b03808a1693506340c10f1992501661267b8486613687565b6040518363ffffffff1660e01b815260040161269892919061358a565b600060405180830381600087803b1580156126b257600080fd5b505af11580156126c6573d6000803e3d6000fd5b50939998505050505050505050565b670de0b6b3a76400008110156116785760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7765724f70733a2054726f76652773206e65742064656274206d7560448201527f73742062652067726561746572207468616e206d696e696d756d0000000000006064820152608401611666565b6000821561277b576000836127688487613670565b612772919061364e565b91506127809050565b506000195b9392505050565b600081156127b457816127a368056bc75e2d6310000085613670565b6127ad919061364e565b90506127b9565b506000195b92915050565b6714d1120d7b1600008110156116785760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611666565b670f43fc2c04ee00008110156116785760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611666565b6004805460405163a9059cbb60e01b81526001600160a01b039091169163a9059cbb916128f891869186910161358a565b6020604051808303816000875af1158015612917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293b91906135c7565b61294457600080fd5b604051636dd8630d60e11b8152600481018290526001600160a01b0383169063dbb0c61a90602401600060405180830381600087803b15801561298657600080fd5b505af115801561299a573d6000803e3d6000fd5b505050505050565b60405163707cf39f60e01b8152600481018290526001600160a01b0386169063707cf39f90602401600060405180830381600087803b1580156129e457600080fd5b505af11580156129f8573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03871692506340c10f199150612a2a908690869060040161358a565b600060405180830381600087803b158015612a4457600080fd5b505af1158015612a58573d6000803e3d6000fd5b505050505050505050565b600081116116785760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e637265617365207265717569604482015276726573206e6f6e2d7a65726f20646562744368616e676560481b6064820152608401611666565b600480546040516370a0823160e01b81526001600160a01b03909116916370a0823191612b029130910161327e565b602060405180830381865afa158015612b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b43919061355b565b1580612b4d575080155b6116785760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b6064820152608401611666565b600480546040516370a0823160e01b81526001600160a01b03909116916370a0823191612be19130910161327e565b602060405180830381865afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c22919061355b565b151580612c2e57508115155b80612c3857508015155b6122ba5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611666565b6000808315612ccd57508290506001612cd1565b8291505b9250929050565b6000806000612ceb8a8a8a8a8a8a613156565b915091506000612cfc838387612753565b9b9a5050505050505050505050565b8315612d4457612d1a83613194565b8115612d3f57612d2d8160e001516127bf565b612d3f8160e001518260c00151613208565b61092c565b612d518160e00151612837565b612d6e8160200151826060015183604001518585600001516118d1565b610100820181905261092c90611944565b818111156122ba5760405162461bcd60e51b815260206004820152604360248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e207468652054726f76652773206460648201526219589d60ea1b608482015260a401611666565b600080600085612e815760405163d3d6f84360e01b81526001600160a01b038a169063d3d6f84390612e39908b908b9060040161358a565b6020604051808303816000875af1158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c919061355b565b612ef2565b6040516372423c1760e01b81526001600160a01b038a16906372423c1790612eaf908b908b9060040161358a565b6020604051808303816000875af1158015612ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef2919061355b565b9050600084612f7157604051630930874960e11b81526001600160a01b038b16906312610e9290612f29908c908a9060040161358a565b6020604051808303816000875af1158015612f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6c919061355b565b612fe2565b604051639976cf4560e01b81526001600160a01b038b1690639976cf4590612f9f908c908a9060040161358a565b6020604051808303816000875af1158015612fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe2919061355b565b919a91995090975050505050505050565b6000806000613006898989898989613156565b9150915060006130168383612787565b9a9950505050505050505050565b811561303c5761303788888886856129a2565b613048565b613048888888866119d4565b831561305d5761305888866128c7565b611a8a565b6040516303570deb60e61b81526001600160a01b0389169063d5c37ac09061308b908990899060040161358a565b600060405180830381600087803b1580156130a557600080fd5b505af115801561215b573d6000803e3d6000fd5b6000806130c4610e58565b905060006130d0610a64565b90506130dd828286612753565b949350505050565b6000826130fa670de0b6b3a764000086613670565b613104919061364e565b90508181111561092c5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611666565b60008087878661316f5761316a888b613687565b613179565b613179888b6135fa565b91508461318a57612f6c868a613687565b612fe2868a6135fa565b80156116785760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611666565b808210156122ba5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611666565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146132a957600080fd5b919050565b6000806000606084860312156132c357600080fd5b6132cc84613292565b92506132da60208501613292565b91506132e860408501613292565b90509250925092565b6000806000806080858703121561330757600080fd5b843593506020850135925061331e60408601613292565b915061332c60608601613292565b905092959194509250565b60008060006060848603121561334c57600080fd5b833592506132da60208501613292565b801515811461167857600080fd5b600080600080600080600060e0888a03121561338557600080fd5b8735965060208801359550604088013594506060880135935060808801356133ac8161335c565b92506133ba60a08901613292565b91506133c860c08901613292565b905092959891949750929550565b60008060008060008060008060008060006101608c8e0312156133f857600080fd5b6134018c613292565b9a5061340f60208d01613292565b995061341d60408d01613292565b985061342b60608d01613292565b975061343960808d01613292565b965061344760a08d01613292565b955061345560c08d01613292565b945061346360e08d01613292565b93506134726101008d01613292565b92506134816101208d01613292565b91506134906101408d01613292565b90509295989b509295989b9093969950565b600080600080600060a086880312156134ba57600080fd5b8535945060208601359350604086013592506134d860608701613292565b91506134e660808701613292565b90509295509295909350565b600060208083528351808285015260005b8181101561351f57858101830151858201604001528201613503565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561355257600080fd5b61278082613292565b60006020828403121561356d57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156135d957600080fd5b81516127808161335c565b634e487b7160e01b600052601160045260246000fd5b808201808211156127b9576127b96135e4565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b60008261366b57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176127b9576127b96135e4565b818103818111156127b9576127b96135e456fec3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba26469706673582212206b16548990348aeffade3c7284466e774668358f69ea43099e2d63161566a24564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimCollateral()": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21034,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)23133"
      },
      {
        "astId": 21037,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)23462"
      },
      {
        "astId": 21041,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)23597"
      },
      {
        "astId": 590,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4738,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "WSTETHAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4741,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITroveManager)24470"
      },
      {
        "astId": 4743,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4746,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollSurplusPool)23389"
      },
      {
        "astId": 4748,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "simVeDistributor",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4751,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "simToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISIMToken)23682"
      },
      {
        "astId": 4754,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ISortedTroves)23818"
      },
      {
        "astId": 4756,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)23133": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)23389": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)23462": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)23597": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISIMToken)23682": {
        "encoding": "inplace",
        "label": "contract ISIMToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)23818": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)24470": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}